<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>跨域问题的多种解决方案</title>
      <link href="/2020/03/07/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E7%9A%84%E5%A4%9A%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2020/03/07/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E7%9A%84%E5%A4%9A%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="跨域问题的多种解决方案"><a href="#跨域问题的多种解决方案" class="headerlink" title="跨域问题的多种解决方案"></a>跨域问题的多种解决方案</h2><ol><li><p>服务器设置响应头 <code>response.setHeader("Access-Control-Allow-Origin", "*")</code></p></li><li><p>jsonp方式，只能发送get请求，也需要服务器的配合支持。</p></li><li><p>利用动态创建Script标签，script没有同源策略的限制，是可以跨域的。</p></li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//声明回调函数</span><br><span class="line">funtion callback(result)</span><br><span class="line">{</span><br><span class="line">var data = JSON.stringify(result);</span><br><span class="line">console.log(data);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">$(document).ready(function () {</span><br><span class="line">    $("#btn").click(function () {</span><br><span class="line">        //向头部输入一个脚本，该脚本发起一个跨域请求</span><br><span class="line">        $("head").append("<script src="http://localhost:9090/GetStudentInfo?callback=callback"><\/script>");</span><br><span class="line">    });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><ol start="4"><li>Nginx 代理服务器</li></ol><p>跨域问题是浏览器的同源策略限制，服务器之间是没有的，那我们先把请求给我们的代理服务器，再让我们的代理服务器去调用这个接口，在发送给前端就可以了。</p></body></html></script></span></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务系列之IdentityServer4</title>
      <link href="/2020/03/05/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%B3%BB%E5%88%97%E4%B9%8BIdentityServer4/"/>
      <url>/2020/03/05/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%B3%BB%E5%88%97%E4%B9%8BIdentityServer4/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body></body></html>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
            <tag> NetCore </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务系列之Ocelot</title>
      <link href="/2020/03/05/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%B3%BB%E5%88%97%E4%B9%8BOcelot/"/>
      <url>/2020/03/05/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%B3%BB%E5%88%97%E4%B9%8BOcelot/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body></body></html>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
            <tag> NetCore </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务系列之Consul</title>
      <link href="/2020/03/05/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%B3%BB%E5%88%97%E4%B9%8BConsul/"/>
      <url>/2020/03/05/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%B3%BB%E5%88%97%E4%B9%8BConsul/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body></body></html>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
            <tag> NetCore </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 获取Utc时间以及Datetime互相转化</title>
      <link href="/2020/03/02/C-%E8%8E%B7%E5%8F%96Utc%E6%97%B6%E9%97%B4%E4%BB%A5%E5%8F%8ADatetime%E4%BA%92%E7%9B%B8%E8%BD%AC%E5%8C%96/"/>
      <url>/2020/03/02/C-%E8%8E%B7%E5%8F%96Utc%E6%97%B6%E9%97%B4%E4%BB%A5%E5%8F%8ADatetime%E4%BA%92%E7%9B%B8%E8%BD%AC%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="C-获取utc时间，以及utc-datetime-互相转化"><a href="#C-获取utc时间，以及utc-datetime-互相转化" class="headerlink" title="C# 获取utc时间，以及utc datetime 互相转化"></a>C# 获取utc时间，以及utc datetime 互相转化</h2><p><code>DateTime.UtcNow.ToString();</code>  //输出的是0时区的事件，<br><code>DateTime.Now.ToString();</code>  //输出的是当前时区的时间，我们中国使用的是东八区的时间，所以差8个小时  </p><p>操作类：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class DateTimeHelper    </span><br><span class="line">{       </span><br><span class="line">public static int ConvertDateTimeInt(System.DateTime time)        </span><br><span class="line">{            </span><br><span class="line">　　double intResult = 0;            </span><br><span class="line">　　System.DateTime startTime = TimeZone.CurrentTimeZone.ToLocalTime(new System.DateTime(1970, 1, 1));            </span><br><span class="line">　　intResult =  (time - startTime).TotalSeconds ;            </span><br><span class="line">　　return (int)intResult;        </span><br><span class="line">}        </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">public static DateTime ConvertIntDatetime(double utc)        </span><br><span class="line">{                    </span><br><span class="line">　　System.DateTime startTime = TimeZone.CurrentTimeZone.ToLocalTime(new System.DateTime(1970, 1, 1));            </span><br><span class="line">　　startTime = startTime.AddSeconds(utc);                </span><br><span class="line">　　startTime = startTime.AddHours(8);//转化为北京时间(北京时间=UTC时间+8小时 )            </span><br><span class="line">　　return startTime;        </span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//调用方法</span><br><span class="line"></span><br><span class="line">// DateTime utcNow = DateTime.Now.ToUniversalTime();</span><br><span class="line"></span><br><span class="line">// double utc= ConvertDateTimeInt(utcNow);</span><br><span class="line"></span><br><span class="line">// DateTime dtime = ConvertIntDatetime(utc);</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Asp.Net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Asp.Net </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git提交代码到远程仓库</title>
      <link href="/2020/03/02/git%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
      <url>/2020/03/02/git%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="Git提交代码到远程仓库"><a href="#Git提交代码到远程仓库" class="headerlink" title="Git提交代码到远程仓库"></a>Git提交代码到远程仓库</h2><h3 id="1、初始化为git仓库"><a href="#1、初始化为git仓库" class="headerlink" title="1、初始化为git仓库"></a>1、初始化为git仓库</h3><pre><code>git init </code></pre><h3 id="2、添加所有要提交的文件"><a href="#2、添加所有要提交的文件" class="headerlink" title="2、添加所有要提交的文件"></a>2、添加所有要提交的文件</h3><pre><code>git add .</code></pre><h3 id="3、本次提交说明"><a href="#3、本次提交说明" class="headerlink" title="3、本次提交说明"></a>3、本次提交说明</h3><pre><code>git commit -m '提交说明'</code></pre><h3 id="4、关联GitHub远程仓库"><a href="#4、关联GitHub远程仓库" class="headerlink" title="4、关联GitHub远程仓库"></a>4、关联GitHub远程仓库</h3><pre><code>git remote add origin 仓库地址（没有添加ssh key建议使用 https地址）</code></pre><h3 id="5、获取远程仓库最新代码"><a href="#5、获取远程仓库最新代码" class="headerlink" title="5、获取远程仓库最新代码"></a>5、获取远程仓库最新代码</h3><pre><code>git pull origin master</code></pre><h3 id="6、推送本次提交到仓库"><a href="#6、推送本次提交到仓库" class="headerlink" title="6、推送本次提交到仓库"></a>6、推送本次提交到仓库</h3><pre><code>git push origin master</code></pre><blockquote><p>注意：<code>! [rejected]        master -> master (non-fast-forward)</code> 头指针报错解决：</p></blockquote><p>操作步骤：</p><pre><code>git pull origin master --allow-unrelated-historiesgit add .git commit -m '提交说明'git push origin master</code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DotnetCore多语言实现</title>
      <link href="/2020/03/02/DotnetCore%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/"/>
      <url>/2020/03/02/DotnetCore%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="NetCore-实现多语言"><a href="#NetCore-实现多语言" class="headerlink" title=".NetCore 实现多语言"></a>.NetCore 实现多语言</h2><p>ASP.NET Core中提供了一些本地化服务和中间件，可将网站本地化为不同的语言文化。</p><p>ASP.NET Core中我们可以使用Microsoft.AspNetCore.Localization库来实现本地化</p><h3 id="创建程序"><a href="#创建程序" class="headerlink" title="创建程序"></a>创建程序</h3><p>创建Web应用程序（模型视图控制器）</p><h3 id="配置Startup类"><a href="#配置Startup类" class="headerlink" title="配置Startup类"></a>配置Startup类</h3><p>在Startup类的 ConfigureServices方法中使用services.AddLocalization添加本地化服务</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//添加资源文件夹</span><br><span class="line">services.AddLocalization(o =></span><br><span class="line">   {</span><br><span class="line">       o.ResourcesPath = "Resources";</span><br><span class="line">   });</span><br><span class="line"></span><br><span class="line">//View中使用本地化</span><br><span class="line">services.AddMvc().AddViewLocalization(LanguageViewLocationExpanderFormat.Suffix);</span><br></pre></td></tr></tbody></table></figure></div><p>在Startup类的 Configure方法中添加本地化中间件    </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//添加语言包</span><br><span class="line">IList<cultureinfo> supportedCultures = new List<cultureinfo></cultureinfo></cultureinfo></span><br><span class="line">{</span><br><span class="line">new CultureInfo("en-US"),</span><br><span class="line">new CultureInfo("zh-CN"),</span><br><span class="line">};</span><br><span class="line">app.UseRequestLocalization(new RequestLocalizationOptions</span><br><span class="line">{</span><br><span class="line">DefaultRequestCulture = new RequestCulture("en-US"),</span><br><span class="line">SupportedCultures = supportedCultures,</span><br><span class="line">SupportedUICultures = supportedCultures</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><ul><li>app.UseRequestLocalization必须放置app.UseMvc之前</li><li>DefaultRequestCulture参数指定了默认的语言文化，即用户不指定任何文化时的默认语言文化</li><li>SupportedCultures和SupportedUICultures是指定当前应用支持的所有语言文化</li></ul><h3 id="添加资源文件"><a href="#添加资源文件" class="headerlink" title="添加资源文件"></a>添加资源文件</h3><p>控制器注入服务：<code>IStringLocalizer<homecontroller></homecontroller></code></p><p>调用资源：<code>_localizer["Hello"]</code></p><h3 id="默认的语言文化提供器"><a href="#默认的语言文化提供器" class="headerlink" title="默认的语言文化提供器"></a>默认的语言文化提供器</h3><p>ASP.NET Core的本地化中间件默认支持3种语言文化提供器</p><ul><li>URL中的查询字符串<ul><li>?culture=zh-CN&ui-culture=zh-CN</li><li>?culture=zh-CN</li><li>?ui-culture=zh-CN</li></ul></li><li>Cookie</li><li>请求头</li></ul><blockquote><p>代码详见：</p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> NetCore </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NetCore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#委托、泛型委托和Lambda表达式</title>
      <link href="/2020/03/02/C-%E5%A7%94%E6%89%98%E3%80%81%E6%B3%9B%E5%9E%8B%E5%A7%94%E6%89%98%E5%92%8CLambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/03/02/C-%E5%A7%94%E6%89%98%E3%80%81%E6%B3%9B%E5%9E%8B%E5%A7%94%E6%89%98%E5%92%8CLambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="什么是委托"><a href="#什么是委托" class="headerlink" title="什么是委托"></a>什么是委托</h2><ol><li>从数据结构来讲，委托是和类一样是一种用户自定义类型。  </li><li>委托是方法的抽象，它存储的就是一系列具有相同参数和返回类型的方法的地址。调用委托的时候，委托包含的所有方法将被执行。</li></ol><h2 id="委托声明、实例化和调用"><a href="#委托声明、实例化和调用" class="headerlink" title="委托声明、实例化和调用"></a>委托声明、实例化和调用</h2><h3 id="1、声明"><a href="#1、声明" class="headerlink" title="1、声明"></a>1、声明</h3><p>委托是一种特殊的类，因此委托的声明与类的声明方法类似，在任何可以声明类的地方都可以声明委托。委托声明用delegate关键字，同时委托要指明方法参数和返回值，写法与方法类似。综合类的声明和方法的声明，委托声明写成如下形式：</p><pre><code>[访问修饰符] delegate 返回值类型 委托名 （形参列表）;</code></pre><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public delegate void MyDel();//定义了一个委托MyDel,它可以注册返回void类型且没有参数的函数</span><br><span class="line">public delegate void MyDel1(string str);//定义了一个委托MyDel1,它可以注册返回void类型且有一个string作为参数的函数</span><br><span class="line">public delegate int MyDel2(int a,int b);//定义了一个委托MyDel2,它可以注册返回int类型且有两个int作为参数的函数</span><br></pre></td></tr></tbody></table></figure></div><h3 id="2、委托的实例化"><a href="#2、委托的实例化" class="headerlink" title="2、委托的实例化"></a>2、委托的实例化</h3><p>与普通类的使用方法相同，声明了委托之后，我们必须给委托传递一个具体的方法，才能在运行时调用委托实例。委托实例包含了被传递给它的方法的信息，在运行时，调用委托实例就相当于执行它当中的方法。</p><p>委托实例化格式如下：</p><pre><code>委托类名 委托实例名 = new 委托类名(Target) ;</code></pre><p>其中，委托实例名是自定义的名称，Target是要传入的方法的名称。注意，Target是方法的引用，不能带()。带()的话是该方法的调用。区分引用和调用。<br>委托的实例化还有一种简单的方法：</p><pre><code>委托类名 委托实例名 = Target;</code></pre><p>在需要委托实例的地方直接传入Target引用即可，C#编译器会自动根据委托类型进行验证，这称为“委托推断”。</p><pre><code>MyDel2 testDel=new MyDel2(Add);MyDel2 testDel1 = Add;</code></pre><h3 id="3、委托实例的调用"><a href="#3、委托实例的调用" class="headerlink" title="3、委托实例的调用"></a>3、委托实例的调用</h3><p>委托实例等价于它当中实际方法，因此可以使用反射的Invoke()方法调用委托实例，也可以直接在委托实例后加上()进行调用。</p><pre><code>int num = testDel(1,2);int num1 = testDel.Invoke(1, 2);</code></pre><h3 id="4、委托完整的简单示例"><a href="#4、委托完整的简单示例" class="headerlink" title="4、委托完整的简单示例"></a>4、委托完整的简单示例</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">namespace delegateTest</span><br><span class="line">{</span><br><span class="line">    public delegate int MyCalculator(int num1, int num2);</span><br><span class="line">    class Program</span><br><span class="line">    {</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        {</span><br><span class="line">            MyCalculator myCal=new MyCalculator(Add);</span><br><span class="line">            int addNum= myCal(1,2);</span><br><span class="line"></span><br><span class="line">            MyCalculator myCal1 = Sub;</span><br><span class="line">            int subNum = myCal1.Invoke(1, 2);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine("addNum:{0},subNum:{1}", addNum, subNum);</span><br><span class="line">            </span><br><span class="line">            int calNum = Calculate(1, 2, Add);</span><br><span class="line">            Console.WriteLine("calNum:{0}", calNum);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        static int Add(int num1, int num2)</span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine("num1 + num2={0}",num1 + num2);</span><br><span class="line">            return num1 + num2;</span><br><span class="line">        }</span><br><span class="line">        static int Sub(int num1, int num2)</span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine("num1 - num2={0}", num1 - num2);</span><br><span class="line">            return num1 - num2;</span><br><span class="line">        }</span><br><span class="line">        static int Calculate(int num1,int num2,MyCalculator calDel)</span><br><span class="line">        {</span><br><span class="line">            return calDel(num1,num2);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>控制台打印结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">num1 + num2=3</span><br><span class="line">num1 - num2=-1</span><br><span class="line">addNum:3,subNum:-1</span><br><span class="line">num1 + num2=3</span><br><span class="line">calNum:3</span><br></pre></td></tr></tbody></table></figure></div><h2 id="泛型委托"><a href="#泛型委托" class="headerlink" title="泛型委托"></a>泛型委托</h2><p>我们每次要使用一个委托时，都需要先声明这个委托类，规定参数和返回值类型，然后才能实例化、调用。为了简化这个过程， .NET 框架为我们封装了三个泛型委托类，因此大部分情况下我们不必再声明委托，可以拿来直接实例化使用，方便了我们的日常写代码。<br>这三种泛型委托包括：Func委托、Action委托和Predicate委托。</p><h3 id="1、Func委托"><a href="#1、Func委托" class="headerlink" title="1、Func委托"></a>1、Func委托</h3><p>Func委托代表着拥有返回值的泛型委托。Func有一系列的重载，形式如 Func<t1,t2, … tresult>，其中TResult代表委托的返回值类型，其余均是参数类型。只有一个T时，即Func，代表该委托是无参数的。.NET封装了最多16个输入参数的Funct<>委托。<br>需要特别注意的是，若方法没有返回值，即返回 void ，由于 void 不是数据类型，因此不能定义Func委托。返回 void 的泛型委托见下文的Action。<br>Func的使用方法与一般的委托相同。例如上面的案例可改写如下：  </t1,t2,></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">namespace delegateTest</span><br><span class="line">{</span><br><span class="line">    class Program</span><br><span class="line">    {</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        {</span><br><span class="line">            int calNum = Calculate(1, 2, Sub);</span><br><span class="line">            Console.WriteLine("calNum:{0}", calNum);// -1</span><br><span class="line">        }</span><br><span class="line">        static int Calculate(int num1, int num2, Func<int, int, int> calDel)</int,></span><br><span class="line">        {</span><br><span class="line">            return calDel(num1,num2);</span><br><span class="line">        }</span><br><span class="line">        static int Sub(int num1, int num2)</span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine("num1 - num2={0}", num1 - num2);</span><br><span class="line">            return num1 - num2;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="2、Action委托"><a href="#2、Action委托" class="headerlink" title="2、Action委托"></a>2、Action委托</h3><p>Action委托代表返回值为空 void 的委托，它也有一些列重载，最多拥有16个输入参数。用法与Func相同。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">namespace delegateTest</span><br><span class="line">{</span><br><span class="line">    class Program</span><br><span class="line">    {</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        {</span><br><span class="line">            DoSome("hello",Say);// hello</span><br><span class="line">        }</span><br><span class="line">        static void DoSome(string str,Action<string> doAction)</string></span><br><span class="line">        {</span><br><span class="line">            doAction(str);</span><br><span class="line">        }</span><br><span class="line">        static void Say(string str)</span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine(str);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="3、Predicate委托"><a href="#3、Predicate委托" class="headerlink" title="3、Predicate委托"></a>3、Predicate委托</h3><p>这个一般用的较少，它封装返回值为bool类型的委托，可被Func代替。</p><h2 id="匿名委托"><a href="#匿名委托" class="headerlink" title="匿名委托"></a>匿名委托</h2><p>采用匿名方法实例化的委托称为匿名委托。<br>每次实例化一个委托时，都需要事先定义一个委托所要调用的方法。为了简化这个流程，C# 2.0开始提供匿名方法来实例化委托。这样，我们在实例化委托时就可以 “随用随写” 它的实例方法。<br>使用的格式是：  </p><pre><code>委托类名 委托实例名 = delegate (args) { 方法体代码 } ;</code></pre><p>这样就可以直接把方法写在实例化代码中，不必在另一个地方定义方法。当然，匿名委托不适合需要采用多个方法的委托的定义。<br>使用匿名方法，以上代码可改写为：   </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">MyCalculator myCal2 = delegate(int num1, int num2)</span><br><span class="line">{</span><br><span class="line">    //打印匿名方法的名字</span><br><span class="line">    Console.WriteLine(System.Reflection.MethodBase.GetCurrentMethod().Name);  </span><br><span class="line">    return num1 + num2;</span><br><span class="line">};</span><br><span class="line">int num11= myCal2(1,2);//3</span><br></pre></td></tr></tbody></table></figure></div><p>需要说明的是，匿名方法并不是真的“没有名字”的，而是编译器为我们自动取一个名字。</p><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>纵然匿名方法使用很方便，可惜她很快就成了过气网红，没能领多长时间的风骚。如今已经很少见到了，因为delegate关键字限制了她用途的扩展。自从C# 3.0开始，她就被Lambda表达式取代，而且Lambda表达式用起来更简单。Lambda表达式本质上是改进的匿名方法。</p><h3 id="1、表达式Lambda"><a href="#1、表达式Lambda" class="headerlink" title="1、表达式Lambda"></a>1、表达式Lambda</h3><p>当匿名函数只有一行代码时，可采用这种形式。例如：</p><pre><code>MyCalculator myCal = (num1, num2) =>  num1 + num2;int num = myCal(1, 2);    // 3</code></pre><p>其中=>符号代表Lambda表达式，它的左侧是参数，右侧是要返回或执行的语句。参数要放在圆括号中，若只有一个参数，为了方便起见可省略圆括号。有多个参数或者没有参数时，不可省略圆括号。<br>相比匿名函数，在表达式Lambda中，方法体的花括号{}和return关键字被省略掉了。  </p><h3 id="2、语句Lambda"><a href="#2、语句Lambda" class="headerlink" title="2、语句Lambda"></a>2、语句Lambda</h3><p>当匿名函数有多行代码时，只能采用语句Lambda。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">MyCalculator myCal = (int num1, int num2)=></span><br><span class="line">{</span><br><span class="line">    Console.WriteLine(System.Reflection.MethodBase.GetCurrentMethod().Name);</span><br><span class="line">    return num1 + num2;</span><br><span class="line">};</span><br><span class="line">int num = myCal(1, 2);// 3</span><br></pre></td></tr></tbody></table></figure></div><p>语句Lambda不可以省略{}和return语句。</p><h3 id="3、Lambda的主要用处"><a href="#3、Lambda的主要用处" class="headerlink" title="3、Lambda的主要用处"></a>3、Lambda的主要用处</h3><p>实际中用到Lambda表达式的地方大都是委托，例如linq的对集合类的扩展查询方法；<br>很多架构的搭建需要调用自定义方法，也离不开委托；<br>事件机制是基于委托的；</p><h2 id="多播委托"><a href="#多播委托" class="headerlink" title="多播委托"></a>多播委托</h2><p>实例化委托时必须将一个匹配函数注册到委托上来实例化一个委托对象，但是一个实例化委托不仅可以注册一个函数还可以注册多个函数，注册多个函数后，在执行委托的时候会根据注册函数的注册先后顺序依次执行每一个注册函数。<br>函数注册委托的原型：  </p><pre><code><委托类型> <实例化名> +=new <委托类型> (<注册函数>);</code></pre><p>注意：委托必须先实例化以后，才能使用+=注册其他方法。如果对注册了函数的委托实例从新使用=号赋值，相当于是重新实例化了委托，之前在上面注册的函数和委托实例之间也不再产生任何关系。有+=注册函数到委托，也有-=解除注册;</p><pre><code><委托类型> <实例化名> -=new <委托类型> (<注册函数>);</code></pre><p>注意：如果在委托注册了多个函数后，如果委托有返回值，那么调用委托时，返回的将是最后一个注册函数的返回值。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">MyCalculator multiCal=new MyCalculator(Add);</span><br><span class="line">multiCal += Sub;</span><br><span class="line">int num1 = multiCal(1, 2);  // -1</span><br><span class="line">multiCal -= Sub; </span><br><span class="line">int num2 = multiCal(1, 2); // 3</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>原文地址：<a href="https://www.cnblogs.com/willingtolove/p/11279562.html" target="_blank" rel="noopener">willingtolove：《C# 委托(delegate)、泛型委托和Lambda表达式》</a><br>参考：<a href="https://blog.csdn.net/wnvalentin/article/details/81840339" target="_blank" rel="noopener">《C# 委托 （一）—— 委托、 泛型委托与Lambda表达式》</a></p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> Asp.Net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Asp.Net </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文看懂C#各版本新功能+代码演示</title>
      <link href="/2020/03/01/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82C-%E5%90%84%E7%89%88%E6%9C%AC%E6%96%B0%E5%8A%9F%E8%83%BD-%E4%BB%A3%E7%A0%81%E6%BC%94%E7%A4%BA/"/>
      <url>/2020/03/01/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82C-%E5%90%84%E7%89%88%E6%9C%AC%E6%96%B0%E5%8A%9F%E8%83%BD-%E4%BB%A3%E7%A0%81%E6%BC%94%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="代码演示C-各版本新功能"><a href="#代码演示C-各版本新功能" class="headerlink" title="代码演示C#各版本新功能"></a>代码演示C#各版本新功能</h2><p>C#各版本新功能其实都能在官网搜到，但很少有人整理在一起，并通过非常简短的代码将每个新特性演示出来。</p><ul><li>代码演示C#各版本新功能</li><li>C# 2.0版 - 2005<ul><li>泛型</li><li>分部类型</li><li>匿名方法</li><li>可以为null的值类型</li><li>迭代器</li><li>协变和逆变</li></ul></li><li>C# 3.0版 - 2007<ul><li>自动实现的属性</li><li>匿名类型</li><li>查询表达式（LINQ）</li><li>Lambda表达式</li><li>表达式树</li><li>扩展方法</li><li>var</li><li>分部方法</li><li>对象和集合初始值设定项</li></ul></li><li>C# 4.0版 - 2010<ul><li>dynamic</li><li>命名参数/可选参数</li><li>泛型中的协变和逆变</li><li>类型等效、内置互操作类型</li></ul></li><li>C# 5.0版 - 2012<ul><li>async/await</li><li>调用方信息</li></ul></li><li>C# 6.0版 - 2015<ul><li>静态导入</li><li>异常筛选器</li><li>自动初始化表达式</li><li>Expression-bodied 函数成员</li><li>Null传播器</li><li>字符串内插</li><li>nameof表达式</li><li>索引初始值设定项</li></ul></li><li>C# 7.0版本 - 2017<ul><li>out变量</li><li>元组和析构函数</li><li>模式匹配</li><li>本地函数</li><li>更多的expression-bodied成员</li><li>Ref 局部变量和返回结果</li><li>弃元</li><li>二进制文本和数字分隔符</li><li>throw表达式</li></ul></li><li>C# 8.0 版 - 2019<ul><li>Readonly 成员</li><li>默认接口方法</li><li>模式匹配增强</li><li>属性模式</li><li>Tuple模式</li><li>位置模式</li><li>switch表达式</li><li>using声明</li><li>静态本地函数</li><li>异步流</li><li>索引和范围</li><li>Null合并赋值</li><li>非托管构造类型</li><li>嵌套表达式中的 stackalloc</li></ul></li><li>附录/总结</li></ul><h2 id="C-2-0版-2005"><a href="#C-2-0版-2005" class="headerlink" title="C# 2.0版 - 2005"></a>C# 2.0版 - 2005</h2><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>Java中的泛型不支持值类型，且会运行时类型擦除，这一点 .NET更优秀。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// Declare the generic class.</span><br><span class="line">public class GenericList<t></t></span><br><span class="line">{</span><br><span class="line">    public void Add(T input) { }</span><br><span class="line">}</span><br><span class="line">class TestGenericList</span><br><span class="line">{</span><br><span class="line">    private class ExampleClass { }</span><br><span class="line">    static void Main()</span><br><span class="line">    {</span><br><span class="line">        // Declare a list of type int.</span><br><span class="line">        GenericList<int> list1 = new GenericList<int>();</int></int></span><br><span class="line">        list1.Add(1);</span><br><span class="line"></span><br><span class="line">        // Declare a list of type string.</span><br><span class="line">        GenericList<string> list2 = new GenericList<string>();</string></string></span><br><span class="line">        list2.Add("");</span><br><span class="line"></span><br><span class="line">        // Declare a list of type ExampleClass.</span><br><span class="line">        GenericList<exampleclass> list3 = new GenericList<exampleclass>();</exampleclass></exampleclass></span><br><span class="line">        list3.Add(new ExampleClass());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="分部类型"><a href="#分部类型" class="headerlink" title="分部类型"></a>分部类型</h3><blockquote><p>拆分一个类、一个结构、一个接口或一个方法的定义到两个或更多的文件中是可能的。 每个源文件包含类型或方法定义的一部分，编译应用程序时将把所有部分组合起来。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public partial class Employee</span><br><span class="line">{</span><br><span class="line">    public void DoWork()</span><br><span class="line">    {</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">public partial class Employee</span><br><span class="line">{</span><br><span class="line">    public void GoToLunch()</span><br><span class="line">    {</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="匿名方法"><a href="#匿名方法" class="headerlink" title="匿名方法"></a>匿名方法</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Func<int, int, int> sum = delegate (int a, int b) { return a + b; };</int,></span><br><span class="line">Console.WriteLine(sum(3, 4));  // output: 7</span><br></pre></td></tr></tbody></table></figure></div><h3 id="可以为null的值类型"><a href="#可以为null的值类型" class="headerlink" title="可以为null的值类型"></a>可以为null的值类型</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">double? pi = 3.14;</span><br><span class="line">char? letter = 'a';</span><br><span class="line"></span><br><span class="line">int m2 = 10;</span><br><span class="line">int? m = m2;</span><br><span class="line"></span><br><span class="line">bool? flag = null;</span><br><span class="line"></span><br><span class="line">// An array of a nullable type:</span><br><span class="line">int?[] arr = new int?[10];</span><br></pre></td></tr></tbody></table></figure></div><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">static void Main()</span><br><span class="line">{</span><br><span class="line">    foreach (int number in SomeNumbers())</span><br><span class="line">    {</span><br><span class="line">        Console.Write(number.ToString() + " ");</span><br><span class="line">    }</span><br><span class="line">    // Output: 3 5 8</span><br><span class="line">    Console.ReadKey();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">public static System.Collections.IEnumerable SomeNumbers()</span><br><span class="line">{</span><br><span class="line">    yield return 3;</span><br><span class="line">    yield return 5;</span><br><span class="line">    yield return 8;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="协变和逆变"><a href="#协变和逆变" class="headerlink" title="协变和逆变"></a>协变和逆变</h3><blockquote><p>在 C# 中，协变和逆变能够实现数组类型、委托类型和泛型类型参数的隐式引用转换。 协变保留分配兼容性，逆变则与之相反。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// Assignment compatibility.   </span><br><span class="line">string str = "test";  </span><br><span class="line">// An object of a more derived type is assigned to an object of a less derived type.   </span><br><span class="line">object obj = str;  </span><br><span class="line">  </span><br><span class="line">// Covariance.   </span><br><span class="line">IEnumerable<string> strings = new List<string>();  </string></string></span><br><span class="line">// An object that is instantiated with a more derived type argument   </span><br><span class="line">// is assigned to an object instantiated with a less derived type argument.   </span><br><span class="line">// Assignment compatibility is preserved.   </span><br><span class="line">IEnumerable<object> objects = strings;  <br><span class="line">  </span><br><span class="line">// Contravariance.             </span><br><span class="line">// Assume that the following method is in the class:   </span><br><span class="line">// static void SetObject(object o) { }   </span><br><span class="line">Action<object> actObject = SetObject;  <br><span class="line">// An object that is instantiated with a less derived type argument   </span><br><span class="line">// is assigned to an object instantiated with a more derived type argument.   </span><br><span class="line">// Assignment compatibility is reversed.   </span><br><span class="line">Action<string> actString = actObject;</string></span><br></object></span></object></span></pre></td></tr></tbody></table></figure></div><h2 id="C-3-0版-2007"><a href="#C-3-0版-2007" class="headerlink" title="C# 3.0版 - 2007"></a>C# 3.0版 - 2007</h2><h3 id="自动实现的属性"><a href="#自动实现的属性" class="headerlink" title="自动实现的属性"></a>自动实现的属性</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// This class is mutable. Its data can be modified from</span><br><span class="line">// outside the class.</span><br><span class="line">class Customer</span><br><span class="line">{</span><br><span class="line">    // Auto-implemented properties for trivial get and set</span><br><span class="line">    public double TotalPurchases { get; set; }</span><br><span class="line">    public string Name { get; set; }</span><br><span class="line">    public int CustomerID { get; set; }</span><br><span class="line"></span><br><span class="line">    // Constructor</span><br><span class="line">    public Customer(double purchases, string name, int ID)</span><br><span class="line">    {</span><br><span class="line">        TotalPurchases = purchases;</span><br><span class="line">        Name = name;</span><br><span class="line">        CustomerID = ID;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    // Methods</span><br><span class="line">    public string GetContactInfo() { return "ContactInfo"; }</span><br><span class="line">    public string GetTransactionHistory() { return "History"; }</span><br><span class="line"></span><br><span class="line">    // .. Additional methods, events, etc.</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">class Program</span><br><span class="line">{</span><br><span class="line">    static void Main()</span><br><span class="line">    {</span><br><span class="line">        // Intialize a new object.</span><br><span class="line">        Customer cust1 = new Customer(4987.63, "Northwind", 90108);</span><br><span class="line"></span><br><span class="line">        // Modify a property.</span><br><span class="line">        cust1.TotalPurchases += 499.99;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="匿名类型"><a href="#匿名类型" class="headerlink" title="匿名类型"></a>匿名类型</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var v = new { Amount = 108, Message = "Hello" };  </span><br><span class="line">  </span><br><span class="line">// Rest the mouse pointer over v.Amount and v.Message in the following  </span><br><span class="line">// statement to verify that their inferred types are int and n .  </span><br><span class="line">Console.WriteLine(v.Amount + v.Message);</span><br></pre></td></tr></tbody></table></figure></div><h3 id="查询表达式（LINQ）"><a href="#查询表达式（LINQ）" class="headerlink" title="查询表达式（LINQ）"></a>查询表达式（LINQ）</h3><blockquote><p>我们通常认为 C# 版本的杀手锏是查询表达式，也就是语言集成查询 (LINQ)。<br>LINQ 的构造可以建立在更细微的视图检查表达式树、Lambda 表达式以及匿名类型的基础上。 不过无论如何 C# 3.0 都提出了革命性的概念。 C# 3.0 开始为 C# 转变为面向对象/函数式混合语言打下基础。<br>具体来说，你现在可以编写 SQL 样式的声明性查询对集合以及其他项目执行操作。</p></blockquote><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">Func<int, int> square = x => x * x;</int,></span><br><span class="line">Console.WriteLine(square(5));</span><br><span class="line">// Output:</span><br><span class="line">// 25</span><br></pre></td></tr></tbody></table></figure></div><h3 id="表达式树"><a href="#表达式树" class="headerlink" title="表达式树"></a>表达式树</h3><h3 id="扩展方法"><a href="#扩展方法" class="headerlink" title="扩展方法"></a>扩展方法</h3><blockquote><p>扩展方法使你能够向现有类型“添加”方法，而无需创建新的派生类型、重新编译或以其他方式修改原始类型。</p></blockquote><h3 id="var"><a href="#var" class="headerlink" title="var"></a>var</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var i = 10; // Implicitly typed.</span><br><span class="line">int i = 10; // Explicitly typed.</span><br></pre></td></tr></tbody></table></figure></div><h3 id="分部方法"><a href="#分部方法" class="headerlink" title="分部方法"></a>分部方法</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">namespace PM</span><br><span class="line">{</span><br><span class="line">    partial class A</span><br><span class="line">    {</span><br><span class="line">        partial void OnSomethingHappened(string s);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    // This part can be in a separate file.</span><br><span class="line">    partial class A</span><br><span class="line">    {</span><br><span class="line">        // Comment out this method and the program</span><br><span class="line">        // will still compile.</span><br><span class="line">        partial void OnSomethingHappened(String s)</span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine("Something happened: {0}", s);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="对象和集合初始值设定项"><a href="#对象和集合初始值设定项" class="headerlink" title="对象和集合初始值设定项"></a>对象和集合初始值设定项</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class Cat</span><br><span class="line">{</span><br><span class="line">    // Auto-implemented properties.</span><br><span class="line">    public int Age { get; set; }</span><br><span class="line">    public string Name { get; set; }</span><br><span class="line"></span><br><span class="line">    public Cat()</span><br><span class="line">    {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public Cat(string name)</span><br><span class="line">    {</span><br><span class="line">        this.Name = name;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="C-4-0版-2010"><a href="#C-4-0版-2010" class="headerlink" title="C# 4.0版 - 2010"></a>C# 4.0版 - 2010</h2><h3 id="动态绑定"><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h3><h3 id="命名参数-可选参数"><a href="#命名参数-可选参数" class="headerlink" title="命名参数/可选参数"></a>命名参数/可选参数</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">PrintOrderDetails(productName: "Red Mug", sellerName: "Gift Shop", orderNum: 31);</span><br><span class="line"></span><br><span class="line">public void ExampleMethod(int required, string optionalstr = "default string",</span><br><span class="line">    int optionalint = 10)</span><br></pre></td></tr></tbody></table></figure></div><h3 id="泛型中的协变和逆变"><a href="#泛型中的协变和逆变" class="headerlink" title="泛型中的协变和逆变"></a>泛型中的协变和逆变</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">IEnumerable<derived> d = new List<derived>();</derived></derived></span><br><span class="line">IEnumerable<base> b = d;</span><br><span class="line"></span><br><span class="line">Action<base> b = (target) => { Console.WriteLine(target.GetType().Name); };</span><br><span class="line">Action<derived> d = b;</derived></span><br><span class="line">d(new Derived());</span><br></pre></td></tr></tbody></table></figure></div><h3 id="类型等效性和嵌入的互操作类型"><a href="#类型等效性和嵌入的互操作类型" class="headerlink" title="类型等效性和嵌入的互操作类型"></a>类型等效性和嵌入的互操作类型</h3><h2 id="C-5-0版-2012"><a href="#C-5-0版-2012" class="headerlink" title="C# 5.0版 - 2012"></a>C# 5.0版 - 2012</h2><h3 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">private DamageResult CalculateDamageDone()</span><br><span class="line">{</span><br><span class="line">    // Code omitted:</span><br><span class="line">    //</span><br><span class="line">    // Does an expensive calculation and returns</span><br><span class="line">    // the result of that calculation.</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">calculateButton.Clicked += async (o, e) =></span><br><span class="line">{</span><br><span class="line">    // This line will yield control to the UI while CalculateDamageDone()</span><br><span class="line">    // performs its work.  The UI thread is free to perform other work.</span><br><span class="line">    var damageResult = await Task.Run(() => CalculateDamageDone());</span><br><span class="line">    DisplayDamage(damageResult);</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></div><h3 id="调用方信息"><a href="#调用方信息" class="headerlink" title="调用方信息"></a>调用方信息</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public void DoProcessing()</span><br><span class="line">{</span><br><span class="line">    TraceMessage("Something happened.");</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">public void TraceMessage(string message,</span><br><span class="line">        [System.Runtime.CompilerServices.CallerMemberName] string memberName = "",</span><br><span class="line">        [System.Runtime.CompilerServices.CallerFilePath] string sourceFilePath = "",</span><br><span class="line">        [System.Runtime.CompilerServices.CallerLineNumber] int sourceLineNumber = 0)</span><br><span class="line">{</span><br><span class="line">    System.Diagnostics.Trace.WriteLine("message: " + message);</span><br><span class="line">    System.Diagnostics.Trace.WriteLine("member name: " + memberName);</span><br><span class="line">    System.Diagnostics.Trace.WriteLine("source file path: " + sourceFilePath);</span><br><span class="line">    System.Diagnostics.Trace.WriteLine("source line number: " + sourceLineNumber);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// Sample Output:</span><br><span class="line">//  message: Something happened.</span><br><span class="line">//  member name: DoProcessing</span><br><span class="line">//  source file path: c:\Visual Studio Projects\CallerInfoCS\CallerInfoCS\Form1.cs</span><br><span class="line">//  source line number: 31</span><br></pre></td></tr></tbody></table></figure></div><h2 id="C-6-0版-2015"><a href="#C-6-0版-2015" class="headerlink" title="C# 6.0版 - 2015"></a>C# 6.0版 - 2015</h2><h3 id="静态导入"><a href="#静态导入" class="headerlink" title="静态导入"></a>静态导入</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">using static System.Math;</span><br></pre></td></tr></tbody></table></figure></div><h3 id="异常筛选器"><a href="#异常筛选器" class="headerlink" title="异常筛选器"></a>异常筛选器</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static async Task<string> MakeRequest()</string></span><br><span class="line">{</span><br><span class="line">    WebRequestHandler webRequestHandler = new WebRequestHandler();</span><br><span class="line">    webRequestHandler.AllowAutoRedirect = false;</span><br><span class="line">    using (HttpClient client = new HttpClient(webRequestHandler))</span><br><span class="line">    {</span><br><span class="line">        var stringTask = client.GetStringAsync("https://docs.microsoft.com/en-us/dotnet/about/");</span><br><span class="line">        try</span><br><span class="line">        {</span><br><span class="line">            var responseText = await stringTask;</span><br><span class="line">            return responseText;</span><br><span class="line">        }</span><br><span class="line">        catch (System.Net.Http.HttpRequestException e) when (e.Message.Contains("301"))</span><br><span class="line">        {</span><br><span class="line">            return "Site Moved";</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="自动初始化表达式"><a href="#自动初始化表达式" class="headerlink" title="自动初始化表达式"></a>自动初始化表达式</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public ICollection<double> Grades { get; } = new List<double>();</double></double></span><br></pre></td></tr></tbody></table></figure></div><h3 id="Expression-bodied-函数成员"><a href="#Expression-bodied-函数成员" class="headerlink" title="Expression-bodied 函数成员"></a>Expression-bodied 函数成员</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public override string ToString() => $"{LastName}, {FirstName}";</span><br></pre></td></tr></tbody></table></figure></div><h3 id="Null传播器"><a href="#Null传播器" class="headerlink" title="Null传播器"></a>Null传播器</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var first = person?.FirstName;</span><br></pre></td></tr></tbody></table></figure></div><h3 id="字符串内插"><a href="#字符串内插" class="headerlink" title="字符串内插"></a>字符串内插</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public string GetGradePointPercentage() =></span><br><span class="line">    $"Name: {LastName}, {FirstName}. G.P.A: {Grades.Average():F2}";</span><br></pre></td></tr></tbody></table></figure></div><h3 id="nameof表达式"><a href="#nameof表达式" class="headerlink" title="nameof表达式"></a><code>nameof</code>表达式</h3><blockquote><p>nameof 表达式的计算结果为符号的名称。 每当需要变量、属性或成员字段的名称时，这是让工具正常运行的好办法。 nameof 的其中一个最常见的用途是提供引起异常的符号的名称：</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">if (IsNullOrWhiteSpace(lastName))</span><br><span class="line">    throw new ArgumentException(message: "Cannot be blank", paramName: nameof(lastName));</span><br></pre></td></tr></tbody></table></figure></div><h3 id="索引初始值设定项"><a href="#索引初始值设定项" class="headerlink" title="索引初始值设定项"></a>索引初始值设定项</h3><blockquote><p>使集合初始化更容易的另一个功能是对 Add 方法使用扩展方法 。 添加此功能的目的是进行 Visual Basic 的奇偶校验。 如果自定义集合类的方法具有通过语义方式添加新项的名称，则此功能非常有用。</p></blockquote><h2 id="C-7-0版-2017"><a href="#C-7-0版-2017" class="headerlink" title="C# 7.0版 - 2017"></a>C# 7.0版 - 2017</h2><h3 id="out变量"><a href="#out变量" class="headerlink" title="out变量"></a>out变量</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">if (int.TryParse(input, out int result))</span><br><span class="line">    Console.WriteLine(result);</span><br><span class="line">else</span><br><span class="line">    Console.WriteLine("Could not parse input");</span><br></pre></td></tr></tbody></table></figure></div><h3 id="元组和析构函数"><a href="#元组和析构函数" class="headerlink" title="元组和析构函数"></a>元组和析构函数</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(string Alpha, string Beta) namedLetters = ("a", "b");</span><br><span class="line">Console.WriteLine($"{namedLetters.Alpha}, {namedLetters.Beta}");</span><br></pre></td></tr></tbody></table></figure></div><p>析构函数应该类似C++中的析构函数，在实例回收时执行？</p><h3 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">if (input is int count)</span><br><span class="line">    sum += count;</span><br></pre></td></tr></tbody></table></figure></div><h3 id="本地函数"><a href="#本地函数" class="headerlink" title="本地函数"></a>本地函数</h3><p>也可用lambda代替</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static IEnumerable<char> AlphabetSubset3(char start, char end)</char></span><br><span class="line">{</span><br><span class="line">    if (start < 'a' || start > 'z')</span><br><span class="line">        throw new ArgumentOutOfRangeException(paramName: nameof(start), message: "start must be a letter");</span><br><span class="line">    if (end < 'a' || end > 'z')</span><br><span class="line">        throw new ArgumentOutOfRangeException(paramName: nameof(end), message: "end must be a letter");</span><br><span class="line"></span><br><span class="line">    if (end <= start)</span><br><span class="line">        throw new ArgumentException($"{nameof(end)} must be greater than {nameof(start)}");</span><br><span class="line"></span><br><span class="line">    return alphabetSubsetImplementation();</span><br><span class="line"></span><br><span class="line">    IEnumerable<char> alphabetSubsetImplementation()</char></span><br><span class="line">    {</span><br><span class="line">        for (var c = start; c < end; c++)</span><br><span class="line">            yield return c;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="更多的expression-bodied成员"><a href="#更多的expression-bodied成员" class="headerlink" title="更多的expression-bodied成员"></a>更多的expression-bodied成员</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// Expression-bodied constructor</span><br><span class="line">public ExpressionMembersExample(string label) => this.Label = label;</span><br><span class="line"></span><br><span class="line">// Expression-bodied finalizer</span><br><span class="line">~ExpressionMembersExample() => Console.Error.WriteLine("Finalized!");</span><br><span class="line"></span><br><span class="line">private string label;</span><br><span class="line"></span><br><span class="line">// Expression-bodied get / set accessors.</span><br><span class="line">public string Label</span><br><span class="line">{</span><br><span class="line">    get => label;</span><br><span class="line">    set => this.label = value ?? "Default label";</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="Ref-局部变量和返回结果"><a href="#Ref-局部变量和返回结果" class="headerlink" title="Ref 局部变量和返回结果"></a>Ref 局部变量和返回结果</h3><blockquote><p>此功能允许使用并返回对变量的引用的算法，这些变量在其他位置定义。 一个示例是使用大型矩阵并查找具有某些特征的单个位置。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static ref int Find(int[,] matrix, Func<int, bool> predicate)</int,></span><br><span class="line">{</span><br><span class="line">    for (int i = 0; i < matrix.GetLength(0); i++)</span><br><span class="line">        for (int j = 0; j < matrix.GetLength(1); j++)</span><br><span class="line">            if (predicate(matrix[i, j]))</span><br><span class="line">                return ref matrix[i, j];</span><br><span class="line">    throw new InvalidOperationException("Not found");</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ref var item = ref MatrixSearch.Find(matrix, (val) => val == 42);</span><br><span class="line">Console.WriteLine(item);</span><br><span class="line">item = 24;</span><br><span class="line">Console.WriteLine(matrix[4, 2]);</span><br></pre></td></tr></tbody></table></figure></div><h3 id="弃元"><a href="#弃元" class="headerlink" title="弃元"></a>弃元</h3><h3 id="二进制文本和数字分隔符"><a href="#二进制文本和数字分隔符" class="headerlink" title="二进制文本和数字分隔符"></a>二进制文本和数字分隔符</h3><h3 id="引发表达式"><a href="#引发表达式" class="headerlink" title="引发表达式"></a>引发表达式</h3><h2 id="C-8-0版-2019"><a href="#C-8-0版-2019" class="headerlink" title="C# 8.0版 - 2019"></a>C# 8.0版 - 2019</h2><h3 id="Readonly-成员"><a href="#Readonly-成员" class="headerlink" title="Readonly 成员"></a>Readonly 成员</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public readonly override string ToString() =></span><br><span class="line">    $"({X}, {Y}) is {Distance} from the origin";</span><br></pre></td></tr></tbody></table></figure></div><h3 id="默认接口方法"><a href="#默认接口方法" class="headerlink" title="默认接口方法"></a>默认接口方法</h3><h3 id="在更多位置中使用更多模式"><a href="#在更多位置中使用更多模式" class="headerlink" title="在更多位置中使用更多模式"></a>在更多位置中使用更多模式</h3><h4 id="switch表达式"><a href="#switch表达式" class="headerlink" title="* switch表达式"></a>* switch表达式</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static RGBColor FromRainbow(Rainbow colorBand) =></span><br><span class="line">    colorBand switch</span><br><span class="line">    {</span><br><span class="line">        Rainbow.Red    => new RGBColor(0xFF, 0x00, 0x00),</span><br><span class="line">        Rainbow.Orange => new RGBColor(0xFF, 0x7F, 0x00),</span><br><span class="line">        Rainbow.Yellow => new RGBColor(0xFF, 0xFF, 0x00),</span><br><span class="line">        Rainbow.Green  => new RGBColor(0x00, 0xFF, 0x00),</span><br><span class="line">        Rainbow.Blue   => new RGBColor(0x00, 0x00, 0xFF),</span><br><span class="line">        Rainbow.Indigo => new RGBColor(0x4B, 0x00, 0x82),</span><br><span class="line">        Rainbow.Violet => new RGBColor(0x94, 0x00, 0xD3),</span><br><span class="line">        _              => throw new ArgumentException(message: "invalid enum value", paramName: nameof(colorBand)),</span><br><span class="line">    };</span><br></pre></td></tr></tbody></table></figure></div><h4 id="属性模式"><a href="#属性模式" class="headerlink" title="* 属性模式"></a>* 属性模式</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static decimal ComputeSalesTax(Address location, decimal salePrice) =></span><br><span class="line">    location switch</span><br><span class="line">    {</span><br><span class="line">        { State: "WA" } => salePrice * 0.06M,</span><br><span class="line">        { State: "MN" } => salePrice * 0.75M,</span><br><span class="line">        { State: "MI" } => salePrice * 0.05M,</span><br><span class="line">        // other cases removed for brevity...</span><br><span class="line">        _ => 0M</span><br><span class="line">    };</span><br></pre></td></tr></tbody></table></figure></div><h4 id="元组模式"><a href="#元组模式" class="headerlink" title="* 元组模式"></a>* 元组模式</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static string RockPaperScissors(string first, string second)</span><br><span class="line">    => (first, second) switch</span><br><span class="line">    {</span><br><span class="line">        ("rock", "paper") => "rock is covered by paper. Paper wins.",</span><br><span class="line">        ("rock", "scissors") => "rock breaks scissors. Rock wins.",</span><br><span class="line">        ("paper", "rock") => "paper covers rock. Paper wins.",</span><br><span class="line">        ("paper", "scissors") => "paper is cut by scissors. Scissors wins.",</span><br><span class="line">        ("scissors", "rock") => "scissors is broken by rock. Rock wins.",</span><br><span class="line">        ("scissors", "paper") => "scissors cuts paper. Scissors wins.",</span><br><span class="line">        (_, _) => "tie"</span><br><span class="line">    };</span><br></pre></td></tr></tbody></table></figure></div><h4 id="位置模式"><a href="#位置模式" class="headerlink" title="* 位置模式"></a>* 位置模式</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">static Quadrant GetQuadrant(Point point) => point switch</span><br><span class="line">{</span><br><span class="line">    (0, 0) => Quadrant.Origin,</span><br><span class="line">    var (x, y) when x > 0 && y > 0 => Quadrant.One,</span><br><span class="line">    var (x, y) when x < 0 && y > 0 => Quadrant.Two,</span><br><span class="line">    var (x, y) when x < 0 && y < 0 => Quadrant.Three,</span><br><span class="line">    var (x, y) when x > 0 && y < 0 => Quadrant.Four,</span><br><span class="line">    var (_, _) => Quadrant.OnBorder,</span><br><span class="line">    _ => Quadrant.Unknown</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></div><h3 id="using声明"><a href="#using声明" class="headerlink" title="using声明"></a>using声明</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">static int WriteLinesToFile(IEnumerable<string> lines)</string></span><br><span class="line">{</span><br><span class="line">    using var file = new System.IO.StreamWriter("WriteLines2.txt");</span><br><span class="line">    // Notice how we declare skippedLines after the using statement.</span><br><span class="line">    int skippedLines = 0;</span><br><span class="line">    foreach (string line in lines)</span><br><span class="line">    {</span><br><span class="line">        if (!line.Contains("Second"))</span><br><span class="line">        {</span><br><span class="line">            file.WriteLine(line);</span><br><span class="line">        }</span><br><span class="line">        else</span><br><span class="line">        {</span><br><span class="line">            skippedLines++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    // Notice how skippedLines is in scope here.</span><br><span class="line">    return skippedLines;</span><br><span class="line">    // file is disposed here</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="静态本地函数"><a href="#静态本地函数" class="headerlink" title="静态本地函数"></a>静态本地函数</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">int M()</span><br><span class="line">{</span><br><span class="line">    int y = 5;</span><br><span class="line">    int x = 7;</span><br><span class="line">    return Add(x, y);</span><br><span class="line"></span><br><span class="line">    static int Add(int left, int right) => left + right;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="异步流"><a href="#异步流" class="headerlink" title="异步流"></a>异步流</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static async System.Collections.Generic.IAsyncEnumerable<int> GenerateSequence()</int></span><br><span class="line">{</span><br><span class="line">    for (int i = 0; i < 20; i++)</span><br><span class="line">    {</span><br><span class="line">        await Task.Delay(100);</span><br><span class="line">        yield return i;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="索引和范围"><a href="#索引和范围" class="headerlink" title="索引和范围"></a>索引和范围</h3><p>感觉类似python中的切片器，<code>-</code>用<code>^</code>代替了</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var words = new string[]</span><br><span class="line">{</span><br><span class="line">                // index from start    index from end</span><br><span class="line">    "The",      // 0                   ^9</span><br><span class="line">    "quick",    // 1                   ^8</span><br><span class="line">    "brown",    // 2                   ^7</span><br><span class="line">    "fox",      // 3                   ^6</span><br><span class="line">    "jumped",   // 4                   ^5</span><br><span class="line">    "over",     // 5                   ^4</span><br><span class="line">    "the",      // 6                   ^3</span><br><span class="line">    "lazy",     // 7                   ^2</span><br><span class="line">    "dog"       // 8                   ^1</span><br><span class="line">};              // 9 (or words.Length) ^0</span><br><span class="line"></span><br><span class="line">var quickBrownFox = words[1..4];</span><br><span class="line">var lazyDog = words[^2..^0];</span><br><span class="line">var allWords = words[..]; // contains "The" through "dog".</span><br><span class="line">var firstPhrase = words[..4]; // contains "The" through "fox"</span><br><span class="line">var lastPhrase = words[6..]; // contains "the", "lazy" and "dog"</span><br></pre></td></tr></tbody></table></figure></div><h3 id="Null合并赋值"><a href="#Null合并赋值" class="headerlink" title="Null合并赋值"></a>Null合并赋值</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">List<int> numbers = null;</int></span><br><span class="line">int? i = null;</span><br><span class="line"></span><br><span class="line">numbers ??= new List<int>();</int></span><br><span class="line">numbers.Add(i ??= 17);</span><br><span class="line">numbers.Add(i ??= 20);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(string.Join(" ", numbers));  // output: 17 17</span><br><span class="line">Console.WriteLine(i);  // output: 17</span><br></pre></td></tr></tbody></table></figure></div><h3 id="非托管构造类型"><a href="#非托管构造类型" class="headerlink" title="非托管构造类型"></a>非托管构造类型</h3><blockquote><p>与任何非托管类型一样，可以创建指向此类型的变量的指针，或针对此类型的实例在堆栈上分配内存块</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Span<coords<int>> coordinates = stackalloc[]</coords<int></span><br><span class="line">{</span><br><span class="line">    new Coords<int> { X = 0, Y = 0 },</int></span><br><span class="line">    new Coords<int> { X = 0, Y = 3 },</int></span><br><span class="line">    new Coords<int> { X = 4, Y = 0 }</int></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></div><h3 id="嵌套表达式中的-stackalloc"><a href="#嵌套表达式中的-stackalloc" class="headerlink" title="嵌套表达式中的 stackalloc"></a>嵌套表达式中的 stackalloc</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Span<int> numbers = stackalloc[] { 1, 2, 3, 4, 5, 6 };</int></span><br><span class="line">var ind = numbers.IndexOfAny(stackalloc[] { 2, 4, 6 ,8 });</span><br><span class="line">Console.WriteLine(ind);  // output: 1</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>原文链接：<a href="https://akiyax.github.io/new-features-in-csharp" target="_blank" rel="noopener">Akiya Xiao：《C# 各版本新功能列表》</a><br>参考资料：<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/whats-new/csharp-version-history" target="_blank" rel="noopener">《C#发展历史 - C#指南》</a></p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> Asp.Net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Asp.Net </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql知识总结</title>
      <link href="/2020/03/01/Mysql%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/03/01/Mysql%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="1-mysql登录"><a href="#1-mysql登录" class="headerlink" title="1.mysql登录"></a>1.mysql登录</h2><ul><li>远程登录方式</li><li>本地登录方式</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mysql：mysql -h 主机名 -P 端口号 -u 用户名 -p密码  </span><br><span class="line">mysql：mysql -uroot -p密码</span><br></pre></td></tr></tbody></table></figure></div><h2 id="2-数据库操作命令"><a href="#2-数据库操作命令" class="headerlink" title="2.数据库操作命令"></a>2.数据库操作命令</h2><ul><li>创建数据库、删除数据库、展示所有数据库名。</li><li>查看当前数据库名、查看所有表、查看其他数据库的表。</li><li>查看数据库的版本、表结构、以及字符集、数据库引擎</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-- 如果该数据库不存在，创建该数据库</span><br><span class="line">create database if not exists 数据库名;</span><br><span class="line"></span><br><span class="line">-- 设置指定数据库的字符集为gbk/uft8</span><br><span class="line">alter database 数据库名 character set gbk/uft8;</span><br><span class="line"></span><br><span class="line">-- 如果该数据库存在删除该数据库</span><br><span class="line">drop database if exists 数据库名 ;  </span><br><span class="line"></span><br><span class="line">-- 查看所有数据库</span><br><span class="line">show databases;  </span><br><span class="line"></span><br><span class="line">-- 使用数据库</span><br><span class="line">use 数据库名; </span><br><span class="line"></span><br><span class="line">-- 在当前数据库下查看所有表格</span><br><span class="line">show tables;  </span><br><span class="line"></span><br><span class="line">-- 查看其他数据库的全部表格</span><br><span class="line">show tables from 数据库名; </span><br><span class="line"></span><br><span class="line">-- 查看当前数据库名</span><br><span class="line">select database();  </span><br><span class="line"></span><br><span class="line">-- 查看当前MySQl登陆的用户</span><br><span class="line">select user();  </span><br><span class="line"></span><br><span class="line">-- 查看当前数据库的版本</span><br><span class="line">select version(); </span><br><span class="line"></span><br><span class="line">-- 查看表结构</span><br><span class="line">desc 表名; </span><br><span class="line"></span><br><span class="line">-- 查看数据库的字符集</span><br><span class="line">show variables like '%character%';</span><br><span class="line">show variables like '%char%';</span><br><span class="line">show variables like 'collation%';</span><br><span class="line"></span><br><span class="line">-- 查看数据库的引擎</span><br><span class="line">show engines;</span><br></pre></td></tr></tbody></table></figure></div><h2 id="3-表操作命令"><a href="#3-表操作命令" class="headerlink" title="3.表操作命令"></a>3.表操作命令</h2><ul><li>创建表、修改表数据（插入表数据、修改表数据、删除表数据、查询表数据）。</li><li>修改表结构（新增字段、修改表字段、增加主键、调整字段顺序、指定位置添加字段）。</li><li>根据原表创建新表（仅复制表结构、复制表结构和数据、复制部分表字段和表数据）。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-- 创建员工表，先在数据库里面创建该表，为了后面做测试用</span><br><span class="line">create table dept(</span><br><span class="line">    department_id int primary key auto_increment, -- 部门编号</span><br><span class="line">    dname varchar(14) ,   -- 部门名字</span><br><span class="line">    location varchar(13)   -- 地址</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">create table employee(</span><br><span class="line">    employee_id  int  primary key auto_increment, -- 员工编号</span><br><span class="line">    c_name varchar(20)， -- 员工中文名</span><br><span class="line">    e_name varchar(20)， -- 员工英文名</span><br><span class="line">    hiredate date, -- 雇佣日期，入职日期</span><br><span class="line">    salary int, -- 薪水</span><br><span class="line">    comm int,  -- 奖金</span><br><span class="line">    job_id int,     -- 所属工种</span><br><span class="line">    department_id int not null, -- 部门编号</span><br><span class="line">    manager_id int   -- 直接领导编号</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 表中插入数据</span><br><span class="line">insert into dept values(10,'财务部','北京');</span><br><span class="line">insert into dept values(20,'研发部','上海');</span><br><span class="line">insert into dept values(30,'销售部','广州');</span><br><span class="line">insert into dept values(40,'行政部','深圳');</span><br><span class="line">insert into dept values(50,'人力资源','惠州');</span><br><span class="line">-- 表中插入数据</span><br><span class="line">insert into employee values(1,'刘一','liuyi','1980-12-17',7902,800,1,10,2);</span><br><span class="line">insert into employee values(2,'陈二','chener','1981-02-20',7698,1600,3,30,3);</span><br><span class="line">insert into employee values(3,'张三','zhangsan','1981-02-22',7698,1250,5,30,4);</span><br><span class="line">insert into employee values(4,'李四','lisi','1981-04-02',7839,2975,2,20,5);</span><br><span class="line">insert into employee values(5,'王五','wangwu','1981-09-28',7698,1250,1,40,0);</span><br><span class="line">insert into employee values(6,'赵六','zhaoliu','1981-05-01',7839,2850,3,50,5);</span><br><span class="line"></span><br><span class="line">-- 更新数据：</span><br><span class="line">update employee  set c_name ="刘一一" where id=1;</span><br><span class="line"></span><br><span class="line">-- 删除数据：</span><br><span class="line">delete from employee  where id=1;</span><br><span class="line"></span><br><span class="line">-- 查询数据</span><br><span class="line">select * from employee where id in(1,4);</span><br><span class="line"></span><br><span class="line">-- 修改表名</span><br><span class="line">alter table 旧表名 rename to 新表名;</span><br><span class="line"></span><br><span class="line"> -- 修改表注释   </span><br><span class="line">alter table 表名 comment '系统信息表';</span><br><span class="line"></span><br><span class="line">-- 修改字段类型和注释</span><br><span class="line">alter table 表名  modify column 字段名 varchar(20) COMMENT '新的注释';</span><br><span class="line"></span><br><span class="line">-- 设置字段允许为空</span><br><span class="line">alter table 表名  modify column 字段名 varchar(255) null COMMENT '新注释';</span><br><span class="line"></span><br><span class="line">-- 增加一个字段，设好数据类型，且不为空，添加注释</span><br><span class="line">alert table 表名 add  字段名  varchar(255) not null comment '新注释'; </span><br><span class="line"></span><br><span class="line">-- 增加非空、自增主键</span><br><span class="line">alter table 表名 add 字段名 int(5) not null auto_increment ,add primary key (aid); </span><br><span class="line"></span><br><span class="line">-- 修改字段名字(要重新指定该字段的类型)</span><br><span class="line">alter table t_app change 原字段名 新字段名 varchar(20) not null;</span><br><span class="line"></span><br><span class="line">-- 删除字段</span><br><span class="line">alter table 表名 drop 字段名; </span><br><span class="line"></span><br><span class="line">-- 在某个字段后增加字段</span><br><span class="line">alter table 表名 add column 新字段名 int  not null default 0 after 字段名；</span><br><span class="line"></span><br><span class="line">-- 调整字段顺序 </span><br><span class="line">alter table employee  change num num  int not null after departmen_id ; </span><br><span class="line"></span><br><span class="line">-- 表的删除</span><br><span class="line">drop table 表名 ;</span><br><span class="line"></span><br><span class="line">--复制表的结构，不复制表数据</span><br><span class="line">create table 新表名 like 旧表名;</span><br><span class="line"></span><br><span class="line">--复制表的结构，同时也复制表数据</span><br><span class="line">create table 新表名 select * from 旧表名;</span><br><span class="line"></span><br><span class="line">--只复制部分表结构和对应的数据，并且带筛选条件</span><br><span class="line">create table user1 select id, name,salary from user  where salary>3000;</span><br><span class="line"></span><br><span class="line">--仅复制部分字段</span><br><span class="line">create table user2 select id, name from user;</span><br></pre></td></tr></tbody></table></figure></div><h2 id="4-表约束"><a href="#4-表约束" class="headerlink" title="4.表约束"></a>4.表约束</h2><ul><li>NOT NULL：       非空约束</li><li>DEFAULT：         默认，用于保证该字段有默认值。</li><li>PRIMARY KEY：主键约束</li><li>UNIQUE:              唯一约束</li><li>CHECK：           检查约束</li><li>FOREIGN KEY：外键约束</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">create table student (</span><br><span class="line">id int,</span><br><span class="line">name varchar(20) ,</span><br><span class="line">gender char(1) ,</span><br><span class="line">seat int,</span><br><span class="line">age int,</span><br><span class="line">class_id int, </span><br><span class="line"></span><br><span class="line">PRIMARY KEY(id), -- 主键</span><br><span class="line">UNIQUE (seat), -- 唯一键</span><br><span class="line">CHECK(gender="男" or gender="女"),-- 检查</span><br><span class="line">FOREIGN KEY (class_id) REFERENCES class (id) -- 外键</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure></div><p>注释：这些约束在你创建表和修改表的时候都可以使用。</p><h2 id="5-表查询"><a href="#5-表查询" class="headerlink" title="5.表查询"></a>5.表查询</h2><ul><li>distinct(去重)</li><li>limit(分页查询)</li><li>offset(跳过多少条)</li><li>UNION 和 UNION ALL(联合查询)</li><li>like(模糊查询)</li><li>where、between、in、or、and条件关键字</li><li>order by (asc升序、desc降序排序)</li><li>group by (分组查询)</li><li>having 关键字</li><li>case(流程控制)</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-- distinct(去重)</span><br><span class="line">select distinct 字段名 from 表名;</span><br><span class="line"></span><br><span class="line">-- limit(初始记录行的偏移量是 0(而不是 1),第一个参数指定第一个返回记录行的偏移量，第二个参数指定返回记录行的最大数目。)</span><br><span class="line">select * from 表名 limit 5,10;   -- 检索记录行6-15</span><br><span class="line"></span><br><span class="line">-- offset(跳过多少条)</span><br><span class="line">selete * from employee limit 2 offset 1;</span><br><span class="line">+----+----------+-------+--------------+------+</span><br><span class="line">|  2 | lisi       | 12000 |           40 |   90 |</span><br><span class="line">|  3 | wangwu |     0 |           50 |    0 |</span><br><span class="line">+----+----------+-------+--------------+------+</span><br><span class="line">-- 注意： </span><br><span class="line">-- 1.数据库数据计算是从0开始的 </span><br><span class="line">-- 2.offset X是跳过X个数据，limit Y是选取Y个数据 </span><br><span class="line">-- 3.limit X,Y 中X表示跳过X个数据，读取Y个数据</span><br><span class="line"></span><br><span class="line">--union 和union all（union all是直接连接，取到得是所有值，记录可能有重复 union 是取唯一值，记录没有重复。）</span><br><span class="line"></span><br><span class="line">-- UNION 的语法如下： </span><br><span class="line">[SQL 语句 1] </span><br><span class="line">UNION </span><br><span class="line">[SQL 语句 2]</span><br><span class="line"></span><br><span class="line">-- UNION ALL 的语法如下： </span><br><span class="line">[SQL 语句 1] </span><br><span class="line">UNION ALL </span><br><span class="line">[SQL 语句 2]</span><br><span class="line"></span><br><span class="line">-- UNION全连接查询，把部门表和员工表的所有数据都查出来，若有两个表都有匹配数据的就显示匹配数据，若其中有一个表在另一个表中没有匹配数据的输就显示为null</span><br><span class="line">select e.ename,d.dname</span><br><span class="line">     FROM employee e </span><br><span class="line">     left JOIN dept d</span><br><span class="line">     ON e.department_id= d.department_id</span><br><span class="line">UNION</span><br><span class="line">select e.ename,d.dname</span><br><span class="line">     FROM employee e </span><br><span class="line">     right JOIN dept d</span><br><span class="line">     ON e.department_id= d.department_id;</span><br><span class="line">+--------+----------+</span><br><span class="line">| ename | dname   |</span><br><span class="line">+--------+----------+</span><br><span class="line">| 刘一   | 财务部   |</span><br><span class="line">| 陈二   | 销售部   |</span><br><span class="line">| 张三   | NULL     |</span><br><span class="line">| 李四   | 研发部   |</span><br><span class="line">| 王五   | 行政部   |</span><br><span class="line">| 赵六   | 人力资源 |</span><br><span class="line">+--------+----------+</span><br><span class="line"></span><br><span class="line">-- 模糊查询：like，%标识匹配任意哥字符，_表示匹配一个字符</span><br><span class="line">-- 查询employee表里面名字含有豪字的员工的全部信息</span><br><span class="line">select * form employee where c_name like '%豪%';</span><br><span class="line"></span><br><span class="line">-- 查询员工名中第三个字母为a，第五个字母为b的员工信息;</span><br><span class="line">select * from employee where c_name like '__达_法%';</span><br><span class="line"></span><br><span class="line">-- 当查询的信息信息看里面还有_这样的特殊字符;</span><br><span class="line">select * from employee  where c_name like '_\_%';</span><br><span class="line"></span><br><span class="line">-- 查询工资在5000到6000之间的员工信息;</span><br><span class="line">select * from employee  where salary between 5000 and 6000;</span><br><span class="line"></span><br><span class="line">-- in、or、and关键字 </span><br><span class="line">select * from dept where location in ('北京','上海');</span><br><span class="line">select * from dept where location ='北京' or  location ='上海' ;</span><br><span class="line">select * from employee  where (department_id=30 or  department_id=40) and salary >3000;</span><br><span class="line"></span><br><span class="line">-- 选择工资不在3000到5000的员工的姓名和工资，按工资降序</span><br><span class="line">select  name, salary, department_id from employees where salary not between 3000 and 5000 order by salary desc;</span><br><span class="line"></span><br><span class="line">-- 查询每个部门的员工个数</span><br><span class="line">select count (*) , department_ id from  employee  group by  department_ id;</span><br><span class="line"></span><br><span class="line">-- 给30号部门的增加500，40号部门增加1000，50号部门增加1500</span><br><span class="line">select  *, (</span><br><span class="line">        case department_id</span><br><span class="line">        when  30 then</span><br><span class="line">            salary+500</span><br><span class="line">        when 40 then</span><br><span class="line">            salary+1000</span><br><span class="line">        when 50 then</span><br><span class="line">            salary+1500</span><br><span class="line">        else salary</span><br><span class="line">        end</span><br><span class="line">    ) '涨后工资'</span><br><span class="line">from</span><br><span class="line">    employee;</span><br><span class="line"></span><br><span class="line">-- 显示员工的薪资等级</span><br><span class="line">select *, (</span><br><span class="line">    case</span><br><span class="line">    when salary >=7900 then</span><br><span class="line">            '高薪资'</span><br><span class="line">    when salary >=7800 then</span><br><span class="line">            '中等薪资'</span><br><span class="line">    when salary >=7700 then</span><br><span class="line">            '低薪资'</span><br><span class="line">     else</span><br><span class="line">            '太难了'</span><br><span class="line">     end</span><br><span class="line">    ) '薪资等级'</span><br><span class="line">from</span><br><span class="line">    employee</span><br><span class="line">order by salary desc;</span><br><span class="line"></span><br><span class="line">-- 语法格式 </span><br><span class="line">select 字段1,字段2,字段3 from 表名  [where 筛选条件]  [group by 分组]  [having 筛选条件1]  [order by 排序列表]</span><br></pre></td></tr></tbody></table></figure></div><h2 id="6-mysql字符串函数"><a href="#6-mysql字符串函数" class="headerlink" title="6.mysql字符串函数"></a>6.mysql字符串函数</h2><ul><li>concat()：拼接字符串</li><li>substr()：截取字符串</li><li>instr()：获取子串第一次出现的索引</li><li>lpad()：左边以指定字符填充到指定长度</li><li>rpad()：右边以指定字符填充到指定长度</li><li>upper()：转换为大写</li><li>lover()：转换为小写</li><li>replace()：替换函数</li><li>length()：获取字节长度</li><li>trim()：去掉字符串前后空格</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-- 将英文名全部转换大写和全部转换为小写，然后进行拼接。</span><br><span class="line">select concat(upper(e_name) ,lower(e_name))  from employee;</span><br><span class="line"></span><br><span class="line">-- substr，注意:索引从1开始，截取从指定索引处后面所有字符</span><br><span class="line">select substr("欢迎关注非科班的科班，带你一起提升代码内功',7) str ;</span><br><span class="line"></span><br><span class="line">-- 从指定索引截取指定长度的字符串substr(str,num1,num2)第二个参数时索引、第三个参数是指定的长度。</span><br><span class="line">select substr('欢迎关注非科班的科班，带你一起提升代码内功',5,6) str;</span><br><span class="line"></span><br><span class="line">-- 姓名中首字符大写，其他字符小写然后用_拼接，显示出来</span><br><span class="line">SELECT CONCAT (UPPER (SUBSTR(last_ name,1,1)),'_' ,LOWER (SUBSTR(last_ name,2))) out_put</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">-- instr返回子串在指定字符串第一次出现的素引，如果找不到返回0</span><br><span class="line">select instr('欢迎关注非科班的科班，带你一起提升代码内功', '科班') as str;</span><br><span class="line"></span><br><span class="line">-- length获取字符串长度、trim()去掉字符串前后的空字符串</span><br><span class="line">select length(trim("   非科班的科班   ")) as str; </span><br><span class="line"></span><br><span class="line">-- lpad用指定的字符实现左填充指定长度</span><br><span class="line">select lpad('非科班的科班',9,'*') as str;</span><br><span class="line"></span><br><span class="line">-- rpad用指定的字符实现右填充指定长度</span><br><span class="line">select rpad('非科班的科班',9,'*') as str;</span><br><span class="line"></span><br><span class="line">-- replace 替换</span><br><span class="line">select replace('非科班的科班', '科班','javaboy') as str;</span><br></pre></td></tr></tbody></table></figure></div><h2 id="7-mysql字符串函数"><a href="#7-mysql字符串函数" class="headerlink" title="7.mysql字符串函数"></a>7.mysql字符串函数</h2><ul><li>now：返回当前的日期和时间</li><li>year：返回年份</li><li>month：返回月份</li><li>monthname：以英文形式返回月份</li><li>day：返回日</li><li>hour：小时</li><li>mimute：分钟</li><li>second：秒</li><li>datediff：返回两个日期相差的天数</li><li>date_format：将时间日期转换为字符串</li><li>str_to_date：将字符转换成日期</li><li>curdate：返回当前日期，不包含时间</li><li>curtime：返回当前时间，不包含日期</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-- now()返回当前系統日期+时间</span><br><span class="line">select now();</span><br><span class="line"></span><br><span class="line">-- curdate返回当前系统日期，不包含时间，curtime返回当前时间，不包含日期</span><br><span class="line">select curdate();</span><br><span class="line">select curtime();</span><br><span class="line"></span><br><span class="line">-- 可以获取指定的部分，年、月、日、小时、分钟、秒</span><br><span class="line">select year(now())年;</span><br><span class="line">select year('2020-1-1') 年;</span><br><span class="line">select year(hiredate) 年 from employee;</span><br><span class="line">select month(now()) 月;</span><br><span class="line">select monthname(now()) 月;</span><br><span class="line"></span><br><span class="line">-- %Y    四位的年份</span><br><span class="line">-- %y    2位的年份</span><br><span class="line">-- %m    2位的月份( 01,02...11,12)</span><br><span class="line">-- %c    1位的月份( 1,2...11,12)</span><br><span class="line">-- %d    日( 01,02,.. )</span><br><span class="line">-- %H    24小时制的小时</span><br><span class="line">-- %h    12小时制的小时</span><br><span class="line">-- %i    分钟( 00,01...59)</span><br><span class="line">-- %s    秒( 00,01...59)</span><br><span class="line"></span><br><span class="line">-- str_to_date:将字符串转换为指定格式的日期对象</span><br><span class="line">select str_to_date('2-28-2020','%m-%d-%Y');</span><br><span class="line"></span><br><span class="line">-- 查询入职日期为2020-2-28的员工信息</span><br><span class="line">select  * from employee where hiredate = '2020-2-28' ;</span><br><span class="line"></span><br><span class="line">-- date_format:将日期转换成字符</span><br><span class="line">select date_format('2020/02/28','%Y年%m月 %d日')；</span><br><span class="line">select date_format(now(), '%y年%m月%d日') as date ; </span><br><span class="line"></span><br><span class="line">-- 查询工资大于7800的员工的中文名、入职日期</span><br><span class="line">select c_name 中文名, date_format(hiredate,'%m月/%d日 %y年') 入职日期 from employee where salary>7800;</span><br></pre></td></tr></tbody></table></figure></div><h2 id="8-mysql数学函数"><a href="#8-mysql数学函数" class="headerlink" title="8.mysql数学函数"></a>8.mysql数学函数</h2><ul><li>ceil：中文意思表示天花板，表示向上取整</li><li>floor：中文意思表示地板，表示向下取整</li><li>round：对数字取四舍五入</li><li>rand：随机取0-1之间的所及小数</li><li>mod：取模运算</li><li>truncate：截取，类似于字符串的substr的用法</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-- ceil表示向上取整。整数：返回本身。小数：返回的是与该数相邻并比该数大的整数</span><br><span class="line">select ceil(2) ;</span><br><span class="line">select ceil(2.21) ;</span><br><span class="line">select ceil(-2) ;</span><br><span class="line">select ceil(-2.1) ;</span><br><span class="line"></span><br><span class="line">-- floor向下取整。整数：返回本身。小数：返回的是与该数相邻并比该数大的整数</span><br><span class="line">select floor(2) ;</span><br><span class="line">select floor(2.21) ;</span><br><span class="line">select floor(-2) ;</span><br><span class="line">select floor(-2.1) ;</span><br><span class="line"></span><br><span class="line">-- rand在0-1之间随机去一个随机数</span><br><span class="line">select round(rand()*10) ;  --取一个0-10的随机整数</span><br><span class="line"></span><br><span class="line">-- round对数字取四舍五入</span><br><span class="line">select round(-1.55) ;</span><br><span class="line">select round(1.567,2) ;</span><br><span class="line"></span><br><span class="line">-- mod取余运算</span><br><span class="line">select mod(3,2) ;</span><br><span class="line">select 3%2;</span><br><span class="line"></span><br><span class="line">-- truncate截取，第一个是要截取的数字，第二个是要截取的位数，从小数点后开始算</span><br><span class="line">select truncate(2.3345534,1) ;</span><br></pre></td></tr></tbody></table></figure></div><h2 id="9-创建视图和索引"><a href="#9-创建视图和索引" class="headerlink" title="9.创建视图和索引"></a>9.创建视图和索引</h2><ul><li>视图view，创建，查询视图，删除视图</li><li>索引index，创建索引，删除索引</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">语法格式如下：</span><br><span class="line">create view <视图名> [新字段名1,新字段名2,新字段名3,新字段名4,....] as <select语句></select语句></span><br><span class="line"></span><br><span class="line">--创建一个员工的视图</span><br><span class="line">create view v_employee (id,name,sal,department,hiredate)</span><br><span class="line">as select employee_id,c_name,salary,department_id,hiredate </span><br><span class="line">from employee ;</span><br><span class="line"></span><br><span class="line"> --查询视图</span><br><span class="line">select * from v_employee where sal>7800;</span><br><span class="line"></span><br><span class="line">--修改视图</span><br><span class="line">alter view v_employee as select * from employee where salary>7800;</span><br><span class="line"></span><br><span class="line">--删除视图</span><br><span class="line">drop view v_employee ;</span><br><span class="line"></span><br><span class="line">--基于多表创建视图</span><br><span class="line">create view v_test as select e.c_name,e.hiredate,e.salary,d.dname,d.location from employee e,dept d where e.department_id=d.department_id;</span><br><span class="line"></span><br><span class="line">select * from v_test</span><br><span class="line">+--------+------------+--------+--------------+----------+</span><br><span class="line">| c_name  | hiredate   | salary | dname        | location |</span><br><span class="line">+--------+------------+--------+--------------+----------+</span><br><span class="line">| 刘一   | 1980-12-17 |   7902 | 财务部       | 北京     |</span><br><span class="line">| 陈二   | 1981-02-20 |   7698 | 销售部       | 广州     |</span><br><span class="line">| 张三   | 1981-02-22 |   7698 | 销售部       | 广州     |</span><br><span class="line">| 李四   | 1981-04-02 |   7839 | 研发部       | 上海     |</span><br><span class="line">| 王五   | 1981-09-28 |   7698 | 行政部       | 深圳     |</span><br><span class="line">| 赵六   | 1981-05-01 |   7839 | 人力资源     | 惠州     |</span><br><span class="line">+--------+------------+--------+--------------+----------+</span><br><span class="line"></span><br><span class="line">--(1)使用alter table 语句创建索性,使用场景是在表创建完毕之后再添加索引。语法如下：</span><br><span class="line">alter table 表名 add 索引类型 （unique,primary key,fulltext,index）[索引名]（字段名）</span><br><span class="line"></span><br><span class="line">-- 普通索引（当column_list有多个的时候使用逗号隔开）</span><br><span class="line">alter table table_name add index index_name (column_list) ;</span><br><span class="line"></span><br><span class="line">-- 唯一索引（当column_list有多个的时候使用逗号隔开）</span><br><span class="line">alter table table_name add unique (column_list) ;</span><br><span class="line"></span><br><span class="line">--主键索引（当column_list有多个的时候使用逗号隔开）</span><br><span class="line">alter table table_name add primary key (column_list) ;</span><br><span class="line"></span><br><span class="line">-- (2)使用create index语句对表增加索引,create index可用于对表增加普通索引或UNIQUE索引，可用于建表时创建索引。</span><br><span class="line">create index index_name on table_name(username(length)); </span><br><span class="line"></span><br><span class="line">-- create只能添加这两种索引;</span><br><span class="line">create index index_name on table_name(column_list);</span><br><span class="line">create UNIQUE index index_name on table_name(column_list);</span><br><span class="line">create index index_employee on employee(salary,hiredate,c_name);</span><br><span class="line"></span><br><span class="line">-- (3)删除索引,删除索引可以使用ALTER TABLE或DROP INDEX语句来实现。</span><br><span class="line">drop index index_name on table_name ;</span><br><span class="line">alter table table_name drop index index_name ;</span><br><span class="line">alter table table_name drop primary key ;</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>视图<br>是一个虚拟表（非真实存在），其本质是【根据SQL语句获取动态的数据集，并为其命名】，用户使用时只需使用【名称】即可获取结果集，并可以将其当作表来使用，使用视图时，将其当作表进行操作即可，由于视图是虚拟表，所以无法使用其对真实表进行创建、更新和删除操作，仅能做查询用。  </p><p>索引<br>数据库中将数据整齐的排列在磁盘阵列中，当获取数据的时候只需要逐个搜索，并返回结果，但是 如果开发的应用有几百上千万甚至亿级别的数据，那么不深入了解索引的原理， 写出来程序就根本跑不动，光查一个数据库就得好几天，因此就需要索引，能够快速的查找的需要的数据。</p></blockquote><h2 id="10-mysql连接查询"><a href="#10-mysql连接查询" class="headerlink" title="10.mysql连接查询"></a>10.mysql连接查询</h2><ul><li>内连接：<ul><li>等值连接</li><li>非等值连接</li></ul></li><li>外连接：<ul><li>左外连接</li><li>右外连接</li></ul></li><li>自连接</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-- 内连接</span><br><span class="line">select  e.c_name,d.dname,d.location from employee e inner join dept d on e.department_id= d.department_id;</span><br><span class="line">+--------+----------+---------+</span><br><span class="line">| c_name | dname   | location |</span><br><span class="line">+--------+----------+---------+</span><br><span class="line">| 刘一   | 财务部   | 北京    |</span><br><span class="line">| 陈二   | 销售部   | 广州    |</span><br><span class="line">| 张三   | 销售部   | 广州    |</span><br><span class="line">| 李四   | 研发部   | 上海    |</span><br><span class="line">| 王五   | 行政部   | 深圳    |</span><br><span class="line">| 赵六   | 人力资源 | 惠州    |</span><br><span class="line">+--------+----------+---------+</span><br><span class="line"></span><br><span class="line">-- 左外连接，是指以左边的表的数据为基准，去匹配右边的表的数据，如果匹配到就显示，匹配不到就显示为null</span><br><span class="line">-- 查询employee表中的所有数据和dept表中与employee中相匹配的数据，若是没有匹配的就显示null</span><br><span class="line">select e.c_name,d.dname from employee e left outer join dept d  on d.department_id = e.department_id ;</span><br><span class="line"></span><br><span class="line">-- 修改employee中的数据</span><br><span class="line">update employee set department_id=60 where employee_id=3;</span><br><span class="line"></span><br><span class="line">-- 重新查询，由于dept表中不存在60的数据，所以再dept表中没有对应的匹配数据，显示为null</span><br><span class="line">select e.c_name,d.dname from employee e left outer join dept d  on d.department_id = e.department_id ;</span><br><span class="line">+--------+----------+</span><br><span class="line">| ename | dname   |</span><br><span class="line">+--------+----------+</span><br><span class="line">| 刘一   | 财务部   |</span><br><span class="line">| 陈二   | 销售部   |</span><br><span class="line">| 张三   | NULL     |</span><br><span class="line">| 李四   | 研发部   |</span><br><span class="line">| 王五   | 行政部   |</span><br><span class="line">| 赵六   | 人力资源 |</span><br><span class="line">+--------+----------+</span><br><span class="line"></span><br><span class="line">-- 右外连接和左外连接只不过是左右表相换也能达到同样的效果</span><br><span class="line">-- 这里就是查询dept部门表对应所有部门和employee表中与之对应的数据，你会发现本来employee中有6条数据，只显示了5条数据，因为有一个人的部门60再dept中没有数据，所以就没有显示出来。</span><br><span class="line">select e.c_name,d.dname from employee e right outer join dept d  on d.department_id = e.department_id;</span><br><span class="line">+--------+----------+</span><br><span class="line">| ename | dname   |</span><br><span class="line">+--------+----------+</span><br><span class="line">| 刘一   | 财务部   |</span><br><span class="line">| 陈二   | 销售部   |</span><br><span class="line">| 李四   | 研发部   |</span><br><span class="line">| 王五   | 行政部   |</span><br><span class="line">| 赵六   | 人力资源 |</span><br><span class="line">+--------+----------+</span><br><span class="line"></span><br><span class="line">-- 自连接查询就是当前表与自身的连接查询，关键点在于虚拟化出一张表给一个别名</span><br><span class="line">-- 查询员工以及他的上司的名称，由于上司也是员工，所以这里虚拟化出一张上司表</span><br><span class="line">select e.c_name 员工名,b.c_name 上司名 from employee e  left join employee b on e.manager_id= b.employee_id;</span><br><span class="line">+--------+--------+</span><br><span class="line">| 员工名 | 上司名 |</span><br><span class="line">+--------+--------+</span><br><span class="line">| 刘一   | 陈二   |</span><br><span class="line">| 陈二   | 张三   |</span><br><span class="line">| 张三   | 李四   |</span><br><span class="line">| 李四   | 王五   |</span><br><span class="line">| 王五   | NULL   |</span><br><span class="line">| 赵六   | 王五   |</span><br><span class="line">+--------+--------+</span><br></pre></td></tr></tbody></table></figure></div><h2 id="11-mysql子连接查询"><a href="#11-mysql子连接查询" class="headerlink" title="11.mysql子连接查询"></a>11.mysql子连接查询</h2><ul><li>按子查询出现在主查询中的不同位置分<ul><li>select后面：仅仅支持标量子查询。</li><li>from后面：支持表子查询。</li><li>where或having后面：支持标量子查询（单列单行）、列子查询（单列多行）、行子查询（多列多行）</li><li>exists后面（即相关子查询）：表子查询（多行、多列）</li></ul></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">-- select后面的子查询</span><br><span class="line">-- 查询每个部门员工个数</span><br><span class="line">SELECT d.*,</span><br><span class="line">  (SELECT count(*)</span><br><span class="line">   FROM employee b</span><br><span class="line">   WHERE b.department_id = d.department_id) </span><br><span class="line">   AS 员工个数</span><br><span class="line">FROM dept d;</span><br><span class="line"></span><br><span class="line">-- 查询员工号等于3的部门名称</span><br><span class="line">SELECT </span><br><span class="line">    (SELECT a.dname </span><br><span class="line">    FROM dept a, employee b </span><br><span class="line">    WHERE a.department_id = b.department_id </span><br><span class="line">    AND b.employee_id = 3) </span><br><span class="line">    AS 部门名;</span><br><span class="line"></span><br><span class="line">-- from后面的子查询</span><br><span class="line">-- 查询每个部门平均工资的工资等级</span><br><span class="line">-- （1）先查询每个部门平均工资</span><br><span class="line">SELECT</span><br><span class="line">  department_id,</span><br><span class="line">  avg(a.salary)</span><br><span class="line">FROM employee a</span><br><span class="line">GROUP BY a.department_id;</span><br><span class="line"></span><br><span class="line">-- （2）然后是查询薪资等级表</span><br><span class="line">SELECT *</span><br><span class="line">FROM job_grades;</span><br><span class="line"></span><br><span class="line">-- （3）将上面2个结果连接查询，筛选条件:平均工资 between lowest_sal and highest_sal;</span><br><span class="line">SELECT</span><br><span class="line">  t1.department_id,</span><br><span class="line">  avg_salary AS '平均工资',</span><br><span class="line">  t2.grade_level</span><br><span class="line">FROM (SELECT</span><br><span class="line">        department_id,</span><br><span class="line">        avg(a.salary) avg_salary</span><br><span class="line">      FROM employees a</span><br><span class="line">      GROUP BY a.department_id) t1, job_grades t2</span><br><span class="line">WHERE</span><br><span class="line">  t1.avg_salary BETWEEN t2.lowest_sal AND t2.highest_sal;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- where和having后面的子查询</span><br><span class="line">-- 查询谁的工资比javaboy的高？</span><br><span class="line">-- （1）查询lisi的工资</span><br><span class="line">SELECT salary FROM employee WHERE e_name = 'lisi';</span><br><span class="line"></span><br><span class="line">-- （2）查询员工信息，满足salary>上面的结果</span><br><span class="line">SELECT *</span><br><span class="line">FROM employee a</span><br><span class="line">WHERE a.salary > (SELECT salary</span><br><span class="line">                  FROM employee</span><br><span class="line">                  WHERE e_name = 'lisi');</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--having后的子查询</span><br><span class="line">--查询最低工资大于40号部门最低工资的部门id和其最低工资</span><br><span class="line">-- （1）查询40号部门的最低工资</span><br><span class="line">SELECT min(salary)</span><br><span class="line">FROM employee</span><br><span class="line">WHERE department_id = 40;</span><br><span class="line"></span><br><span class="line">--（2）查询每个部门的最低工资</span><br><span class="line">SELECT</span><br><span class="line">  min(salary),</span><br><span class="line">  department_id</span><br><span class="line">FROM employee</span><br><span class="line">GROUP BY department_id;</span><br><span class="line"></span><br><span class="line">--（3）③在②的基础上筛选，满足min(salary)>①</span><br><span class="line">SELECT</span><br><span class="line">  min(a.salary) minsalary,</span><br><span class="line">  department_id</span><br><span class="line">FROM employee a</span><br><span class="line">GROUP BY a.department_id</span><br><span class="line">HAVING min(a.salary) > (SELECT min(salary)</span><br><span class="line">                        FROM employee</span><br><span class="line">                        WHERE department_id = 50);</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s?__biz=MzU1MzE4OTU0OQ==&mid=2247483886&idx=2&sn=3b9a0dde6fa9b06f3fba6a0aeca83820&chksm=fbf7e82ccc80613ab4eeda8ced91d6b6b6c8143693e864711de395f112a7f1cdef257ec26ecb&mpshare=1&scene=1&srcid=&sharer_sharetime=1583060341102&sharer_shareid=b105a99d0b987865d2122100dce7799a&key=26c378d410f2b0d4f899c82e66436bb473a5410b4234cd8198273b9bd9971a52093efb8468886a5f1db5ca60b448f84a8f7df7d826cd98cad572e19a6ac473a1045826d034cbb2bc30b4eb91e245f85d&ascene=1&uin=MjM2MzIxNjY3Nw%3D%3D&devicetype=Windows+10&version=62080079&lang=zh_CN&exportkey=AR6Hl%2FHeCxjZmAjOmeywCUw%3D&pass_ticket=bV4Usm2l0lG61%2FZABVf1fTx%2B%2B2ywmAIjYe%2Bbr3wuzTfLqD4oc3IRR3KsfTBJwDxS" target="_blank" rel="noopener">非科班的科班： 《万字长文，最硬核的mysql知识总结》</a></p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch_NetCore_NEST使用</title>
      <link href="/2020/03/01/Elasticsearch-NetCore-NEST%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/03/01/Elasticsearch-NetCore-NEST%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="1-ElasticSearch-简介"><a href="#1-ElasticSearch-简介" class="headerlink" title="1.ElasticSearch 简介"></a>1.ElasticSearch 简介</h2><p>Elasticsearch是基于Lucene的搜索引擎。它提供了一个分布式，支持多租户的全文搜索引擎，它具有HTTP Web界面和无模式JSON文档。<br>Elasticsearch是用Java开发的，根据Apache许可条款作为开源发布。</p><h2 id="2-ES中名词概念"><a href="#2-ES中名词概念" class="headerlink" title="2.ES中名词概念"></a>2.ES中名词概念</h2><h3 id="2-1-Node和Cluster"><a href="#2-1-Node和Cluster" class="headerlink" title="2.1 Node和Cluster"></a>2.1 Node和Cluster</h3><p>前面所过ES是一个分布式搜索引擎，其本质是一个分布式数据库，可以多台计算机上的ES实例协同工作，这里面的某一台计算机上的某个ES实例，就可以称为一个Node(节点)，所有的这些协同工作的实例，可以称为一个Cluster(集群)。</p><h3 id="2-2-Index"><a href="#2-2-Index" class="headerlink" title="2.2 Index"></a>2.2 Index</h3><p>Elastic 会索引所有字段，经过处理后写入一个反向索引（Inverted Index）。查找数据的时候，直接查找该索引。</p><p>所以，Elastic 数据管理的顶层单位就叫做 Index（索引）。它是单个数据库的同义词。每个 Index （即数据库）的名字必须是小写。</p><h3 id="2-3-Document"><a href="#2-3-Document" class="headerlink" title="2.3 Document"></a>2.3 Document</h3><p>Index 里面单条的记录称为 Document（文档）。许多条 Document 构成了一个 Index。</p><p>Document 使用 JSON 格式表示，下面是一个例子。</p><pre><code>{  "user": "张三",  "title": "工程师",  "desc": "数据库管理"}</code></pre><p>同一个 Index 里面的 Document，不要求有相同的结构（scheme），但是最好保持相同，这样有利于提高搜索效率。</p><h3 id="2-4-Type"><a href="#2-4-Type" class="headerlink" title="2.4 Type"></a>2.4 Type</h3><p>Document 可以分组，比如<code>weather</code>这个 Index 里面，可以按城市分组（北京和上海），也可以按气候分组（晴天和雨天）。这种分组就叫做 Type，它是虚拟的逻辑分组，用来过滤 Document。</p><p>不同的 Type 应该有相似的结构（schema），举例来说，<code>id</code>字段不能在这个组是字符串，在另一个组是数值。这是与关系型数据库的表的一个区别。性质完全不同的数据（比如<code>products</code>和<code>logs</code>）应该存成两个 Index，而不是一个 Index 里面的两个 Type（虽然可以做到）。</p><blockquote><p>参考: <a href="http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html" target="_blank" rel="noopener">阮一峰：《全文搜索引擎 Elasticsearch 入门教程》</a></p></blockquote><h2 id="3-ES安装"><a href="#3-ES安装" class="headerlink" title="3.ES安装"></a>3.ES安装</h2><p><a href="/2020/03/01/Elasticsearch-NetCore-NEST%E4%BD%BF%E7%94%A8/es.png" data-fancybox="group" data-caption="Elasticsearch" class="fancybox"><img alt="Elasticsearch" title="Elasticsearch" data-src="/2020/03/01/Elasticsearch-NetCore-NEST%E4%BD%BF%E7%94%A8/es.png" class="lazyload"></a></p><h2 id="4-Kibana安装"><a href="#4-Kibana安装" class="headerlink" title="4.Kibana安装"></a>4.Kibana安装</h2><p><a href="/2020/03/01/Elasticsearch-NetCore-NEST%E4%BD%BF%E7%94%A8/kibana.png" data-fancybox="group" data-caption="Kibana" class="fancybox"><img alt="Kibana" title="Kibana" data-src="/2020/03/01/Elasticsearch-NetCore-NEST%E4%BD%BF%E7%94%A8/kibana.png" class="lazyload"></a></p><h2 id="5-Net-Core中使用ES"><a href="#5-Net-Core中使用ES" class="headerlink" title="5.Net Core中使用ES"></a>5.Net Core中使用ES</h2><p><code>Elasticsearch.Net</code> 是一个非常low leave而且灵活的SDK，它不在意你如何的构建自己的请求和响应。它非常抽象，因此所有的Elasticsearch RESTFul API被表示为方法，而且不会影响你构建json / request / response对象的方式。 它还内置可配置/可覆盖的群集故障转移重试机制。</p><p><code>NEST</code> 是一个 high level SDK, 有非常大的弹性，如果你想更好的提升你的搜索服务，你完全可以使用它来做为你的客户端。可以映射所有请求和响应对象，拥有一个强类型DSL（领域特定语言），并且可以使用.net的特性，如协变、Auto Mapping Of POCOs，NEST内部使用的依然是Elasticsearch.Net客户端。</p><blockquote><p>参考资料：<br><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html" target="_blank" rel="noopener">《Elasticsearch:权威指南》</a><br><a href="https://www.cnblogs.com/CoderAyu/p/9601991.html" target="_blank" rel="noopener">《ElasticSearch入门 附.Net Core例子》</a><br><a href="https://blog.csdn.net/wulex/article/details/71375446" target="_blank" rel="noopener">《Elasticsearch(十)【NEST高级客户端–搜索查询】》</a><br><a href="https://www.cnblogs.com/huhangfei/p/5985280.html" target="_blank" rel="noopener">《Elasticsearch .Net Client NEST 多条件查询示例》</a><br><a href="https://blog.csdn.net/qq_18145031/article/details/76591036" target="_blank" rel="noopener">《elasticsearch.net search使用指南》</a></p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NetCore </tag>
            
            <tag> Elasticsearch </tag>
            
            <tag> NEST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux安装Kibana</title>
      <link href="/2020/02/29/linux%E5%AE%89%E8%A3%85Kibana/"/>
      <url>/2020/02/29/linux%E5%AE%89%E8%A3%85Kibana/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h3 id="下载kibana"><a href="#下载kibana" class="headerlink" title="下载kibana"></a>下载kibana</h3><pre><code>wget https://artifacts.elastic.co/downloads/kibana/kibana-7.1.1-linux-x86_64.tar.gz</code></pre><h3 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h3><pre><code>tar -zxvf kibana-7.1.1-linux-x86_64.tar.gz</code></pre><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><pre><code>server.port: 5601server.host: "0.0.0.0"elasticsearch.url: "http://192.168.120.135:9200"kibana.index: ".kibana"</code></pre><h3 id="启动Kibana"><a href="#启动Kibana" class="headerlink" title="启动Kibana"></a>启动Kibana</h3><pre><code>cd kibana-7.1.1-linux-x86_64/bin./kibana</code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ELK </tag>
            
            <tag> Kibana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux安装Elasticsearch</title>
      <link href="/2020/02/29/linux%E5%AE%89%E8%A3%85Elasticsearch/"/>
      <url>/2020/02/29/linux%E5%AE%89%E8%A3%85Elasticsearch/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h3 id="下载Elasticsearch"><a href="#下载Elasticsearch" class="headerlink" title="下载Elasticsearch"></a>下载Elasticsearch</h3><pre><code>wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.1.1.tar.gz</code></pre><h3 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h3><pre><code>tar -zxvf elasticsearch-7.1.1.tar.gz -C /usr/local/</code></pre><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p>说明：从5.0开始 elasticsearch 安全级别提高了 不允许采用root帐号启动 所以我们要添加一个用户用来启动 elasticsearch</p><p>1.关闭防火墙</p><pre><code>systemctl stop firewalld.servicesystemctl disable firewalld.service //禁止防火墙开机启动</code></pre><p>2.创建es用户</p><pre><code>useradd es</code></pre><p>3.目录权限赋予给es用户</p><pre><code>chown -R es:es /usr/local/elasticsearch-7.1.1/</code></pre><p>4.切换至es用户</p><pre><code>su es</code></pre><p>5.执行命令，更改Elasticsearch Network Host</p><pre><code>vi /usr/local/elasticsearch-7.1.1/config/elasticsearch.yml</code></pre><p>6.执行命令</p><pre><code>sh /usr/local/elasticsearch-7.1.1/bin/elasticsearch或sh /usr/local/elasticsearch-7.1.1/bin/elasticsearch -d  //后台启动</code></pre><p>7.查看进程</p><pre><code>ps -ef|grep elasticsearch</code></pre><p>8.验证下服务是否正常运行</p><pre><code>curl  http://192.168.120.135:9200</code></pre><p>9.浏览器访问</p><pre><code>http://192.168.120.135:9200/</code></pre><h3 id="其他补充"><a href="#其他补充" class="headerlink" title="其他补充"></a>其他补充</h3><p>如果启动出现异常，请看<a href="https://hjy-dev.github.io/2020/02/29/elasticsearch%E5%90%AF%E5%8A%A8%E5%BC%82%E5%B8%B8%E8%A7%A3%E5%86%B3%E6%B1%87%E6%80%BB/">《elasticsearch启动异常解决汇总》</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Elasticsearch </tag>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux如何查看进程及端口</title>
      <link href="/2020/02/29/Linux%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B%E5%8F%8A%E7%AB%AF%E5%8F%A3/"/>
      <url>/2020/02/29/Linux%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B%E5%8F%8A%E7%AB%AF%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h3 id="Linux-查看进程信息"><a href="#Linux-查看进程信息" class="headerlink" title="Linux 查看进程信息"></a>Linux 查看进程信息</h3><p>1.先根据进程名查看进程id<br>命令：<code>ps aux | grep 进程名</code>(或者<code>ps -ef | grep 进程名</code>)</p><p>2.通过进程id查看占用的端口<br>命令：<code>netstat -nap | grep 进程id</code></p><p>3.通过端口号查看占用的进程id<br>命令：<code>netstat -nap | grep 端口号</code></p><h3 id="Linux中用-grep查找特定进程，屏蔽grep进程本身（也就是不出现grep-–color-auto）"><a href="#Linux中用-grep查找特定进程，屏蔽grep进程本身（也就是不出现grep-–color-auto）" class="headerlink" title="Linux中用 grep查找特定进程，屏蔽grep进程本身（也就是不出现grep –color=auto）"></a>Linux中用 grep查找特定进程，屏蔽grep进程本身（也就是不出现grep –color=auto）</h3><p>如何过滤掉grep进程本身的输出？</p><p>解决：</p><ol><li>在进程名 任何一个字母上添加 <code>[ ]</code></li><li>在进程 后面添加  <code>grep -v grep</code></li></ol></body></html>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch启动异常解决汇总</title>
      <link href="/2020/02/29/elasticsearch%E5%90%AF%E5%8A%A8%E5%BC%82%E5%B8%B8%E8%A7%A3%E5%86%B3%E6%B1%87%E6%80%BB/"/>
      <url>/2020/02/29/elasticsearch%E5%90%AF%E5%8A%A8%E5%BC%82%E5%B8%B8%E8%A7%A3%E5%86%B3%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h3 id="Elasticsearch-启动异常解决"><a href="#Elasticsearch-启动异常解决" class="headerlink" title="Elasticsearch 启动异常解决"></a>Elasticsearch 启动异常解决</h3><h3 id="以下操作都要切换到root下执行"><a href="#以下操作都要切换到root下执行" class="headerlink" title="以下操作都要切换到root下执行"></a>以下操作都要切换到root下执行</h3><h4 id="1-max-file-descriptors-4096-for-elasticsearch-process-is-too-low-increase-to-at-least-65536"><a href="#1-max-file-descriptors-4096-for-elasticsearch-process-is-too-low-increase-to-at-least-65536" class="headerlink" title="[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536]"></a>[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536]</h4><p>解决： <code>vi /etc/security/limits.conf</code> 修改/etc/security/limits.conf文件 在文件末尾添加如下</p><pre><code>*       hard    nofile          65536*       soft    nofile          65536</code></pre><h4 id="2-max-number-of-threads-3818-for-user-es-is-too-low-increase-to-at-least-4096"><a href="#2-max-number-of-threads-3818-for-user-es-is-too-low-increase-to-at-least-4096" class="headerlink" title="[2]: max number of threads [3818] for user [es] is too low, increase to at least [4096]"></a>[2]: max number of threads [3818] for user [es] is too low, increase to at least [4096]</h4><p>解决： <code>vi /etc/security/limits.d/20-nproc.conf</code></p><pre><code>*            soft          nproc     4096*            hard          nproc     4096    root       soft            nproc     unlimited</code></pre><h4 id="3-max-virtual-memory-areas-vm-max-map-count-65530-is-too-low-increase-to-at-least-262144"><a href="#3-max-virtual-memory-areas-vm-max-map-count-65530-is-too-low-increase-to-at-least-262144" class="headerlink" title="[3]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]"></a>[3]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</h4><p>解决: <code>vi  /etc/sysctl.conf</code> 在 /etc/sysctl.conf文件末尾添加<br>以下内容</p><pre><code>vm.max_map_count = 2621441 </code></pre><h4 id="4-system-call-filters-failed-to-install-check-the-logs-and-fix-your-configuration-or-disable-system-call-filters-at-your-own-risk"><a href="#4-system-call-filters-failed-to-install-check-the-logs-and-fix-your-configuration-or-disable-system-call-filters-at-your-own-risk" class="headerlink" title="[4]: system call filters failed to install; check the logs and fix your configuration or disable system call filters at your own risk"></a>[4]: system call filters failed to install; check the logs and fix your configuration or disable system call filters at your own risk</h4><p>解决：修改 <code>elasticsearch.yml</code>， 添加配置项：</p><pre><code>bootstrap.memory_lock: falsebootstrap.system_call_filter: false</code></pre><h4 id="5-the-default-discovery-settings-are-unsuitable-for-production-use-at-least-one-of-discovery-seed-hosts-discovery-seed-providers-cluster-initial-master-nodes-must-be-configured"><a href="#5-the-default-discovery-settings-are-unsuitable-for-production-use-at-least-one-of-discovery-seed-hosts-discovery-seed-providers-cluster-initial-master-nodes-must-be-configured" class="headerlink" title="[5]: the default discovery settings are unsuitable for production use; at least one of [discovery.seed_hosts, discovery.seed_providers, cluster.initial_master_nodes] must be configured"></a>[5]: the default discovery settings are unsuitable for production use; at least one of [discovery.seed_hosts, discovery.seed_providers, cluster.initial_master_nodes] must be configured</h4><p>解决：修改<code>elasticsearch.yml</code>，取消注释保留一个节点</p><pre><code>cluster.initial_master_nodes: ["127.0.0.1:9300"]</code></pre><h4 id="6-org-elasticsearch-bootstrap-StartupException-BindTransportException-Failed-to-bind-to-9300-nested-BindException-无法指定被请求的地址"><a href="#6-org-elasticsearch-bootstrap-StartupException-BindTransportException-Failed-to-bind-to-9300-nested-BindException-无法指定被请求的地址" class="headerlink" title="[6]: org.elasticsearch.bootstrap.StartupException:BindTransportException[Failed to bind to [9300]]; nested: BindException[无法指定被请求的地址];"></a>[6]: org.elasticsearch.bootstrap.StartupException:BindTransportException[Failed to bind to [9300]]; nested: BindException[无法指定被请求的地址];</h4><p>解决：修改<code>elasticsearch.yml</code>，修改NetWork节点</p><pre><code>network.host:192.168.120.135 (当前虚拟机IP)</code></pre><p>修改 Discovery 节点</p><pre><code>discovery.seed_hosts: ["192.168.120.135:9300"] </code></pre><h4 id="7-org-elasticsearch-bootstrap-StartupException-java-lang-RuntimeException-can-not-run-elasticsearch-as-root"><a href="#7-org-elasticsearch-bootstrap-StartupException-java-lang-RuntimeException-can-not-run-elasticsearch-as-root" class="headerlink" title="[7]: org.elasticsearch.bootstrap.StartupException: java.lang.RuntimeException: can not run elasticsearch as root"></a>[7]: org.elasticsearch.bootstrap.StartupException: java.lang.RuntimeException: can not run elasticsearch as root</h4><p>解决：因为安全问题elasticsearch不让用root用户直接运行，所以要创建新用户</p><pre><code>useradd es //创建es用户chown -R es:es /usr/local/elasticsearch-X.X.X ///把目录权限赋予给es用户</code></pre><h4 id="如果在终端出现-bash-grunt-command-not-found"><a href="#如果在终端出现-bash-grunt-command-not-found" class="headerlink" title="如果在终端出现-bash: grunt: command not found"></a>如果在终端出现-bash: grunt: command not found</h4><p>解决: 需要创建软链接</p><pre><code>ln -s /usr/elk/node-v6.11.4-linux-x64/bin/grunt(这是grunt快捷方式的路径) /usr/local/bin/grunt</code></pre><h3 id="执行-ulimit-a-查看当前所有的资源限制"><a href="#执行-ulimit-a-查看当前所有的资源限制" class="headerlink" title="执行 ulimit -a 查看当前所有的资源限制"></a>执行 <code>ulimit -a</code> 查看当前所有的资源限制</h3><p>ulimit 是一个计算机命令，用于shell启动进程所占用的资源，可用于修改系统资源限制</p><ul><li>命令常用参数：<ul><li>-H 设置硬资源限制.</li><li>-S 设置软资源限制.</li><li>-a 显示当前所有的资源限制.</li><li>-c size:设置core文件的最大值.单位:blocks</li><li>-d size:设置数据段的最大值.单位:kbytes</li><li>-f size:设置创建文件的最大值.单位:blocks</li><li>-l size:设置在内存中锁定进程的最大值.单位:kbytes</li><li>-m size:设置可以使用的常驻内存的最大值.单位:kbytes</li><li>-n size:设置内核可以同时打开的文件描述符的最大值.单位:n</li><li>-p size:设置管道缓冲区的最大值.单位:kbytes</li><li>-s size:设置堆栈的最大值.单位:kbytes</li><li>-t size:设置CPU使用时间的最大上限.单位:seconds</li><li>-v size:设置虚拟内存的最大值.单位:kbytes</li><li>-u <程序数目> 　用户最多可开启的程序数目    </li></ul></li></ul><p>文件： <code>/etc/security/limits.conf</code></p><h3 id="重启-linux，配置生效"><a href="#重启-linux，配置生效" class="headerlink" title="重启 linux，配置生效"></a>重启 linux，配置生效</h3><pre><code>shutdown -r now 立刻重启</code></pre><blockquote><p>其他参考： <a href="https://blog.csdn.net/zmx729618/article/details/80363875" target="_blank" rel="noopener">《elasticsearch-.yml（中文配置详解）》</a></p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Elasticsearch </tag>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim入门级基础配置</title>
      <link href="/2020/02/26/Vim%E5%85%A5%E9%97%A8%E7%BA%A7%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/02/26/Vim%E5%85%A5%E9%97%A8%E7%BA%A7%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>介绍Vim配置文件.vimrc，配置Vim显示行号、支持utf8中文不乱码、突出显示Vim当前行，设置高亮显示括号匹配和tab缩进，解决Vim粘贴时多出缩进和空格问题。</p><p>推荐阅读：<a href="https://vimjc.com/vimrc.html" target="_blank" rel="noopener">无插件Vim配置文件vimrc推荐与各VIM配置项解释。</a></p><h2 id="一、Vim配置文件-vimrc"><a href="#一、Vim配置文件-vimrc" class="headerlink" title="一、Vim配置文件.vimrc"></a>一、Vim配置文件.vimrc</h2><p>Vim编辑器相关的所有功能开关都可以通过.vimrc文件进行设置。</p><p>.vimrc配置文件分系统配置和用户配置两种。</p><p>系统vimrc配置文件存放在Vim的安装目录，默认路径为<code>/usr/share/vim/.vimrc</code>。可以使用命令<code>echo $VIM</code>来确定Vim的安装目录。</p><p>用户vimrc文件，存放在用户主目录下<code>~/.vimrc</code>。可以使用命令<code>echo $HOME</code>确定用户主目录。</p><p>注意：用户配置文件优先于系统配置文件，Vim启动时会优先读取当前用户根目录下的.vimrc文件。所以与个人用户相关的个性化配置一般都放在<code>~/.vimrc</code>中。</p><h2 id="二、Vim基本配置"><a href="#二、Vim基本配置" class="headerlink" title="二、Vim基本配置"></a>二、Vim基本配置</h2><p>默认情况下，Vim编辑器里既不显示行号，也没有语法高亮度、智能缩进。为了方便使用，基本的Vim配置选项一般都会包括：</p><h3 id="2-1-支持中文不乱码"><a href="#2-1-支持中文不乱码" class="headerlink" title="2.1 支持中文不乱码"></a>2.1 支持中文不乱码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">'设置编码'</span><br><span class="line">set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936</span><br><span class="line">set termencoding=utf-8</span><br><span class="line">set encoding=utf-8</span><br></pre></td></tr></tbody></table></figure></div><p>与Vim编码有关的变量包括：<code>encoding</code>、<code>fileencoding</code>、<code>termencoding</code>。<br>encoding选项用于缓存的文本、寄存器、Vim 脚本文件等；fileencoding选项是Vim写入文件时采用的编码类型；termencoding选项表示输出到终端时采用的编码类型。</p><h3 id="2-2-显示行号"><a href="#2-2-显示行号" class="headerlink" title="2.2 显示行号"></a>2.2 显示行号</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">'显示行号'</span><br><span class="line">set nu</span><br><span class="line">set number</span><br></pre></td></tr></tbody></table></figure></div><p>nu是number的缩写，所以上面两个配置命令是完全等效的。</p><h3 id="2-3-突出显示当前行"><a href="#2-3-突出显示当前行" class="headerlink" title="2.3 突出显示当前行"></a>2.3 突出显示当前行</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set cursorline</span><br><span class="line">set cul          'cursorline的缩写形式'</span><br></pre></td></tr></tbody></table></figure></div><h3 id="2-4-突出显示当前列"><a href="#2-4-突出显示当前列" class="headerlink" title="2.4 突出显示当前列"></a>2.4 突出显示当前列</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">set cursorcolumn</span><br><span class="line">set cuc          'cursorcolumn的缩写形式'</span><br></pre></td></tr></tbody></table></figure></div><h3 id="2-5-启用鼠标"><a href="#2-5-启用鼠标" class="headerlink" title="2.5 启用鼠标"></a>2.5 启用鼠标</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">set mouse=a</span><br><span class="line">set selection=exclusive</span><br><span class="line">set selectmode=mouse,key</span><br></pre></td></tr></tbody></table></figure></div><p>Vim编辑器里默认是不启用鼠标的，也就是说不管你鼠标点击哪个位置，光标都不会移动。通过以上设置就可以启动鼠标，不过对于高级玩家来说，用Vim就是为了解放双方不用鼠标，所以这个设置可以根据个人爱好选择。</p><h3 id="2-6-显示括号匹配"><a href="#2-6-显示括号匹配" class="headerlink" title="2.6 显示括号匹配"></a>2.6 显示括号匹配</h3><pre><code>set showmatch</code></pre><p>关于Vim的括号匹配，推荐阅读<a href="https://vimjc.com/vim-rainbow-parentheses-plugin.html" target="_blank" rel="noopener">Vim插件之多色彩括号匹配插件rainbow_parenthsis。</a></p><h3 id="2-7-设置缩进"><a href="#2-7-设置缩进" class="headerlink" title="2.7 设置缩进"></a>2.7 设置缩进</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">'设置Tab长度为4空格'</span><br><span class="line">set tabstop=4</span><br><span class="line">'设置自动缩进长度为4空格'</span><br><span class="line">set shiftwidth=4</span><br><span class="line">'继承前一行的缩进方式，适用于多行注释'</span><br><span class="line">set autoindent</span><br></pre></td></tr></tbody></table></figure></div><p>关于Vim缩进的更多内容，可参考<a href="https://vimjc.com/vim-indent.html" target="_blank" rel="noopener">vim教程网上的文章Vim自动缩进和tab键替换空格</a></p><h3 id="2-8-设置粘贴模式"><a href="#2-8-设置粘贴模式" class="headerlink" title="2.8 设置粘贴模式"></a>2.8 设置粘贴模式</h3><pre><code>set paste</code></pre><p>在Vim中通过鼠标右键粘贴时会在行首多出许多缩进和空格，通过set paste可以在插入模式下粘贴内容时不会有任何格式变形、胡乱缩进等问题。</p><h3 id="2-9-显示空格和tab键"><a href="#2-9-显示空格和tab键" class="headerlink" title="2.9 显示空格和tab键"></a>2.9 显示空格和tab键</h3><pre><code>set listchars=tab:>-,trail:-</code></pre><p>Vim编辑器中默认不显示文件中的tab和空格符，通过上面的配置可以获得以下的显示效果，方便定位输入错误。</p><p>关于Vim特殊字符的显示，推荐阅读<a href="https://vimjc.com/vim-display-unprintable-character.html" target="_blank" rel="noopener">Vim怎么显示空格、Tab制表符、行尾换行符等非打印字符</a>。</p><h3 id="2-10-显示状态栏和光标当前位置"><a href="#2-10-显示状态栏和光标当前位置" class="headerlink" title="2.10 显示状态栏和光标当前位置"></a>2.10 显示状态栏和光标当前位置</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">'总是显示状态栏'</span><br><span class="line">set laststatus=2</span><br><span class="line">'显示光标当前位置'</span><br><span class="line">set ruler</span><br></pre></td></tr></tbody></table></figure></div><p>2.11 打开文件类型检测</p><pre><code>filetype plugin indent on</code></pre><p>推荐阅读<a href="https://vimjc.com/vim-filetype.html" target="_blank" rel="noopener">Vim文件类型检测原理及应用</a>。</p><h2 id="三、Vim配置变更立即生效"><a href="#三、Vim配置变更立即生效" class="headerlink" title="三、Vim配置变更立即生效"></a>三、Vim配置变更立即生效</h2><p>要让.vimrc变更内容生效，一般的做法是先保存 .vimrc 再重启vim，增加如下设置，可以实现保存 .vimrc 时自动重启加载</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">'让vimrc配置变更立即生效'</span><br><span class="line">autocmd BufWritePost $MYVIMRC source $MYVIMRC</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>原文地址：<a href="https://vimjc.com/vimrc-config.html" target="_blank" rel="noopener">Vim命令之文本编辑命令汇总</a><br>推荐阅读：<a href="https://vimjc.com/" target="_blank" rel="noopener">vim教程网</a></p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim文本编辑命令汇总</title>
      <link href="/2020/02/26/Vim%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/"/>
      <url>/2020/02/26/Vim%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="Vim文本编辑命令汇总"><a href="#Vim文本编辑命令汇总" class="headerlink" title="Vim文本编辑命令汇总"></a>Vim文本编辑命令汇总</h2><p>介绍Vim三种操作模式和文本编辑命令。Vim编辑模式插入字符，行尾、行首插入，删除一个字符和删除整行命令，Vim复制和粘贴命令，vim替换输入以及撤销和反撤销命令，Vim保存和另存为文件，显示vim当前编辑文件名。</p><p>我们使用编辑器的常用文件操作主要是： <code>插入</code>、 <code>删除</code>、 <code>复制</code>、 <code>粘贴</code>、 <code>替换</code>、 <code>撤销</code>、 <code>保存</code>、 <code>另存为</code>。</p><p>在介绍Vim中的上述基本文件操作命令前，需要先介绍下vim的操作模式。因为vim的各种文件操作命令需要在不同操作模式下使用。</p><h3 id="一、Vim三种操作模式"><a href="#一、Vim三种操作模式" class="headerlink" title="一、Vim三种操作模式"></a>一、Vim三种操作模式</h3><p>Vim编辑器一共有3种模式，分别为命令模式(默认)、编辑模式、尾行模式。这3种模式的转换关系如下图所示。</p><p><a href="/2020/02/26/Vim%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/Vim.png" data-fancybox="group" data-caption="Vim" class="fancybox"><img alt="Vim" title="Vim" data-src="/2020/02/26/Vim%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/Vim.png" class="lazyload"></a></p><h4 id="1-1-命令模式-command-mode"><a href="#1-1-命令模式-command-mode" class="headerlink" title="1.1 命令模式 (command mode)"></a>1.1 命令模式 (command mode)</h4><p>命令模式是Vim的默认操作模式，当使用vim命令打开一个文件时，默认进入的就是命令模式。不管用户处于何种模式，只要按下 Esc 键就可使进入命令行模式</p><h4 id="1-2-编辑模式-input-mode"><a href="#1-2-编辑模式-input-mode" class="headerlink" title="1.2 编辑模式 (input mode)"></a>1.2 编辑模式 (input mode)</h4><p>只有在vim编辑模式下，才能将键盘键入的内容输入到当前打开的文件中</p><p>在命令模式下输入插入命令 i (insert)、附加命令 a (append)、打开命令 o (open)、修改命令 c (change)、取代命令 r 或替换命令 s 都可以进入文本编辑模式</p><h4 id="1-3-尾行模式-last-line-mode"><a href="#1-3-尾行模式-last-line-mode" class="headerlink" title="1.3 尾行模式 (last line mode)"></a>1.3 尾行模式 (last line mode)</h4><p>尾行模式主要用于保存文件或退出Vim，同时也可以设置编辑环境和一些编译工作，如列出行号(set nu)、寻找字符串(/target)等</p><p>在命令模式下，用户按冒号键 : 即可进入末行模式下，此时Vi会在显示窗口的最后一行显示一个 “:” 作为末行模式的提示符，等待用户输入命令</p><h3 id="二、Vim文本编辑命令"><a href="#二、Vim文本编辑命令" class="headerlink" title="二、Vim文本编辑命令"></a>二、Vim文本编辑命令</h3><p>约定：在没有特殊说明的情况下，以下Vim编辑命令部分提到的命令均是在命令模式下使用。</p><h4 id="2-1-插入"><a href="#2-1-插入" class="headerlink" title="2.1 插入"></a>2.1 插入</h4><p>在命令模式下按以下按键可进入编辑模式，执行插入操作，具体包括：</p><p>(1) 从光标当前所在位置的 前 一个字符处开始插入：<code>i</code></p><p>(2) 从光标当前所在位置的 后 一个字符处开始插入：<code>a</code></p><p>(3) 从光标当前所在行的 行首 处开始插入：<code>I</code></p><p>(4) 从光标当前所在行的 行尾 处开始插入：<code>A</code></p><p>(5) 从光标当前所在行的 下一行 处开始插入：<code>o</code></p><p>(6) 从光标当前所在行的 上一行 处开始插入：<code>O</code></p><p>tips：<code>i</code> (insert)是在当前位置插入，<code>a</code> (append)表示是在后面追加</p><h4 id="2-2-删除"><a href="#2-2-删除" class="headerlink" title="2.2 删除"></a>2.2 删除</h4><p>在命令模式下按以下按键可执行删除操作，具体包括：</p><p>(1) 删除光标位置的 一个 字符：<code>x</code></p><p>(2) 删除当前光标所在行：<code>dd</code></p><p>(3) 删除从光标所在位置到当前 行首 的内容：<code>d0</code></p><p>(4) 删除从光标所在位置到当前 行尾 的内容：<code>d$</code></p><p>(5) 删除从光标所在位置到当前 单词结束 部分的内容并进入插入模式：<code>cw</code>、<code>cW</code></p><p>(6) 删除从光标所在位置到当前 单词开始 部分的内容并进入插入模式：<code>cb</code>、<code>cB</code></p><p>(7) 删除从光标所在位置到当前 单词结束 部分的内容但 不 进入插入模式：<code>dw</code>、<code>dW</code></p><p>(8) 删除从光标所在位置到当前 单词开始 部分的内容但 不 进入插入模式：<code>db</code>、<code>dB</code></p><p>(9) 删除当前 句子 从光标位置开始到 句末 的内容：<code>d)</code></p><p>(10) 删除当前 句子 从光标位置开始到 句首 的内容：<code>d(</code></p><p>(11) 删除当前 段落 从光标位置开始到 段末 的内容：<code>d}</code></p><p>(12) 删除当前 段落 从光标位置开始到 段首 的内容：<code>d{</code></p><p>tips:</p><p>(1) Vim的命令中，<code>0</code> 表示行首，<code>$</code>表示行尾，更多内容可参考Vim教程网上的Vim操作范围、文件范围介绍</p><p>(2) <code>w</code> (word)、<code>b</code>(back)命令用于光标移动，具体可参考vim教程网上的博客：vim光标移动命令汇总</p><p>(3) <code>cW</code>、<code>cB</code>、<code>dW</code>、<code>dB</code>命令操作的单词是以空白字符 (空格、Tab) 分隔的字符串</p><p>(4) Vim命令中用 <code>(</code>和<code>)</code> 表示句子，<code>{</code> 和<code>}</code> 表示段落</p><h4 id="2-3-复制、粘贴"><a href="#2-3-复制、粘贴" class="headerlink" title="2.3 复制、粘贴"></a>2.3 复制、粘贴</h4><p>在命令模式下按以下按键可执行复制、粘贴操作，具体包括：</p><p>(1) 复制从光标所在位置到当前 单词结束 部分的内容：<code>yw</code></p><p>(2) 复制光标所在 行 的所有字符 (包含换行符)：<code>yy</code></p><p>(3) 将最后一次删除或复制操作的文本内容粘贴到光标所在字符之 后：<code>p</code></p><p>(4) 将最后一个删除或复制操作的文本内容粘贴到光标当前字符之 前：<code>P</code></p><p>tips：<code>yyp</code> 操作可以实现复制一整行内容到当前所在行的下一行</p><h4 id="2-4-替换"><a href="#2-4-替换" class="headerlink" title="2.4 替换"></a>2.4 替换</h4><p>在命令模式下按以下按键后，再输入字符可替换原始文件中的内容</p><p>(1) 替换光标当前所在字符一次：<code>r</code></p><p>(2) 一直替换光标所在字符，直到按下[ESC]键为止：<code>R</code></p><p>删除、复制操作的操作单位可以加操作次数，操作对象的范围为：操作次数 * 操作单位</p><p>例如： <code>d3w</code> 命令表示删除三个单词， <code>10dd</code> 命令表示从光标所在行开始删除后面的十行，更多内容可以参考Vim中的操作符和动作命令。</p><h4 id="2-5-撤销、反撤销"><a href="#2-5-撤销、反撤销" class="headerlink" title="2.5 撤销、反撤销"></a>2.5 撤销、反撤销</h4><p>在命令模式下可执行撤销操作<br>(1) 撤销最近的一次操作： <code>u</code></p><p>(2) 恢复最近的一次操作(取消撤销)： <code><ctrl>+ z</ctrl></code></p><p>tips：多次执行u 命令可以连续撤销最近的操作</p><h4 id="2-6-保存"><a href="#2-6-保存" class="headerlink" title="2.6 保存"></a>2.6 保存</h4><p>在尾行模式下执行以下命令可保存当前编辑的文件内容</p><p>(1) 保存当前编辑的文件：<code>:w</code></p><p>(2) 保存当前编辑的文件并退出vim：<code>:wq</code></p><p>(3) 强制将当前编辑的文件保存： <code>:w!</code></p><p>tips：上述操作是在尾行模式下执行的，所以命令都是以 <code>:</code>开头</p><h4 id="2-7-另存为"><a href="#2-7-另存为" class="headerlink" title="2.7 另存为"></a>2.7 另存为</h4><p>在尾行模式下执行命令 <code>:w a.txt</code>可将vim当前打开的文件另存为新文件a.txt.</p><p>tips：<code>w(write)</code>表示将文件存档，<code>:</code>表示尾行模式命令。</p><h4 id="2-8-显示当前文件名"><a href="#2-8-显示当前文件名" class="headerlink" title="2.8 显示当前文件名"></a>2.8 显示当前文件名</h4><p>命令 <code><ctrl>+ g</ctrl></code>可显示当前编辑文件名及行数，可以在不退出 Vim 的情况下了解当前编辑文件的信息，更多内容，可参考30个Vim常用命令和使用技巧。</p><blockquote><p>原文地址：<a href="https://vimjc.com/vim-edit-command.html" target="_blank" rel="noopener">Vim命令之文本编辑命令汇总</a><br>推荐阅读：<a href="https://vimjc.com/" target="_blank" rel="noopener">vim教程网</a></p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql查询优化</title>
      <link href="/2020/02/26/Mysql%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/"/>
      <url>/2020/02/26/Mysql%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="Mysql-查询优化"><a href="#Mysql-查询优化" class="headerlink" title="Mysql 查询优化"></a>Mysql 查询优化</h2><h3 id="1-limit-offset-rows-优化"><a href="#1-limit-offset-rows-优化" class="headerlink" title="1.limit offset rows 优化"></a>1.limit offset rows 优化</h3><p>limit offset rows中的offset很大时，会出现效率问题。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-- 优化前SQL</span><br><span class="line">SELECT  各种字段</span><br><span class="line">FROM `table_name`</span><br><span class="line">WHERE 各种条件</span><br><span class="line">LIMIT 0,10;</span><br><span class="line"></span><br><span class="line">-- 优化后SQL</span><br><span class="line">SELECT  各种字段</span><br><span class="line">FROM `table_name` main_tale</span><br><span class="line">RIGHT JOIN </span><br><span class="line">(</span><br><span class="line">SELECT  子查询只查主键</span><br><span class="line">FROM `table_name`</span><br><span class="line">WHERE 各种条件</span><br><span class="line">LIMIT 0,10;</span><br><span class="line">) temp_table ON temp_table.主键 = main_table.主键</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>操作： 查询条件放到子查询中，子查询只查主键ID，然后使用子查询中确定的主键关联查询其他的属性字段；</p></blockquote><blockquote><p>原理： 减少回表操作；</p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算与逻辑运算</title>
      <link href="/2020/02/26/%E4%BD%8D%E8%BF%90%E7%AE%97%E4%B8%8E%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97/"/>
      <url>/2020/02/26/%E4%BD%8D%E8%BF%90%E7%AE%97%E4%B8%8E%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="amp-与-amp-amp-的区别"><a href="#amp-与-amp-amp-的区别" class="headerlink" title="& 与 && 的区别"></a>& 与 && 的区别</h2><h4 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h4><p>&和&&都可作逻辑与的运算符，表示逻辑与（and），当运算符两边的表达式的结果都为true时，其结果才为true，否则，只要有一方为false，则结果为false。（ps：当要用到逻辑与的时候&是毫无意义，&本身就不是干这个的）</p><h4 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h4><pre><code>if(loginUser!=null&&string.IsnullOrEmpty(loginUser.UserName))</code></pre><ul><li>&&具有短路的功能，即如果第一个表达式为false，则不再计算第二个表达式，对于上面的表达式，当loginUser为null时，后面的表达式不会执行，所以不会出现NullPointerException如果将&&改为&，则会抛出NullPointerException异常。<br>ps：所以说当要用到逻辑与的时候&是毫无意义的</li><li>& 是用作位运算的。</li><li>&是位运算，返回结果是int类型</li><li>&&是逻辑运算，返回结果是bool类型</li></ul><h2 id="位运算的使用"><a href="#位运算的使用" class="headerlink" title="位运算的使用"></a>位运算的使用</h2><center>常见的5个位运算符</center><table><tbody><tr style="background:rgba(153,169,191,0.1);text-align:center;"><td>符号</td><td>意义</td><td>运算对象类型</td><td>运算结果类型</td><td>示例</td></tr><tr><td>~</td><td>逻辑非运算</td><td>整型、char</td><td>整型</td><td>~a</td></tr><tr><td>&</td><td>逻辑与运算</td><td>整型、char</td><td>整型</td><td>a&b</td></tr><tr><td>|</td><td>逻辑或运算</td><td>整型、char</td><td>整型</td><td>a|b</td></tr><tr><td><<</td><td>位左移运算</td><td>整型、char</td><td>整型</td><td>         a <<2 < td><!--2--></td></tr><tr><td>>></td><td>位右移运算</td><td>整型、char</td><td>整型</td><td> a>>2 </td></tr></tbody></table><h3 id="01-位逻辑与运算：-amp"><a href="#01-位逻辑与运算：-amp" class="headerlink" title="01 位逻辑与运算：&"></a>01 位逻辑与运算：&</h3><p>& 与运算是将两个运算对象按位于进行与运算。规则是：</p><pre><code>1&1=10&1=00&0=0</code></pre><p>如图：</p><p><a href="/2020/02/26/%E4%BD%8D%E8%BF%90%E7%AE%97%E4%B8%8E%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97/1.png" data-fancybox="group" data-caption="位逻辑与" class="fancybox"><img alt="位逻辑与" title="位逻辑与" data-src="/2020/02/26/%E4%BD%8D%E8%BF%90%E7%AE%97%E4%B8%8E%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97/1.png" class="lazyload"></a></p><p>15的二进制是(ps：16位int，32位int多打16个0浪费流量)</p><pre><code>0000000000001111</code></pre><p>20的二进制是</p><pre><code>0000000000010100</code></pre><p>15&20的结果是4</p><pre><code>00000000000011110000000000010100结果：0000000000000100</code></pre><h3 id="02-位逻辑或运算"><a href="#02-位逻辑或运算" class="headerlink" title="02 位逻辑或运算"></a>02 位逻辑或运算</h3><p>| 位逻辑或运算是将两个运算对象按位进行或运算，运算的规则是：</p><pre><code>1|1=11|0=10|0=0两位对比有一个1即为1</code></pre><p>如15|20的结果计算结果就是31</p><p><a href="/2020/02/26/%E4%BD%8D%E8%BF%90%E7%AE%97%E4%B8%8E%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97/2.png" data-fancybox="group" data-caption="位逻辑或" class="fancybox"><img alt="位逻辑或" title="位逻辑或" data-src="/2020/02/26/%E4%BD%8D%E8%BF%90%E7%AE%97%E4%B8%8E%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97/2.png" class="lazyload"></a></p><pre><code>00000000000011110000000000010100结果：0000000000011111</code></pre><h3 id="03-位逻辑异或运算"><a href="#03-位逻辑异或运算" class="headerlink" title="03 位逻辑异或运算: ^"></a>03 位逻辑异或运算: ^</h3><p><a href="/2020/02/26/%E4%BD%8D%E8%BF%90%E7%AE%97%E4%B8%8E%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97/3.png" data-fancybox="group" data-caption="位逻辑异或" class="fancybox"><img alt="位逻辑异或" title="位逻辑异或" data-src="/2020/02/26/%E4%BD%8D%E8%BF%90%E7%AE%97%E4%B8%8E%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97/3.png" class="lazyload"></a></p><p>^位逻辑异或运算 是将两个运算对象按位进行异或运算，规则是：</p><pre><code>1异或1等于01异或0等于10异或0等于0</code></pre><p>即：相同得0，相异得1。15^20= 27(0001 1011)</p><pre><code>00001111（15）00010100（20）^运算后的结果00011011（27）</code></pre><h3 id="04-位逻辑左移运算-lt-lt"><a href="#04-位逻辑左移运算-lt-lt" class="headerlink" title="04.位逻辑左移运算<<"></a>04.位逻辑左移运算<<</h3><p><a href="/2020/02/26/%E4%BD%8D%E8%BF%90%E7%AE%97%E4%B8%8E%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97/4.png" data-fancybox="group" data-caption="位逻辑左移运算" class="fancybox"><img alt="位逻辑左移运算" title="位逻辑左移运算" data-src="/2020/02/26/%E4%BD%8D%E8%BF%90%E7%AE%97%E4%B8%8E%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97/4.png" class="lazyload"></a></p><p><<位逻辑左移运算是将按位向左边移动若干位，左移后空出的部分为0。</p><p>比如15的二进制0000 1111 左移8位就是1111 0000 0000</p><pre><code>0000000000001111>> 左移8位的结果：000011110000000015<<8=3840</code></pre><p>左移3位（15<<3）就是0111 1000结果是120</p><pre><code>a<<1 =2a<<2 =4a<<3 =8</code></pre><p>结论a左移n位就是相当于a乘2的n次方。</p><h3 id="05-位逻辑右移运算-gt-gt"><a href="#05-位逻辑右移运算-gt-gt" class="headerlink" title="05 位逻辑右移运算 >>"></a>05 位逻辑右移运算 >></h3><p><a href="/2020/02/26/%E4%BD%8D%E8%BF%90%E7%AE%97%E4%B8%8E%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97/5.png" data-fancybox="group" data-caption="位逻辑右移运算" class="fancybox"><img alt="位逻辑右移运算" title="位逻辑右移运算" data-src="/2020/02/26/%E4%BD%8D%E8%BF%90%E7%AE%97%E4%B8%8E%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97/5.png" class="lazyload"></a></p><p>位逻辑右移运算是将按位向右边移动若干位，右移后空出的部分为0 比如 0000 1111（15）左移3位（15<<3）就是0000 0001（1）  </p><pre><code>00001111（15）左移3位结果是：00000001（3）</code></pre><p>右移相当于整除，右移1位相当于除以2的1次方，右移2相当于除以2的2次方。（ps：这个除法是计算机的除法，你懂得）</p><h3 id="06-位运算还能干嘛"><a href="#06-位运算还能干嘛" class="headerlink" title="06 位运算还能干嘛"></a>06 位运算还能干嘛</h3><ul><li>如将一个月的签到记录保存到1个int类型中</li><li>判断奇偶数</li><li>权限设置，增删改查4个操作，合并成一个整型</li><li>交换两个数</li><li>计算2的3次方最高效就是用位运算左移<<</li><li>计算a的b次方</li><li>一组整型数据，找出没有重复的数</li></ul><blockquote><p>布莱恩特:<a href="https://mp.weixin.qq.com/s?__biz=MzIxNjIwNzQ5Mw==&mid=2649751936&idx=1&sn=07ce298a0f2339ebda1ca87de69c3fca&chksm=8f88386ab8ffb17c24bc519ed57e5426f3df1c01032b435c743f7b541b324dee5b60f0ce921a&scene=21#wechat_redirect" target="_blank" rel="noopener">《居然不知道&和&&的区别？》</a></p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> Asp.Net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Asp.Net </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6系列之箭头函数全解析</title>
      <link href="/2020/02/26/ES6%E7%B3%BB%E5%88%97%E4%B9%8B%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E5%85%A8%E8%A7%A3%E6%9E%90/"/>
      <url>/2020/02/26/ES6%E7%B3%BB%E5%88%97%E4%B9%8B%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E5%85%A8%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>ES6中允许使用箭头=>来定义箭头函数，是ES6中较受欢迎也较常使用的新增特性。本文将从箭头函数的基本语法，与普通函数对比，箭头函数不适用场景三个方面进行梳理。</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 箭头函数</span><br><span class="line">let func = (name) => {</span><br><span class="line">    // 函数体</span><br><span class="line">    return `Hello ${name}`;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">// 等同于</span><br><span class="line">let func = function (name) {</span><br><span class="line">    // 函数体</span><br><span class="line">    return `Hello ${name}`;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></div><p>从上面可以看出，定义箭头函数语法上要比普通函数简洁得多。箭头函数省去了function关键字，采用箭头=>来定义函数。函数的参数放在=>前面的括号中，函数体跟在=>后的花括号中，箭头函数在参数和箭头之间不能换行。</p><h3 id="箭头函数的参数"><a href="#箭头函数的参数" class="headerlink" title="箭头函数的参数"></a>箭头函数的参数</h3><ol><li>如果箭头函数没有参数，直接写一个空括号即可。  </li><li>如果箭头函数的参数只有一个，可以省略包裹参数的括号。  </li><li>如果箭头函数有多个参数，将参数依次用逗号分隔，参数必须被包裹在括号中。  </li></ol><h3 id="箭头函数的函数体"><a href="#箭头函数的函数体" class="headerlink" title="箭头函数的函数体"></a>箭头函数的函数体</h3><p>如果箭头函数的函数体只有一句代码，即返回某个变量或者返回一个简单的JS表达式，可以省去函数体的大括号{ }。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let func = val => val;</span><br><span class="line">// 等同于</span><br><span class="line">let func = function (val) { return val };</span><br><span class="line"></span><br><span class="line">let sum = (num1, num2) => num1 + num2;</span><br><span class="line">// 等同于</span><br><span class="line">let sum = function(num1, num2) {</span><br><span class="line">  return num1 + num2;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">let mulFunction = (num1, num2 ,num3) => num1 * num2 * num3;</span><br><span class="line">// 等同于</span><br><span class="line">let mulFunction = function(num1, num2 ,num3) {</span><br><span class="line">    return num1 * num2 * num3;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="箭头函数返回一个对象"><a href="#箭头函数返回一个对象" class="headerlink" title="箭头函数返回一个对象"></a>箭头函数返回一个对象</h3><p>如果箭头函数的函数体只有一句代码且返回一个对象（对象字面量）时，直接写一个表达式是不行的。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let func = () => { foo: 1 }; </span><br><span class="line">console.log(func()); // 执行后返回undefined</span><br><span class="line"></span><br><span class="line">// 如果是这样还会直接报错</span><br><span class="line">let func = () => { foo: 1, bar: 2 };</span><br></pre></td></tr></tbody></table></figure></div><p>原因是花括号被解释为函数体的大括号，解决办法：用圆括号把对象字面量包起来</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let func = () => ({ foo: 1 });</span><br><span class="line">console.log(func()); // {foo: 1}</span><br><span class="line"></span><br><span class="line">// 不过上面那样解决的缺点是可读性变差了，所以更推荐直接当成多条语句的形式来写，可读性高  </span><br><span class="line">let func = () => {</span><br><span class="line">    return {</span><br><span class="line">        foo: 1</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="简化回调函数"><a href="#简化回调函数" class="headerlink" title="简化回调函数"></a>简化回调函数</h3><p>这是箭头函数比较常见的用法</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 普通函数写法</span><br><span class="line">[1, 2, 3, 4].map(function (x) {</span><br><span class="line">    return x * x;</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">let result = [5, 4, 1, 3, 2].sort(function (a, b) {</span><br><span class="line">    return a - b;</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">// 箭头函数写法</span><br><span class="line">[1, 2, 3, 4].map(x => x * x);</span><br><span class="line"></span><br><span class="line">let result = [5, 4, 1, 3, 2].sort((a, b) => a - b);</span><br></pre></td></tr></tbody></table></figure></div><h2 id="跟普通函数的区别"><a href="#跟普通函数的区别" class="headerlink" title="跟普通函数的区别"></a>跟普通函数的区别</h2><h3 id="1-没有this绑定"><a href="#1-没有this绑定" class="headerlink" title="1.没有this绑定"></a>1.没有this绑定</h3><p>箭头函数没有自己的this，它会捕获自己在定义时）所处的外层执行环境的this，并继承这个this值。所以，箭头函数中this的指向在它被定义的时候就已经确定了，之后永远不会改变。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const obj = {</span><br><span class="line">a: function() { console.log(this) }    </span><br><span class="line">}</span><br><span class="line">obj.a();  // 打印结果：obj对象</span><br><span class="line"></span><br><span class="line">const obj = {</span><br><span class="line">a:() => {</span><br><span class="line">        console.log(this);</span><br><span class="line">    }    </span><br><span class="line">}</span><br><span class="line">obj.a();  // 打印结果： Window对象</span><br></pre></td></tr></tbody></table></figure></div><p>上述代码中，箭头函数与外层的this保持一致，最外层的this就是Window对象。</p><h3 id="2-没有arguments"><a href="#2-没有arguments" class="headerlink" title="2.没有arguments"></a>2.没有arguments</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function func1(a, b) {</span><br><span class="line">    console.log(arguments);</span><br><span class="line">}</span><br><span class="line">let func2 = (a, b) => {</span><br><span class="line">    console.log(arguments);</span><br><span class="line">}</span><br><span class="line">func1(1, 2); // Arguments(2) [1, 2, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span><br><span class="line">func2(1, 2); // Uncaught ReferenceError: arguments is not defined</span><br></pre></td></tr></tbody></table></figure></div><p>如果非要打印函数参数，可以在箭头函数中使用rest参数代替arguments对象</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let func2 = (...rest) => {</span><br><span class="line">    console.log(rest); // (2) [1, 2]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="3-不能通过-new-关键字调用"><a href="#3-不能通过-new-关键字调用" class="headerlink" title="3.不能通过 new 关键字调用"></a>3.不能通过 new 关键字调用</h3><p>在构造函数中，this指向新创建的对象实例</p><p>而箭头函数没有 [[Construct]]方法，箭头函数不可以当作构造函数，如果这样做会抛出异常</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var Person = (name) => {</span><br><span class="line">    this.name = name;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// Uncaught TypeError: Person is not a constructor</span><br><span class="line">var person = new Person('jacky');</span><br></pre></td></tr></tbody></table></figure></div><p>箭头函数在创建时this对象就绑定了，故不会指向对象实例。</p><h3 id="4-没有-new-target"><a href="#4-没有-new-target" class="headerlink" title="4.没有 new.target"></a>4.没有 new.target</h3><p>new.target是ES6新引入的属性，普通函数如果通过new调用，new.target会返回该函数的引用。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function Cat() {</span><br><span class="line">    console.log(new.target); </span><br><span class="line">}</span><br><span class="line">let cat = new Cat(); // ƒ Cat() { console.log(new.target); }</span><br></pre></td></tr></tbody></table></figure></div><p>此属性主要：用于确定构造函数是否为new调用的。</p><p>箭头函数的this指向全局对象，在箭头函数中使用箭头函数会报错。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 普通函数</span><br><span class="line">let a = function() {</span><br><span class="line">    console.log(new.target);</span><br><span class="line">}</span><br><span class="line">a(); // undefined</span><br><span class="line"></span><br><span class="line">// 箭头函数</span><br><span class="line">let b = () => {</span><br><span class="line">    console.log(new.target); // 报错：Uncaught SyntaxError: new.target expression is not allowed here</span><br><span class="line">};</span><br><span class="line">b();</span><br></pre></td></tr></tbody></table></figure></div><h3 id="5-没有原型"><a href="#5-没有原型" class="headerlink" title="5.没有原型"></a>5.没有原型</h3><p>由于不能通过 new 关键字调用，不能作为构造函数，所以箭头函数不存在 prototype 这个属性。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let func = () => {};</span><br><span class="line">console.log(func.prototype) // undefined</span><br></pre></td></tr></tbody></table></figure></div><h3 id="6-没有-super"><a href="#6-没有-super" class="headerlink" title="6.没有 super"></a>6.没有 super</h3><p>箭头函数没有原型，故也不能通过 super 来访问原型的属性，所以箭头函数也是没有 super 的。同this、arguments、new.target 一样，这些值由外围最近一层非箭头函数决定。</p><h3 id="7-call-apply-bind方法无法改变箭头函数中this的指向"><a href="#7-call-apply-bind方法无法改变箭头函数中this的指向" class="headerlink" title="7.call/apply/bind方法无法改变箭头函数中this的指向"></a>7.call/apply/bind方法无法改变箭头函数中this的指向</h3><p>call()、apply()、bind()方法的共同特点是可以改变this的指向，用来动态修改函数执行时this的指向。但由于箭头函数的this定义时就已经确定了且不会改变。所以这三个方法永远也改变不了箭头函数this的指向。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var name = 'global name';</span><br><span class="line">var obj = {</span><br><span class="line">    name: 'jacky'</span><br><span class="line">}</span><br><span class="line">// 箭头函数定义在全局作用域</span><br><span class="line">let func = () => {</span><br><span class="line">    console.log(this.name);</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">func();     // global name</span><br><span class="line">// this的指向不会改变，永远指向Window对象,放到到window下的全局变量</span><br><span class="line">func.call(obj);     // global name</span><br><span class="line">func.apply(obj);    // global name</span><br><span class="line">func.bind(obj)();   // global name</span><br></pre></td></tr></tbody></table></figure></div><h3 id="8-箭头函数的解析顺序相对靠前"><a href="#8-箭头函数的解析顺序相对靠前" class="headerlink" title="8.箭头函数的解析顺序相对靠前"></a>8.箭头函数的解析顺序相对靠前</h3><p>虽然箭头函数中的箭头不是运算符，但箭头函数具有与常规函数不同的特殊运算符优先级解析规则。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let callback;</span><br><span class="line"></span><br><span class="line">callback = callback || function() {}; // ok</span><br><span class="line"></span><br><span class="line">callback = callback || () => {};      </span><br><span class="line">// SyntaxError:非法箭头函数属性</span><br><span class="line"></span><br><span class="line">callback = callback || (() => {});    // ok</span><br></pre></td></tr></tbody></table></figure></div><h3 id="9-箭头函数不支持重名参数"><a href="#9-箭头函数不支持重名参数" class="headerlink" title="9.箭头函数不支持重名参数"></a>9.箭头函数不支持重名参数</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function foo(a, a) {</span><br><span class="line">    console.log(a, arguments); // 2 Arguments(2) [1, 2, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">var boo = (a, a) => { // 直接报错：Uncaught SyntaxError: Duplicate parameter name not allowed in this context</span><br><span class="line">    console.log(a);</span><br><span class="line">};</span><br><span class="line">foo(1, 2);</span><br><span class="line">boo(1, 2);</span><br></pre></td></tr></tbody></table></figure></div><h3 id="10-使用-yield-关键字"><a href="#10-使用-yield-关键字" class="headerlink" title="10.使用 yield 关键字"></a>10.使用 yield 关键字</h3><p>yield 关键字通常不能在箭头函数中使用（除非是嵌套在允许使用的函数内）。因此，箭头函数不能用作生成器（ Generator ）。</p><h2 id="箭头函数不适用的场景"><a href="#箭头函数不适用的场景" class="headerlink" title="箭头函数不适用的场景"></a>箭头函数不适用的场景</h2><p>1.不应被用在定义对象的方法上</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var obj = {</span><br><span class="line">  x: 10,</span><br><span class="line">  b: function() {</span><br><span class="line">    console.log( this.x, this)</span><br><span class="line">  },</span><br><span class="line">  c: () => console.log(this.x, this)</span><br><span class="line">}</span><br><span class="line">obj.b(); // 10  {x: 10, b: ƒ, c: ƒ}</span><br><span class="line"></span><br><span class="line">obj.c(); // undefined Window</span><br></pre></td></tr></tbody></table></figure></div><p>因为它内部this的指向原因，当使用obj.c()的时候，我们希望c方法里面的this指向obj，但是它却指向了obj所在上下文中的this（即window），违背了我们的需求，所以箭头函数不适合作为对象的方法。</p><p>2.具有动态上下文的回调函数，也不应使用箭头函数</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var btn = document.getElementById('btn');</span><br><span class="line">btn.addEventListener('click', () => {</span><br><span class="line">  console.log(this);</span><br><span class="line">});</span><br><span class="line">为btn的监听函数是一个箭头函数，导致里面的this就是全局对象,而不符合我们想操作按钮本身的需求。如果改成普通函数，this就会动态指向被点击的按钮对象</span><br></pre></td></tr></tbody></table></figure></div><p>除了前面两点，剩下的跟上面讲的与普通函数的区别重复了，故只作总结不贴代码了:</p><ol><li>不应被用在定义对象的方法上</li><li>具有动态上下文的回调函数，也不应使用箭头函数</li><li>不能应用在构造函数中</li><li>避免在 prototype 上使用</li><li>避免在需要 arguments 上使用</li></ol><blockquote><p>原文地址：<br>JackySummer: <a href="https://juejin.im/post/5e13e1cae51d45411c08c001" target="_blank" rel="noopener">《ES6系列之箭头函数全解析》</a></p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue性能优化指南</title>
      <link href="/2020/02/25/Vue%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97/"/>
      <url>/2020/02/25/Vue%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="一、Vue代码层面的优化"><a href="#一、Vue代码层面的优化" class="headerlink" title="一、Vue代码层面的优化"></a>一、Vue代码层面的优化</h2><h3 id="1、v-if-和-v-show-区分使用场景"><a href="#1、v-if-和-v-show-区分使用场景" class="headerlink" title="1、v-if 和 v-show 区分使用场景"></a>1、v-if 和 v-show 区分使用场景</h3><p>v-if 是 真正 的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建；也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p><p>v-show 就简单得多， 不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 的 display 属性进行切换。</p><p>应用场景：</p><ul><li>v-if 适用于在运行时很少改变条件，不需要频繁切换条件的场景；  </li><li>v-show 则适用于需要非常频繁切换条件的场景。</li></ul><h3 id="2、computed-和-watch-区分使用场景"><a href="#2、computed-和-watch-区分使用场景" class="headerlink" title="2、computed 和 watch  区分使用场景"></a>2、computed 和 watch  区分使用场景</h3><p>computed： 是计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed  的值；</p><p>watch： 更多的是「观察」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；</p><p>运用场景：</p><ul><li><p>当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；  </p></li><li><p>当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许我们执行异步操作 ( 访问一个 API )，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</p></li></ul><h3 id="3、v-for-遍历必须为-item-添加-key"><a href="#3、v-for-遍历必须为-item-添加-key" class="headerlink" title="3、v-for 遍历必须为 item 添加 key"></a>3、v-for 遍历必须为 item 添加 key</h3><p>在列表数据进行遍历渲染时，需要为每一项 item 设置唯一 key 值，方便 Vue.js 内部机制精准找到该条列表数据。当 state 更新时，新的状态值和旧的状态值对比，较快地定位到 diff 。</p><h3 id="4、v-for-遍历避免同时使用-v-if"><a href="#4、v-for-遍历避免同时使用-v-if" class="headerlink" title="4、v-for 遍历避免同时使用 v-if"></a>4、v-for 遍历避免同时使用 v-if</h3><p>v-for 比 v-if 优先级高，如果每一次都需要遍历整个数组，将会影响速度，尤其是当之需要渲染很小一部分的时候，必要情况下应该替换成 computed 属性。</p><p>推荐：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><ul><br><span class="line">  <li< span><br><span class="line">    v-for="user in activeUsers"</span><br><span class="line">    :key="user.id"></span><br><span class="line">    {{ user.name }}</span><br><span class="line">  </span><br><span class="line"></span></li<></span></ul></span><br><span class="line">computed: {</span><br><span class="line">  activeUsers: function () {</span><br><span class="line">    return this.users.filter(function (user) {</span><br><span class="line">   return user.isActive</span><br><span class="line">    })</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>不推荐：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><ul><br><span class="line">  <li< span><br><span class="line">    v-for="user in users"</span><br><span class="line">    v-if="user.isActive"</span><br><span class="line">    :key="user.id"></span><br><span class="line">    {{ user.name }}</span><br><span class="line">  </span><br><span class="line"></span></li<></span></ul></span><br></pre></td></tr></tbody></table></figure></div><h3 id="5、长列表性能优化"><a href="#5、长列表性能优化" class="headerlink" title="5、长列表性能优化"></a>5、长列表性能优化</h3><p>Vue 会通过 Object.defineProperty 对数据进行劫持，来实现视图响应数据的变化，然而有些时候我们的组件就是纯粹的数据展示，不会有任何改变，我们就不需要 Vue 来劫持我们的数据，在大量数据展示的情况下，这能够很明显的减少组件初始化的时间，那如何禁止 Vue 劫持我们的数据呢？可以通过 Object.freeze 方法来冻结一个对象，一旦被冻结的对象就再也不能被修改了。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  data: () => ({</span><br><span class="line">    users: {}</span><br><span class="line">  }),</span><br><span class="line">  async created() {</span><br><span class="line">    const users = await axios.get("/api/users");</span><br><span class="line">    this.users = Object.freeze(users);</span><br><span class="line">  }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></div><h3 id="6、事件的销毁"><a href="#6、事件的销毁" class="headerlink" title="6、事件的销毁"></a>6、事件的销毁</h3><p>Vue 组件销毁时，会自动清理它与其它实例的连接，解绑它的全部指令及事件监听器，但是仅限于组件本身的事件。如果在 js 内使用 addEventListene 等方式是不会自动销毁的，我们需要在组件销毁时手动移除这些事件的监听，以免造成内存泄露，如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">created() {</span><br><span class="line">  addEventListener('click', this.click, false)</span><br><span class="line">},</span><br><span class="line">beforeDestroy() {</span><br><span class="line">  removeEventListener('click', this.click, false)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="7、图片资源懒加载"><a href="#7、图片资源懒加载" class="headerlink" title="7、图片资源懒加载"></a>7、图片资源懒加载</h3><p>对于图片过多的页面，为了加速页面加载速度，所以很多时候我们需要将页面内未出现在可视区域内的图片先不做加载， 等到滚动到可视区域后再去加载。这样对于页面加载性能上会有很大的提升，也提高了用户体验。</p><h3 id="8、路由懒加载"><a href="#8、路由懒加载" class="headerlink" title="8、路由懒加载"></a>8、路由懒加载</h3><p>Vue  是单页面应用，可能会有很多的路由引入 ，这样使用 webpcak 打包后的文件很大，当进入首页时，加载的资源过多，页面会出现白屏的情况，不利于用户体验。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应的组件，这样就更加高效了。这样会大大提高首屏显示的速度，但是可能其他的页面的速度就会降下来。</p><p>路由懒加载：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const Foo = () => import('./Foo.vue')</span><br><span class="line">const router = new VueRouter({</span><br><span class="line">  routes: [</span><br><span class="line">    { path: '/foo', component: Foo }</span><br><span class="line">  ]</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></div><h3 id="9、第三方插件的按需引入"><a href="#9、第三方插件的按需引入" class="headerlink" title="9、第三方插件的按需引入"></a>9、第三方插件的按需引入</h3><p>我们在项目中经常会需要引入第三方插件，如果我们直接引入整个插件，会导致项目的体积太大，我们可以借助 babel-plugin-component ，然后可以只引入需要的组件，以达到减小项目体积的目的。</p><h3 id="10、优化无限列表性能"><a href="#10、优化无限列表性能" class="headerlink" title="10、优化无限列表性能"></a>10、优化无限列表性能</h3><p>如果你的应用存在非常长或者无限滚动的列表，那么需要采用 窗口化 的技术来优化性能，只需要渲染少部分区域的内容，减少重新渲染组件和创建 dom 节点的时间。你可以参考以下开源项目 vue-virtual-scroll-list 和 vue-virtual-scroller  来优化这种无限列表的场景的。</p><h3 id="11、服务端渲染-SSR-or-预渲染"><a href="#11、服务端渲染-SSR-or-预渲染" class="headerlink" title="11、服务端渲染 SSR or 预渲染"></a>11、服务端渲染 SSR or 预渲染</h3><p>服务端渲染是指 Vue 在客户端将标签渲染成的整个 html 片段的工作在服务端完成，服务端形成的 html 片段直接返回给客户端这个过程就叫做服务端渲染。</p><p>（1）服务端渲染的优点：  </p><ul><li><p>更好的 SEO：因为 SPA 页面的内容是通过 Ajax 获取，而搜索引擎爬取工具并不会等待 Ajax 异步完成后再抓取页面内容，所以在 SPA 中是抓取不到页面通过 Ajax 获取到的内容；而 SSR 是直接由服务端返回已经渲染好的页面（数据已经包含在页面中），所以搜索引擎爬取工具可以抓取渲染好的页面；</p></li><li><p>更快的内容到达时间（首屏加载更快）：SPA 会等待所有 Vue 编译后的 js 文件都下载完成后，才开始进行页面的渲染，文件下载等需要一定的时间等，所以首屏渲染需要一定的时间；SSR 直接由服务端渲染好页面直接返回显示，无需等待下载 js 文件及再去渲染等，所以 SSR 有更快的内容到达时间；</p></li></ul><p>（2）服务端渲染的缺点：</p><ul><li><p>更多的开发条件限制：例如服务端渲染只支持 beforCreate 和 created 两个钩子函数，这会导致一些外部扩展库需要特殊处理，才能在服务端渲染应用程序中运行；并且与可以部署在任何静态文件服务器上的完全静态单页面应用程序 SPA 不同，服务端渲染应用程序，需要处于 Node.js server 运行环境；</p></li><li><p>更多的服务器负载：在 Node.js 中渲染完整的应用程序，显然会比仅仅提供静态文件的 server 更加大量占用CPU 资源，因此如果你预料在高流量环境下使用，请准备相应的服务器负载，并明智地采用缓存策略。  </p></li></ul><p>如果你的项目的 SEO 和 首屏渲染是评价项目的关键指标，那么你的项目就需要服务端渲染来帮助你实现最佳的初始加载性能和 SEO，具体的 Vue SSR 如何实现，可以参考作者的另一篇文章《Vue SSR 踩坑之旅》。</p><p>如果你的 Vue 项目只需改善少数营销页面（例如  <code>/， /about， /contact</code> 等）的 SEO，那么你可能需要预渲染，在构建时 (build time) 简单地生成针对特定路由的静态 HTML 文件。优点是设置预渲染更简单，并可以将你的前端作为一个完全静态的站点，具体你可以使用 <code>prerender-spa-plugin</code> 就可以轻松地添加预渲染 。</p><h2 id="二、webpack-配置层面的优化"><a href="#二、webpack-配置层面的优化" class="headerlink" title="二、webpack 配置层面的优化"></a>二、webpack 配置层面的优化</h2><h3 id="1、Webpack-对图片进行压缩"><a href="#1、Webpack-对图片进行压缩" class="headerlink" title="1、Webpack 对图片进行压缩"></a>1、Webpack 对图片进行压缩</h3><p>在 vue 项目中除了可以在 webpack.base.conf.js 中 url-loader 中设置 limit 大小来对图片处理，对小于 limit 的图片转化为 base64 格式，其余的不做操作。所以对有些较大的图片资源，在请求资源的时候，加载会很慢，我们可以用 image-webpack-loader来压缩图片：</p><p>（1）首先，安装 image-webpack-loader  ：</p><pre><code>npm install image-webpack-loader --save-dev</code></pre><p>（2）然后，在 webpack.base.conf.js  中进行配置：<code>image-webpack-loader</code></p><h3 id="2、减少-ES6-转为-ES5-的冗余代码"><a href="#2、减少-ES6-转为-ES5-的冗余代码" class="headerlink" title="2、减少 ES6 转为 ES5 的冗余代码"></a>2、减少 ES6 转为 ES5 的冗余代码</h3><p>（1）首先，安装 babel-plugin-transform-runtime ：</p><pre><code>npm install babel-plugin-transform-runtime --save-dev</code></pre><p>（2）然后，修改 .babelrc  配置文件为：</p><pre><code>"plugins": ["transform-runtime"]</code></pre><h3 id="3、提取公共代码"><a href="#3、提取公共代码" class="headerlink" title="3、提取公共代码"></a>3、提取公共代码</h3><h2 id="三、基础的-Web-技术层面的优化"><a href="#三、基础的-Web-技术层面的优化" class="headerlink" title="三、基础的 Web 技术层面的优化"></a>三、基础的 Web 技术层面的优化</h2><h3 id="1、开启-gzip-压缩"><a href="#1、开启-gzip-压缩" class="headerlink" title="1、开启 gzip 压缩"></a>1、开启 gzip 压缩</h3><ul><li><p>安装：<br>  npm install compression –save</p></li><li><p>添加代码逻辑：</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var compression = require('compression');</span><br><span class="line">var app = express();</span><br><span class="line">app.use(compression())</span><br></pre></td></tr></tbody></table></figure></div><ul><li>重启服务，观察网络面板里面的 response header，如果看到<code>Content-Encoding:gzip</code> 则表明 gzip 开启成功 ：</li></ul><h3 id="2、浏览器缓存"><a href="#2、浏览器缓存" class="headerlink" title="2、浏览器缓存"></a>2、浏览器缓存</h3><p>为了提高用户加载页面的速度，对静态资源进行缓存是非常必要的，根据是否需要重新向服务器发起请求来分类，将 HTTP 缓存规则分为两大类（强制缓存，对比缓存），如果对缓存机制还不是了解很清楚的，可以参考作者写的关于 HTTP 缓存的文章《深入理解HTTP缓存机制及原理》，这里不再赘述。</p><h3 id="3、CDN-的使用"><a href="#3、CDN-的使用" class="headerlink" title="3、CDN 的使用"></a>3、CDN 的使用</h3><p>浏览器从服务器上下载 CSS、js 和图片等文件时都要和服务器连接，而大部分服务器的带宽有限，如果超过限制，网页就半天反应不过来。而 CDN 可以通过不同的域名来加载文件，从而使下载文件的并发连接数大大增加，且CDN 具有更好的可用性，更低的网络延迟和丢包率 。</p><h3 id="4、使用-Chrome-Performance-查找性能瓶颈"><a href="#4、使用-Chrome-Performance-查找性能瓶颈" class="headerlink" title="4、使用 Chrome Performance 查找性能瓶颈"></a>4、使用 Chrome Performance 查找性能瓶颈</h3><p>Chrome 的 Performance 面板可以录制一段时间内的 js 执行细节及时间。使用 Chrome 开发者工具分析页面性能的步骤如下。</p><ol><li><p>打开 Chrome 开发者工具，切换到 Performance 面板</p></li><li><p>点击 Record 开始录制</p></li><li><p>刷新页面或展开某个节点</p></li><li><p>点击 Stop 停止录制</p></li></ol><blockquote><p>原文地址：<br><a href="https://mp.weixin.qq.com/s?__biz=MzIyMjQ0MTU0NA==&mid=2247494339&idx=3&sn=99db2bb39de4dc6f17f61fe60b180f71&chksm=e82fd3e4df585af2ffb05e507d7f5ad17d1152ad9dce35f242b5318c965019bc5475a9f6141e&mpshare=1&scene=1&srcid=&sharer_sharetime=1581231718358&sharer_shareid=b105a99d0b987865d2122100dce7799a&key=5440b516a3b776b7baca0b3fbfe50ff75924b841ff2a9bb1a765091a6bd5b41220f802214d70f439a94fa1a9320926922cf461d5d9e357ced52ed7b7930158fa2e06ab6d3817c9782e33f152997a10da&ascene=1&uin=MjM2MzIxNjY3Nw%3D%3D&devicetype=Windows+10&version=62080079&lang=zh_CN&exportkey=Aav6rLjgEf%2BC4p1t290g2rU%3D&pass_ticket=ovqmRYnNK82rYmnkER8Wpxc7sni74Fh4B3sELEzyTSTRbRzLjF0yEWz3fUQd8shA" target="_blank" rel="noopener">《最全的 Vue 性能优化指南，经典收藏》</a></p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始部署Kubernetes</title>
      <link href="/2020/02/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E9%83%A8%E7%BD%B2Kubernetes/"/>
      <url>/2020/02/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E9%83%A8%E7%BD%B2Kubernetes/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="从零开始部署Kubernetes-v1-17-1集群"><a href="#从零开始部署Kubernetes-v1-17-1集群" class="headerlink" title="从零开始部署Kubernetes v1.17.1集群"></a>从零开始部署Kubernetes v1.17.1集群</h2><h3 id="一、系统环境"><a href="#一、系统环境" class="headerlink" title="一、系统环境"></a>一、系统环境</h3><ul><li>操作系统：Centos 7.7</li><li>客户端电脑：macOS Catalina 10.15</li><li>虚拟机：Virtualbox 6.0</li><li>虚拟机网卡：桥接方式</li></ul><h3 id="二、配置虚拟机"><a href="#二、配置虚拟机" class="headerlink" title="二、配置虚拟机"></a>二、配置虚拟机</h3><h3 id="三、安装Centos-7"><a href="#三、安装Centos-7" class="headerlink" title="三、安装Centos 7"></a>三、安装Centos 7</h3><h3 id="四、配置网络"><a href="#四、配置网络" class="headerlink" title="四、配置网络"></a>四、配置网络</h3><h3 id="五、更新系统"><a href="#五、更新系统" class="headerlink" title="五、更新系统"></a>五、更新系统</h3><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><blockquote><p>参考资料：<br><a href="https://www.jianshu.com/c/dcf0959a8fc5" target="_blank" rel="noopener">《从零开始部署Kubernetes v1.17.1集群系列》</a></p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 微服务 </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker镜像仓库搭建</title>
      <link href="/2020/02/25/Docker%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/02/25/Docker%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="Docker镜像仓库的搭建"><a href="#Docker镜像仓库的搭建" class="headerlink" title="Docker镜像仓库的搭建"></a>Docker镜像仓库的搭建</h2><h3 id="一、Registry私有镜像仓库"><a href="#一、Registry私有镜像仓库" class="headerlink" title="一、Registry私有镜像仓库"></a>一、Registry私有镜像仓库</h3><h3 id="二、Docker-Hub公共镜像仓库"><a href="#二、Docker-Hub公共镜像仓库" class="headerlink" title="二、Docker Hub公共镜像仓库"></a>二、Docker Hub公共镜像仓库</h3><h3 id="三、Harbor企业级镜像仓库"><a href="#三、Harbor企业级镜像仓库" class="headerlink" title="三、Harbor企业级镜像仓库"></a>三、Harbor企业级镜像仓库</h3><blockquote><p>参考资料：<br>周旭龙:<a href="https://www.cnblogs.com/edisonchou/p/docker_registry_repository_setup_introduction.html" target="_blank" rel="noopener">《你必须知道的Docker镜像仓库的搭建》</a>   </p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
            <tag> NetCore </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Asp.Net on Docker</title>
      <link href="/2020/02/25/Asp-Net-on-Docker/"/>
      <url>/2020/02/25/Asp-Net-on-Docker/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="ASP-NET-Core-on-Docker"><a href="#ASP-NET-Core-on-Docker" class="headerlink" title="ASP.NET Core on Docker"></a>ASP.NET Core on Docker</h2><h3 id="一、Docker极简介绍"><a href="#一、Docker极简介绍" class="headerlink" title="一、Docker极简介绍"></a>一、Docker极简介绍</h3><h4 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1.基本介绍"></a>1.基本介绍</h4><p>Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。</p><p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p><p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p><h4 id="2-Docker的应用场景"><a href="#2-Docker的应用场景" class="headerlink" title="2.Docker的应用场景"></a>2.Docker的应用场景</h4><ul><li>Web 应用的自动化打包和发布。</li><li>自动化测试和持续集成、发布。</li><li>在服务型环境中部署和调整数据库或其他的后台应用。</li><li>从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境。</li></ul><h4 id="3-Docker-的优点"><a href="#3-Docker-的优点" class="headerlink" title="3.Docker 的优点"></a>3.Docker 的优点</h4><p>Docker 是一个用于开发，交付和运行应用程序的开放平台。<br>Docker 使您能够将应用程序与基础架构分开，从而可以快速交付软件。<br>借助 Docker，您可以与管理应用程序相同的方式来管理基础架构。<br>通过利用 Docker 的方法来快速交付，测试和部署代码，您可以大大减少编写代码和在生产环境中运行代码之间的延迟。</p><ol><li>快速，一致地交付您的应用程序</li><li>响应式部署和扩展</li><li>在同一硬件上运行更多工作负载</li></ol><h3 id="二、Docker-架构"><a href="#二、Docker-架构" class="headerlink" title="二、Docker 架构"></a>二、Docker 架构</h3><h4 id="Docker-包括三个基本概念"><a href="#Docker-包括三个基本概念" class="headerlink" title="Docker 包括三个基本概念:"></a>Docker 包括三个基本概念:</h4><ul><li>镜像（Image）：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</li><li>容器（Container）：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</li><li>仓库（Repository）：仓库可看着一个代码控制中心，用来保存镜像。</li></ul><p>Docker 使用客户端-服务器 (C/S) 架构模式，使用远程API来管理和创建Docker容器。</p><p>Docker 容器通过 Docker 镜像来创建。</p><p>容器与镜像的关系类似于面向对象编程中的对象与类。</p><h3 id="三、Docker的安装"><a href="#三、Docker的安装" class="headerlink" title="三、Docker的安装"></a>三、Docker的安装</h3><h4 id="以centos为例："><a href="#以centos为例：" class="headerlink" title="以centos为例："></a>以centos为例：</h4><p>1.安装环境，查看Centos版本      </p><pre><code>lsb_release -a</code></pre><p>ps: 命令不存在请执行<code>yum install -y redhat-lsb</code> 进行安装  </p><p>CentOS 7安装docker要求系统为64位、系统内核版本为 3.10 以上，用以下命令查看位数</p><pre><code>uname -r</code></pre><p>2.yum源安装  </p><p>2.1  查看是否已安装docker列表  </p><pre><code>yum list installed | grep docker</code></pre><p>2.2 安装docker  </p><pre><code>yum -y install docker</code></pre><p>ps: -y表示不询问安装，直到安装成功，安装完后再次查看安装列表</p><p>2.3 执行 <code>yum list install | grep docker</code> 查看</p><p>2.4 启动docker</p><pre><code>systemctl start docker</code></pre><p>2.5 设置开机启动</p><pre><code>systemctl enable docker.service</code></pre><p>2.6  查看docker服务状态</p><pre><code>systemctl status docker</code></pre><p>2.7 配置docker加速器<br>执行命令： <code>vim /etc/docker/daemon.json</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">{</span><br><span class="line">"registry-mirrors": ["https://d8b3zdiw.mirror.aliyuncs.com"]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>2.8 重启docker服务</p><pre><code>systemctl daemon-reloadsystemctl restart docker</code></pre><h3 id="四、ASP-NET-Core-on-Docker配置"><a href="#四、ASP-NET-Core-on-Docker配置" class="headerlink" title="四、ASP.NET Core on Docker配置"></a>四、ASP.NET Core on Docker配置</h3><p>1 拉取dotnet/aspnetcore的最新镜像</p><pre><code>docker pull microsoft/aspnetcore:latest</code></pre><p>2 <code>docker images</code> 验证镜像是否拉取成功</p><p>3 本地vs 编辑 dockerfile 文件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 父镜像</span><br><span class="line">FROM microsoft/aspnetcore:3.1</span><br><span class="line"></span><br><span class="line"># 设置工作目录</span><br><span class="line">WORKDIR /app</span><br><span class="line"></span><br><span class="line"># 复制发布文件到/app下</span><br><span class="line">COPY . /app</span><br><span class="line"></span><br><span class="line"># 设置端口</span><br><span class="line">EXPOSE 8810</span><br><span class="line"></span><br><span class="line"># 使用dotnet HelloWebApp.dll来运行ASP.NET Core项目，注意大小写</span><br><span class="line"></span><br><span class="line">ENTRYPOINT ["dotnet", "HelloWebApp.dll", "--server.urls", "http://*:8810"]</span><br></pre></td></tr></tbody></table></figure></div><p>4 发布这个ASP.NET Core WebAPI，并将Release文件传送到Linux服务器中</p><p>5 在linux命令端 执行 <code>cd Release文件夹</code> ，开始打包docker镜像，执行以下命令</p><pre><code>docker build -t agentservice-container:1.0 . </code></pre><p>ps：注意命令末尾<code>.</code>,<code>:1.0</code> 表示给该镜像打标记，1.0版本</p><p>6 验证镜像是否打包成功</p><pre><code>docker images</code></pre><p>7 运行docker</p><pre><code>docker run --name agentservice -d -p 8810:8810 agentservice-container:1.0</code></pre><p>ps: 如果docker run失败后再次运行会提示名称已存在，可以使用以下命令来删除容器 <code>docker rm -f [dockername]</code></p><p>如果想要docker容器在非正常退出后自动重启，可以加上–restart选项 <code>docker run --name agentservice -d -p 8810:8810 agentservice-container:1.0 --restart=always</code></p><p>8 验证docker运行效果</p><p>可以在宿主机验证，执行以下命令：</p><pre><code>curl http://192.168.120.136:8801/api</code></pre><p>远程客户端浏览器验证</p><pre><code>http://192.168.120.136:8801/api</code></pre><h3 id="五、Supervisor守护进程"><a href="#五、Supervisor守护进程" class="headerlink" title="五、Supervisor守护进程"></a>五、Supervisor守护进程</h3><p>1 安装</p><pre><code>yum install supervisor</code></pre><p>2 配置</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 进入配置目录</span><br><span class="line">cd /ect/supervisor/conf.d/</span><br><span class="line"># 创建配置文件</span><br><span class="line">touch HelloWebApp.conf</span><br><span class="line">## 编辑配置文件</span><br><span class="line">vim HelloWebApp.conf</span><br><span class="line">## 写入以下命令</span><br><span class="line">[program:HelloWebApp]</span><br><span class="line">command=dotnet HelloWebApp.dll  #要执行的命令</span><br><span class="line">directory=/home/yxd/Workspace/publish #命令执行的目录</span><br><span class="line">environment=ASPNETCORE__ENVIRONMENT=Production #环境变量</span><br><span class="line">user=www-data  #进程执行的用户身份</span><br><span class="line">stopsignal=INT</span><br><span class="line">autostart=true #是否自动启动</span><br><span class="line">autorestart=true #是否自动重启</span><br><span class="line">startsecs=1 #自动重启间隔</span><br><span class="line">stderr_logfile=/var/log/HelloWebApp.err.log #标准错误日志</span><br><span class="line">stdout_logfile=/var/log/HelloWebApp.out.log #标准输出日志</span><br><span class="line"></span><br><span class="line">## 保存退出</span><br><span class="line">:wq</span><br></pre></td></tr></tbody></table></figure></div><p>3 重新加载配置  </p><pre><code>supervisorctl shutdown && sudo supervisord -c /etc/supervisor/supervisord.conf</code></pre><p>或者直接重启Supervisor</p><pre><code>service supervisor stopservice supervisor start</code></pre><p>4 查看supervisor日志</p><pre><code>cat /etc/log/supervisor/supervisord.log</code></pre><p>5 supervisorctl使用  </p><p>通过supervisorctl对进程进行管理： <code>supervisorctl help</code></p><p>6 Supervisor UI 管理台 </p><p><code>http://localip:9001</code>，可以进行进程的重启，日志查看等操作</p><p>7 多主机统一管理</p><blockquote><p>官方推荐：<a href="http://supervisord.org/plugins.html" target="_blank" rel="noopener">http://supervisord.org/plugins.html</a><br><a href="https://github.com/Gamegos/cesi" target="_blank" rel="noopener">cesi</a>：Web-based dashboard written in Python.<br><a href="https://github.com/mlazarov/supervisord-monitor" target="_blank" rel="noopener">Supervisord-Monitor</a>：Web-based dashboard written in PHP.<br><a href="https://github.com/luxbet/supervisorui" target="_blank" rel="noopener">SupervisorUI</a>：Another Web-based dashboard written in PHP.  </p></blockquote><blockquote><p>参考资料：<br>周旭龙:<a href="https://www.cnblogs.com/edisonchou/p/aspnetcore_on_docker_foundation.html" target="_blank" rel="noopener">《.NET Core微服务之ASP.NET Core on Docker》</a><br>杨晓东:<a href="https://www.cnblogs.com/savorboard/p/dotnetcore-supervisor.html" target="_blank" rel="noopener">《ASP.NET Core Docker部署》</a><br>菜鸟教程：<a href="https://www.runoob.com/docker/centos-docker-install.html" target="_blank" rel="noopener">《Docker 教程》</a></p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
            <tag> NetCore </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack报错记录</title>
      <link href="/2020/02/24/webpack%E6%8A%A5%E9%94%99%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/02/24/webpack%E6%8A%A5%E9%94%99%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="webpack报错：Cannot-assign-to-read-only-property-‘exports’-of-object-‘-‘"><a href="#webpack报错：Cannot-assign-to-read-only-property-‘exports’-of-object-‘-‘" class="headerlink" title="webpack报错：Cannot assign to read only property ‘exports’ of object ‘#‘"></a>webpack报错：Cannot assign to read only property ‘exports’ of object ‘#<object>‘</object></h2><p>原因是：The code above is ok. You can mix <code>require</code> and <code>export</code>. You can‘t mix <code>import</code> and <code>module.exports</code>.</p><p>也就是说，在webpack打包的时候，可以在js文件中混用require和export。但是不能混用import 以及module.exports。<br>于是查了一下代码，在自己的main.js中有这一段代码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import selector from ‘../packages/selector‘;</span><br><span class="line">import alert from ‘../packages/alert‘;</span><br><span class="line">const components=[</span><br><span class="line">    selector,</span><br><span class="line">    alert,</span><br><span class="line">]</span><br><span class="line">const install=function(Vue,option={}){</span><br><span class="line">    components.map(component => {</span><br><span class="line">        Vue.component(component.name, component);</span><br><span class="line">    })</span><br><span class="line">    Vue.prototype.$alert=alert;</span><br><span class="line">    Vue.prototype.$info=alert.error;</span><br><span class="line">    Vue.prototype.$error=alert.error;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">module.exports={</span><br><span class="line">    version:‘0.0.1‘,</span><br><span class="line">    install,</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>这段代码就是在最开始使用了import语句，但是最后使用了module.exports语句。所以就报错了。<br>改正一下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var selector = require(‘../packages/selector‘);</span><br><span class="line">var alert=require(‘../packages/alert‘);</span><br><span class="line">const components=[</span><br><span class="line">    selector,</span><br><span class="line">    alert,</span><br><span class="line">]</span><br><span class="line">const install=function(Vue,option={}){</span><br><span class="line">    components.map(component => {</span><br><span class="line">        Vue.component(component.name, component);</span><br><span class="line">    })</span><br><span class="line">    Vue.prototype.$alert=alert;</span><br><span class="line">    Vue.prototype.$info=alert.error;</span><br><span class="line">    Vue.prototype.$error=alert.error;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">module.exports={</span><br><span class="line">    version:‘0.0.1‘,</span><br><span class="line">    install,</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><font color="red" size="4" face="黑体">所以提醒我，以后一定要配对使用require和module.exports以及import和export default。<br>不要混用，省得出问题。</font></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue开源项目库汇总</title>
      <link href="/2020/02/24/Vue%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%BA%93%E6%B1%87%E6%80%BB/"/>
      <url>/2020/02/24/Vue%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%BA%93%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="Vue开源项目库汇总"><a href="#Vue开源项目库汇总" class="headerlink" title="Vue开源项目库汇总"></a>Vue开源项目库汇总</h2><h3 id="UI组件"><a href="#UI组件" class="headerlink" title="UI组件"></a>UI组件</h3><ul><li>element ★9305 - 饿了么出品的Vue2的web UI工具套件</li><li>Vux ★6802 - 基于Vue和WeUI的组件库</li><li>mint-ui ★4776 - Vue 2的移动UI元素</li><li>iview ★4458 - 基于 Vuejs 的开源 UI 组件库</li></ul><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><ul><li>nuxt.js ★2743 - 用于服务器渲染Vue app的最小化框架</li><li>express-vue ★137 - 简单的使用服务器端渲染vue.js</li><li>vue-ssr ★67 - 非常简单的VueJS服务器端渲染模板</li><li>vue-ssr ★56 - 结合Express使用Vue2服务端渲染</li><li>vue-easy-renderer ★22 - Nodejs服务端渲染</li></ul><h3 id="辅助工具"><a href="#辅助工具" class="headerlink" title="辅助工具"></a>辅助工具</h3><ul><li>DejaVue ★543 - Vuejs可视化及压力测试</li><li>vue-play ★445 - 展示Vue组件的最小化框架</li><li>vscode-VueHelper ★185 - 目前vscode最好的vue代码提示插件</li><li>vue-generate-component ★39 - 轻松生成Vue js组件的CLI工具</li><li>vue-multipage-cli ★33 - 简单的多页CLI</li><li>VuejsStarterKit ★26 - vuejs starter套件</li></ul><h3 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h3><ul><li>koel ★7175 - 基于网络的个人音频流媒体服务</li><li>pagekit ★4021 - 轻量级的CMS建站系统</li><li>vuedo ★1040 - 博客平台</li><li>jackblog-vue ★943 - 个人博客系统</li><li>vue-cnode ★597 - 重写vue版cnode社区</li><li>CMS-of-Blog ★405 - 博客内容管理器</li><li>rss-reader ★326 - 简单的rss阅读器</li><li>vue-ghpages-blog ★208 - 依赖GitHub Pages无需本地生成的静态博客</li><li>swoole-vue-webim ★97 - Web版的聊天应用</li><li>vue-dashing-js ★70 - nuvo-dashing-js的fork</li><li>fewords ★52 - 功能极其简单的笔记本</li><li>vue-blog ★33 - 使用Vue2.0 和Vuex的vue-blog</li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10安装Mysql详细步骤</title>
      <link href="/2020/02/24/Win10%E5%AE%89%E8%A3%85Mysql%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/"/>
      <url>/2020/02/24/Win10%E5%AE%89%E8%A3%85Mysql%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="Mysql-安装"><a href="#Mysql-安装" class="headerlink" title="Mysql 安装"></a>Mysql 安装</h2><p>1.进入地址：<code>https://dev.mysql.com/downloads/mysql/</code> 下载mysql-8.0.11-winx64</p><p>2.解压zip包，并将解压文件放入一个文件夹下,在此放在<code>D:\Program Files\</code> 目录下</p><p>3.配置环境变量，在 Path下添加 <code>D:\Program Files\mysql-8.0.11-winx64\bin</code></p><p><a href="/2020/02/24/Win10%E5%AE%89%E8%A3%85Mysql%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/mysql1.png" data-fancybox="group" data-caption="mysql" class="fancybox"><img alt="mysql" title="mysql" data-src="/2020/02/24/Win10%E5%AE%89%E8%A3%85Mysql%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/mysql1.png" class="lazyload"></a></p><p>4.编写配置文件<br>我们发现解压后的目录并没有my.ini（或my-default.ini）文件，没关系可以自行创建。在安装根目录下添加 my.ini，比如我这里是：<code>D:\Program Files\mysql-8.0.11-winx64\my-default.ini</code>，写入基本配置：</p><p><a href="/2020/02/24/Win10%E5%AE%89%E8%A3%85Mysql%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/mysql2.png" data-fancybox="group" data-caption="mysql" class="fancybox"><img alt="mysql" title="mysql" data-src="/2020/02/24/Win10%E5%AE%89%E8%A3%85Mysql%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/mysql2.png" class="lazyload"></a></p><p>注意：data文件夹是初始化数据库之后才有的，my-default.ini文件默认是没有的，自己可以编写如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"># 设置3306端口</span><br><span class="line">port=3306</span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir=D:\Program Files\MySQL</span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">datadir=D:\Users\qiuzhiwen\MySQL\Data</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections=200</span><br><span class="line"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span><br><span class="line">max_connect_errors=10</span><br><span class="line"># 服务端使用的字符集默认为UTF8</span><br><span class="line">character-set-server=utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line"># 默认使用“mysql_native_password”插件认证</span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br><span class="line">[mysql]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[client]</span><br><span class="line"># 设置mysql客户端连接服务端时默认使用的端口</span><br><span class="line">port=3306</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></tbody></table></figure></div><p>其中basedir和datadir可以根据自己的实际情况来决定！</p><p>5.管理员身份打开 cmd 命令窗口</p><p>6.MySQL服务安装及初始化</p><p><a href="/2020/02/24/Win10%E5%AE%89%E8%A3%85Mysql%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/mysql3.png" data-fancybox="group" data-caption="mysql" class="fancybox"><img alt="mysql" title="mysql" data-src="/2020/02/24/Win10%E5%AE%89%E8%A3%85Mysql%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/mysql3.png" class="lazyload"></a></p><p>执行mysqld install命令当出现Service successfully installed时表示mysql服务安装完成</p><p>注意：<code>mysqld --install [服务名]</code></p><p>后面的服务名可以不写，默认的名字为 mysql。当然，如果你的电脑上需要安装多个MySQL服务，就可以用不同的名字区分了，比如 mysql5 和 mysql8。</p><p>Mysql初始化</p><p>在MySQL安装目录的 bin 目录下执行命令：</p><pre><code>`mysqld --initialize --console`</code></pre><p>执行完成后，会打印 root 用户的初始默认密码，比如：</p><p><a href="/2020/02/24/Win10%E5%AE%89%E8%A3%85Mysql%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/mysql4.png" data-fancybox="group" data-caption="mysql" class="fancybox"><img alt="mysql" title="mysql" data-src="/2020/02/24/Win10%E5%AE%89%E8%A3%85Mysql%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/mysql4.png" class="lazyload"></a></p><p>注意！执行输出结果里面有一段： <code>[Note] [MY-010454] [Server] A temporary password is generated for root@localhost: Ng*jbnKGd2_!</code>其中root@localhost:后面的“<code>Ng*jbnKGd2_!</code>”就是初始密码（不含首位空格）。在没有更改密码前，需要记住这个密码，后续登录需要用到。要是手贱，关快了，或者没记住，那也没事，删掉初始化的 datadir 目录，再执行一遍初始化命令，又会重新生成的。当然，也可以使用安全工具，强制改密码，用什么方法，自己随意。</p><p>安装完成之后，就可以通过命令 <code>net start mysql</code> 启动MySQL的服务了。</p><p><a href="/2020/02/24/Win10%E5%AE%89%E8%A3%85Mysql%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/mysql5.png" data-fancybox="group" data-caption="mysql" class="fancybox"><img alt="mysql" title="mysql" data-src="/2020/02/24/Win10%E5%AE%89%E8%A3%85Mysql%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/mysql5.png" class="lazyload"></a></p><p>7.更改密码和密码认证插件</p><p>进入<code>D:\Program Files\mysql-8.0.11-winx64\bin</code>路径下，执行<code>mysql -u root -p</code>命令，然后输入之前保存的密码，我这里是<code>Ng*jbnKGd2_!</code></p><p>修改用户密码，在MySQL中执行命令：<br><code>ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '新密码'</code>;</p><p>修改密码验证插件，同时修改密码。</p><p>可以用 命令查看一下默认安装的数据库：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">show databases;</span><br><span class="line">use mysql;</span><br><span class="line">show tables;</span><br></pre></td></tr></tbody></table></figure></div><p><a href="/2020/02/24/Win10%E5%AE%89%E8%A3%85Mysql%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/mysql6.png" data-fancybox="group" data-caption="mysql" class="fancybox"><img alt="mysql" title="mysql" data-src="/2020/02/24/Win10%E5%AE%89%E8%A3%85Mysql%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/mysql6.png" class="lazyload"></a></p><p>看到默认初始化了mysql数据库，其中user表里面存储MySQL用户信息。我们可以看一下默认MySQL用户：</p><pre><code>select user,host,authentication_string from mysql.user;</code></pre><p><a href="/2020/02/24/Win10%E5%AE%89%E8%A3%85Mysql%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/mysql7.png" data-fancybox="group" data-caption="mysql" class="fancybox"><img alt="mysql" title="mysql" data-src="/2020/02/24/Win10%E5%AE%89%E8%A3%85Mysql%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/mysql7.png" class="lazyload"></a></p><p>管理员root的host是localhost，代表仅限localhost登录访问。如果要允许开放其他ip登录，则需要添加新的host。如果要允许所有ip访问，可以直接修改成“%”</p><p>创建用户：<code>CREATE USER 'xxh'@'%' IDENTIFIED WITH mysql_native_password BY 'xxh123!@#';</code></p><h3 id="需要注意：mysql8-0加密方式修改了"><a href="#需要注意：mysql8-0加密方式修改了" class="headerlink" title="(需要注意：mysql8.0加密方式修改了)"></a>(需要注意：mysql8.0加密方式修改了)</h3><h3 id="检查用户"><a href="#检查用户" class="headerlink" title="检查用户"></a>检查用户</h3><p><code>select user, host, plugin, authentication_string from user\G</code>;</p><h2 id="授权远程数据库"><a href="#授权远程数据库" class="headerlink" title="授权远程数据库"></a>授权远程数据库</h2><h3 id="授权所有权限"><a href="#授权所有权限" class="headerlink" title="授权所有权限"></a>授权所有权限</h3><p><code>GRANT ALL PRIVILEGES ON *.* TO 'xxh'@'%'</code>；</p><h3 id="授权基本的查询修改权限，按需求设置"><a href="#授权基本的查询修改权限，按需求设置" class="headerlink" title="授权基本的查询修改权限，按需求设置"></a>授权基本的查询修改权限，按需求设置</h3><p><code>GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON *.* TO 'xxh'@'%'</code>;</p><h3 id="查看用户权限-show-grants-for-39-xxh-39-39-39"><a href="#查看用户权限-show-grants-for-39-xxh-39-39-39" class="headerlink" title="查看用户权限 show grants for 'xxh'@'%';"></a>查看用户权限 <code>show grants for 'xxh'@'%'</code>;</h3><blockquote><p>原文链接： <a href="https://blog.csdn.net/qq_20788055/article/details/80372577" target="_blank" rel="noopener">https://blog.csdn.net/qq_20788055/article/details/80372577</a></p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sqlserver小技巧</title>
      <link href="/2020/02/24/Sqlserver%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2020/02/24/Sqlserver%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="1-获取异常信息"><a href="#1-获取异常信息" class="headerlink" title="1.获取异常信息"></a>1.获取异常信息</h2><pre><code>select ERROR_NUMBER(),ERROR_SEVERITY(),ERROR_STATE(),ERROR_PROCEDURE(), ERROR_LINE() ,ERROR_MESSAGE()</code></pre><h2 id="2-查看视图创建的时间："><a href="#2-查看视图创建的时间：" class="headerlink" title="2.查看视图创建的时间："></a>2.查看视图创建的时间：</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select [name],create_date,modify_date</span><br><span class="line">FROM</span><br><span class="line">sys.all_objects</span><br><span class="line">where name = 'VW_F_Emp_RedeployInfoWF'</span><br></pre></td></tr></tbody></table></figure></div><h2 id="3-查看存储过程创建的时间："><a href="#3-查看存储过程创建的时间：" class="headerlink" title="3.查看存储过程创建的时间："></a>3.查看存储过程创建的时间：</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select [name],create_date,modify_date</span><br><span class="line">FROM</span><br><span class="line">sys.all_objects</span><br><span class="line">where </span><br><span class="line">type_desc = N'SQL_STORED_PROCEDURE' and</span><br><span class="line">name = 'PR_CheckDeptID'</span><br></pre></td></tr></tbody></table></figure></div><h2 id="4-SQL-In-语句如何返回表中不存在的值"><a href="#4-SQL-In-语句如何返回表中不存在的值" class="headerlink" title="4.SQL In 语句如何返回表中不存在的值"></a>4.SQL In 语句如何返回表中不存在的值</h2><h3 id="假设表中内容如下："><a href="#假设表中内容如下：" class="headerlink" title="假设表中内容如下："></a>假设表中内容如下：</h3><table><thead><tr><th>ID</th><th>ProjectName</th></tr></thead><tbody><tr><td>1</td><td>张</td></tr><tr><td>2</td><td>王</td></tr></tbody></table><p>执行 <code>select * from [Table-Test] where ID in (1,3)</code><br>因为3不存在<br>所以sql会返回如下结果：  </p><table><thead><tr><th>ID</th><th>ProjectName</th></tr></thead><tbody><tr><td>1</td><td>张</td></tr></tbody></table><p>如何改写sql，让表中不存在的3也返回结果呢？<br>结果如下：</p><table><thead><tr><th>ID</th><th>ProjectName</th></tr></thead><tbody><tr><td>1</td><td>张</td></tr><tr><td>2</td><td>王</td></tr><tr><td>3</td><td>Null</td></tr></tbody></table><h3 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">CREATE function Get_StrArrayLength</span><br><span class="line">(</span><br><span class="line"> @str varchar(1024),  --要分割的字符串</span><br><span class="line"> @split varchar(10)  --分隔符号</span><br><span class="line">)</span><br><span class="line">returns int</span><br><span class="line">as</span><br><span class="line"> begin</span><br><span class="line">  declare @location int</span><br><span class="line">  declare @start int</span><br><span class="line">  declare @length int</span><br><span class="line">  set @str=ltrim(rtrim(@str))</span><br><span class="line">  set @location=charindex(@split,@str)</span><br><span class="line">  set @length=1</span><br><span class="line">   while @location<>0</span><br><span class="line">     begin</span><br><span class="line">      set @start=@location+1</span><br><span class="line">      set @location=charindex(@split,@str,@start)</span><br><span class="line">      set @length=@length+1</span><br><span class="line">     end</span><br><span class="line">   return @length</span><br><span class="line"> end</span><br><span class="line"></span><br><span class="line">CREATE function Get_StrArrayStrOfIndex</span><br><span class="line">(</span><br><span class="line"> @str varchar(1024),  --要分割的字符串</span><br><span class="line"> @split varchar(10),  --分隔符号</span><br><span class="line"> @index int --取第几个元素</span><br><span class="line">)</span><br><span class="line">returns varchar(1024)</span><br><span class="line">as</span><br><span class="line">begin</span><br><span class="line"> declare @location int</span><br><span class="line"> declare @start int</span><br><span class="line"> declare @next int</span><br><span class="line"> declare @seed int</span><br><span class="line"> set @str=ltrim(rtrim(@str))</span><br><span class="line"> set @start=1</span><br><span class="line"> set @next=1</span><br><span class="line"> set @seed=len(@split)</span><br><span class="line"> set @location=charindex(@split,@str)</span><br><span class="line"> while @location<>0 and @index>@next</span><br><span class="line">   begin</span><br><span class="line">    set @start=@location+@seed</span><br><span class="line">    set @location=charindex(@split,@str,@start)</span><br><span class="line">    set @next=@next+1</span><br><span class="line">   end</span><br><span class="line"> if @location =0 select @location =len(@str)+1</span><br><span class="line"> return substring(@str,@start,@location-@start)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">declare @canshu int</span><br><span class="line">declare @str varchar(50)</span><br><span class="line">--定义字符串变量</span><br><span class="line">set @str='1,3,5,6,7'</span><br><span class="line">declare @next int  </span><br><span class="line">set @next=1</span><br><span class="line">Declare  @Test table</span><br><span class="line">(</span><br><span class="line">ID int,</span><br><span class="line">ProjectName varchar(50)</span><br><span class="line">)</span><br><span class="line">insert into @Test select * from [Table-Test]</span><br><span class="line"></span><br><span class="line">while @next<=dbo.Get_StrArrayLength(@str,',')</span><br><span class="line">  begin</span><br><span class="line">     set @canshu = dbo.Get_StrArrayStrOfIndex(@str,',',@next)</span><br><span class="line"> if not exists(select * from @Test where ID =@canshu)</span><br><span class="line">begin</span><br><span class="line"> Insert Into @Test(ID,ProjectName) values(@canshu,null)</span><br><span class="line">end</span><br><span class="line">     set @next=@next+1</span><br><span class="line">  end</span><br><span class="line">select * from @Test</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Sqlserver </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sqlserver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sqlserver中的循环遍历</title>
      <link href="/2020/02/24/Sqlserver%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/"/>
      <url>/2020/02/24/Sqlserver%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="sql-经常用到循环，下面介绍一下普通循环和游标循环"><a href="#sql-经常用到循环，下面介绍一下普通循环和游标循环" class="headerlink" title="sql 经常用到循环，下面介绍一下普通循环和游标循环"></a>sql 经常用到循环，下面介绍一下普通循环和游标循环</h2><p>1、首先需要一个测试表数据Student</p><div style="display: inline-block;"><p><a href="/2020/02/24/Sqlserver%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/sqlserver1.png" data-fancybox="group" data-caption="sqlserver" class="fancybox"><img alt="sqlserver" title="sqlserver" data-src="/2020/02/24/Sqlserver%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/sqlserver1.png" class="lazyload"></a></p></div><p>2、普通循环<br>1）循环5次来修改学生表信息<br>–循环遍历修改记录–</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">declare @i int  </span><br><span class="line">set @i=0</span><br><span class="line">while @i<5</span><br><span class="line">begin</span><br><span class="line">    update Student set demo = @i+5 where Uid=@i</span><br><span class="line">    set @i=@i +1</span><br><span class="line">end</span><br><span class="line">--查看结果--</span><br><span class="line">select * from Student</span><br></pre></td></tr></tbody></table></figure></div><p>2）执行后的查询结果</p><div style="display: inline-block;"><p><a href="/2020/02/24/Sqlserver%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/sqlserver2.png" data-fancybox="group" data-caption="sqlserver" class="fancybox"><img alt="sqlserver" title="sqlserver" data-src="/2020/02/24/Sqlserver%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/sqlserver2.png" class="lazyload"></a></p></div><p>3、游标循环（没有事务）<br>1）根据学生表实际数据循环修改信息</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---游标循环遍历--</span><br><span class="line">begin</span><br><span class="line">    declare @a int,@error int    </span><br><span class="line">    declare @temp varchar(50)</span><br><span class="line">    set @a=1</span><br><span class="line">    set @error=0</span><br><span class="line">    --申明游标为Uid</span><br><span class="line">    declare order_cursor cursor</span><br><span class="line">    for (select [Uid] from Student)</span><br><span class="line">    --打开游标--</span><br><span class="line">    open order_cursor</span><br><span class="line">    --开始循环游标变量--</span><br><span class="line">    fetch next from order_cursor into @temp</span><br><span class="line">    while @@FETCH_STATUS = 0    --返回被 FETCH语句执行的最后游标的状态--</span><br><span class="line">        begin            </span><br><span class="line">            update Student set Age=15+@a,demo=@a where Uid=@temp</span><br><span class="line">            set @a=@a+1</span><br><span class="line">            set @error= @error + @@ERROR   --记录每次运行sql后是否正确，0正确</span><br><span class="line">            fetch next from order_cursor into @temp   --转到下一个游标，没有会死循环</span><br><span class="line">        end   </span><br><span class="line">    close order_cursor  --关闭游标</span><br><span class="line">    deallocate order_cursor   --释放游标</span><br><span class="line">end</span><br><span class="line">go</span><br><span class="line">--查看结果--</span><br><span class="line">select * from Student</span><br></pre></td></tr></tbody></table></figure></div><p>2）执行后的查询结果</p><div style="display: inline-block;"><p><a href="/2020/02/24/Sqlserver%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/sqlserver3.png" data-fancybox="group" data-caption="sqlserver" class="fancybox"><img alt="sqlserver" title="sqlserver" data-src="/2020/02/24/Sqlserver%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/sqlserver3.png" class="lazyload"></a></p></div><p>4、游标循环（事务）<br>1）根据实际循环学生表信息</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---游标循环遍历--</span><br><span class="line">begin</span><br><span class="line">    declare @a int,@error int    </span><br><span class="line">    declare @temp varchar(50)</span><br><span class="line">    set @a=1</span><br><span class="line">    set @error=0</span><br><span class="line">    begin tran  --申明事务</span><br><span class="line">    --申明游标为Uid</span><br><span class="line">    declare order_cursor cursor</span><br><span class="line">    for (select [Uid] from Student)</span><br><span class="line">    --打开游标--</span><br><span class="line">    open order_cursor</span><br><span class="line">    --开始循环游标变量--</span><br><span class="line">    fetch next from order_cursor into @temp</span><br><span class="line">    while @@FETCH_STATUS = 0    --返回被 FETCH语句执行的最后游标的状态--</span><br><span class="line">        begin            </span><br><span class="line">            update Student set Age=20+@a,demo=@a where Uid=@temp</span><br><span class="line">            set @a=@a+1</span><br><span class="line">            set @error= @error + @@ERROR   --记录每次运行sql后是否正确，0正确</span><br><span class="line">            fetch next from order_cursor into @temp   --转到下一个游标</span><br><span class="line">        end   </span><br><span class="line">    if @error=0</span><br><span class="line">    begin</span><br><span class="line">        commit tran   --提交事务</span><br><span class="line">    end</span><br><span class="line">    else</span><br><span class="line">    begin</span><br><span class="line">        rollback tran --回滚事务</span><br><span class="line">    end</span><br><span class="line">    close order_cursor  --关闭游标</span><br><span class="line">    deallocate order_cursor   --释放游标</span><br><span class="line">end</span><br><span class="line">go</span><br><span class="line">--查看结果--</span><br><span class="line">select * from Student</span><br></pre></td></tr></tbody></table></figure></div><p>2）执行后的查询结果：  </p><div style="display: inline-block;"><p><a href="/2020/02/24/Sqlserver%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/sqlserver4.png" data-fancybox="group" data-caption="sqlserver" class="fancybox"><img alt="sqlserver" title="sqlserver" data-src="/2020/02/24/Sqlserver%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/sqlserver4.png" class="lazyload"></a></p></div><blockquote><p>原文链接：<a href="https://www.cnblogs.com/xielong/p/5941595.html" target="_blank" rel="noopener">https://www.cnblogs.com/xielong/p/5941595.html</a></p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> Sqlserver </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sqlserver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL Server遍历表</title>
      <link href="/2020/02/24/SQL-Server%E9%81%8D%E5%8E%86%E8%A1%A8/"/>
      <url>/2020/02/24/SQL-Server%E9%81%8D%E5%8E%86%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>在数据库开发过程中，我们经常会碰到要遍历数据表的情形，一提到遍历表，我们第一印象可能就想到使用游标，使用游标虽然直观易懂，但是它不符合面向集合操作的原则，而且性能也比面向集合低。当然，从面向集合操作的角度出发，也有两种方法可以进行遍历表的操作，总结起来，遍历表有下面几种方法。</p><ol><li>使用游标</li><li>使用表变量</li><li>使用临时表</li></ol><p>我的需求是：针对HR.Employees表，新增一列fullname，并取值firstname+lastname。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-- 需求是，新增一列fullname，取值firstname+lastname</span><br><span class="line">ALTER TABLE HR.Employees ADD fullname NVARCHAR(30) NULL;</span><br><span class="line">GO</span><br></pre></td></tr></tbody></table></figure></div><p>原始效果如下图。</p><div style="display: inline-block;"><p><a href="/2020/02/24/SQL-Server%E9%81%8D%E5%8E%86%E8%A1%A8/sqlserver1.jpeg" data-fancybox="group" data-caption="sqlserver" class="fancybox"><img alt="sqlserver" title="sqlserver" data-src="/2020/02/24/SQL-Server%E9%81%8D%E5%8E%86%E8%A1%A8/sqlserver1.jpeg" class="lazyload"></a></p></div><p>这个需求本来可以一条sql语句搞定，如下代码所示。但是为了演示表的遍历，我还是使用了这三种方式来实现一下。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">USE TSQLFundamentals2008;</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">UPDATE HR.Employees SET fullname= firstname+' '+lastname;</span><br></pre></td></tr></tbody></table></figure></div><h2 id="使用游标"><a href="#使用游标" class="headerlink" title="使用游标"></a>使用游标</h2><h4 id="使用游标的代码比较繁琐，概括起来主要有以下几个步骤，声明游标，打开游标，使用游标，关闭游标和释放游标。示例代码如下"><a href="#使用游标的代码比较繁琐，概括起来主要有以下几个步骤，声明游标，打开游标，使用游标，关闭游标和释放游标。示例代码如下" class="headerlink" title="使用游标的代码比较繁琐，概括起来主要有以下几个步骤，声明游标，打开游标，使用游标，关闭游标和释放游标。示例代码如下."></a>使用游标的代码比较繁琐，概括起来主要有以下几个步骤，声明游标，打开游标，使用游标，关闭游标和释放游标。示例代码如下.</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-- 方法1：游标</span><br><span class="line">-- 声明变量</span><br><span class="line">DECLARE</span><br><span class="line">    @empid AS INT,</span><br><span class="line">    @firstname AS NVARCHAR(10),</span><br><span class="line">    @lastname AS NVARCHAR(20);</span><br><span class="line">    </span><br><span class="line">-- 声明游标</span><br><span class="line">DECLARE C_Employees CURSOR FAST_FORWARD FOR</span><br><span class="line">    SELECT empid,firstname,lastname </span><br><span class="line">    FROM HR.Employees</span><br><span class="line">    ORDER BY empid;</span><br><span class="line">    </span><br><span class="line">OPEN C_Employees;</span><br><span class="line"></span><br><span class="line">-- 取第一条记录</span><br><span class="line">FETCH NEXT FROM C_Employees INTO @empid,@firstname,@lastname;</span><br><span class="line"></span><br><span class="line">WHILE @@FETCH_STATUS=0</span><br><span class="line">BEGIN</span><br><span class="line">    -- 操作</span><br><span class="line">    UPDATE HR.Employees SET fullname= @firstname+' '+@lastname WHERE empid=@empid;</span><br><span class="line">    </span><br><span class="line">    -- 取下一条记录</span><br><span class="line">    FETCH NEXT FROM C_Employees INTO @empid,@firstname,@lastname;</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">-- 关闭游标</span><br><span class="line">CLOSE C_Employees;</span><br><span class="line"></span><br><span class="line">-- 释放游标</span><br><span class="line">DEALLOCATE C_Employees;</span><br></pre></td></tr></tbody></table></figure></div><p>运行脚本，效果如下图。</p><div style="display: inline-block;"><p><a href="/2020/02/24/SQL-Server%E9%81%8D%E5%8E%86%E8%A1%A8/sqlserver2.jpeg" data-fancybox="group" data-caption="sqlserver" class="fancybox"><img alt="sqlserver" title="sqlserver" data-src="/2020/02/24/SQL-Server%E9%81%8D%E5%8E%86%E8%A1%A8/sqlserver2.jpeg" class="lazyload"></a></p></div><h2 id="使用表变量"><a href="#使用表变量" class="headerlink" title="使用表变量"></a>使用表变量</h2><h4 id="因为使用游标存在性能和违背面向集合思想的问题，所以我们有必要用面向集合的思想去找到一种更好的解决方案，下面这种方法是使用表变量的方式实现的，代码如下。"><a href="#因为使用游标存在性能和违背面向集合思想的问题，所以我们有必要用面向集合的思想去找到一种更好的解决方案，下面这种方法是使用表变量的方式实现的，代码如下。" class="headerlink" title="因为使用游标存在性能和违背面向集合思想的问题，所以我们有必要用面向集合的思想去找到一种更好的解决方案，下面这种方法是使用表变量的方式实现的，代码如下。"></a>因为使用游标存在性能和违背面向集合思想的问题，所以我们有必要用面向集合的思想去找到一种更好的解决方案，下面这种方法是使用表变量的方式实现的，代码如下。</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-- 方法2：使用表变量</span><br><span class="line">-- 声明表变量</span><br><span class="line">DECLARE @temp TABLE</span><br><span class="line">(</span><br><span class="line">    empid INT,</span><br><span class="line">    firstname NVARCHAR(10),</span><br><span class="line">    lastname NVARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 将源表中的数据插入到表变量中</span><br><span class="line">INSERT INTO @temp(empid, firstname, lastname )</span><br><span class="line">SELECT empid,firstname,lastname FROM HR.Employees</span><br><span class="line">ORDER BY empid;</span><br><span class="line"></span><br><span class="line">-- 声明变量</span><br><span class="line">DECLARE</span><br><span class="line">    @empid AS INT,</span><br><span class="line">    @firstname AS NVARCHAR(10),</span><br><span class="line">    @lastname AS NVARCHAR(20);</span><br><span class="line">    </span><br><span class="line">WHILE EXISTS(SELECT empid FROM @temp)</span><br><span class="line">BEGIN</span><br><span class="line">    -- 也可以使用top 1</span><br><span class="line">    SET ROWCOUNT 1</span><br><span class="line">    SELECT @empid= empid, @firstname= firstname,@lastname= lastname FROM @temp;</span><br><span class="line">    UPDATE HR.Employees SET fullname= @firstname+' '+@lastname WHERE empid=@empid;</span><br><span class="line">    SET ROWCOUNT 0</span><br><span class="line">    </span><br><span class="line">    DELETE FROM @temp WHERE empid=@empid;</span><br><span class="line">END</span><br></pre></td></tr></tbody></table></figure></div><h2 id="使用临时表"><a href="#使用临时表" class="headerlink" title="使用临时表"></a>使用临时表</h2><h4 id="临时表也可以实现表变量的功能，所以我们也可以使用临时表来实现这个需求，代码如下。"><a href="#临时表也可以实现表变量的功能，所以我们也可以使用临时表来实现这个需求，代码如下。" class="headerlink" title="临时表也可以实现表变量的功能，所以我们也可以使用临时表来实现这个需求，代码如下。"></a>临时表也可以实现表变量的功能，所以我们也可以使用临时表来实现这个需求，代码如下。</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-- 方法3：使用临时表</span><br><span class="line">-- 创建临时表</span><br><span class="line">IF OBJECT_ID('tempdb.dbo.#tempemployees','U') IS NOT NULL DROP TABLE dbo.#tempemployees;</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">SELECT empid,firstname,lastname </span><br><span class="line">INTO dbo.#tempemployees</span><br><span class="line">FROM HR.Employees</span><br><span class="line">ORDER BY empid;</span><br><span class="line"></span><br><span class="line">--SELECT * FROM dbo.#tempemployees;</span><br><span class="line"></span><br><span class="line">-- 声明变量</span><br><span class="line">DECLARE</span><br><span class="line">    @empid AS INT,</span><br><span class="line">    @firstname AS NVARCHAR(10),</span><br><span class="line">    @lastname AS NVARCHAR(20);</span><br><span class="line">    </span><br><span class="line">WHILE EXISTS(SELECT empid FROM dbo.#tempemployees)</span><br><span class="line">BEGIN</span><br><span class="line">    -- 也可以使用top 1</span><br><span class="line">    SET ROWCOUNT 1</span><br><span class="line">    SELECT @empid= empid, @firstname= firstname,@lastname= lastname FROM dbo.#tempemployees;</span><br><span class="line">    UPDATE HR.Employees SET fullname= @firstname+' '+@lastname WHERE empid=@empid;</span><br><span class="line">    SET ROWCOUNT 0</span><br><span class="line">    </span><br><span class="line">    DELETE FROM dbo.#tempemployees WHERE empid=@empid;</span><br><span class="line">END</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>原文链接：<a href="https://www.cnblogs.com/mcgrady/p/4182486.html" target="_blank" rel="noopener">https://www.cnblogs.com/mcgrady/p/4182486.html</a></p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> Sqlserver </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sqlserver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue开发环境搭建</title>
      <link href="/2020/02/24/Vue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/02/24/Vue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="vue开发环境搭建"><a href="#vue开发环境搭建" class="headerlink" title="vue开发环境搭建"></a>vue开发环境搭建</h2><h3 id="1-Node-js环境搭建"><a href="#1-Node-js环境搭建" class="headerlink" title="1.Node.js环境搭建"></a>1.Node.js环境搭建</h3><p>nodejs官网地址为 <code>https://nodejs.org/en/</code> ，选择操作系统对应的版本下载，进行安装即可。</p><h4 id="补充说明："><a href="#补充说明：" class="headerlink" title="补充说明："></a>补充说明：</h4><ul><li>node.exe 是 node.js 的运行环境</li></ul><ul><li>npm 用于管理 nodejs 组件包的下载和依赖关系包的下载</li><li>由于国内外网络原因，尽量在安装完成后设置npm的国内镜像代理，加快下载速度，国内最常用的就是淘宝镜像<br>  <code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code>  </li><li>单独设置global和cache的文件夹的目的是为了修改默认存放位置，现在很多工具都把下载内容放在C盘的User目录下，如果你的nodejs安装路径不在C盘，你的C盘也不想那么大的话，尽可能设置一下</li><li>在cmd或者powershell下，输入<code>node -v</code>以及<code>npm -v</code> 查看node 环境是否搭建成功。</li></ul><h3 id="2-安装webpack"><a href="#2-安装webpack" class="headerlink" title="2.安装webpack"></a>2.安装webpack</h3><p>执行 <code>cnpm install webpack -g</code> 命令</p><h3 id="3-vue-cli-环境搭建"><a href="#3-vue-cli-环境搭建" class="headerlink" title="3.vue-cli 环境搭建"></a>3.vue-cli 环境搭建</h3><p>执行<code>npm install vue-cli -g</code>  命令，安装 2.X版本的脚手架工具<br>执行<code>npm install @vue/cli -g</code> 命令，安装 3.X版本的脚手架工具<br>执行<code>npm uninstall vue-cli -g</code>命令，卸载脚手架工具<br>执行<code>vue -V</code> 命令，查看vue-cli的版本<br>至此，vue-cli 环境搭建成功。</p><h3 id="4-使用脚手架搭建项目"><a href="#4-使用脚手架搭建项目" class="headerlink" title="4.使用脚手架搭建项目"></a>4.使用脚手架搭建项目</h3><h4 id="vue-cli-2-x版本创建方式："><a href="#vue-cli-2-x版本创建方式：" class="headerlink" title="vue-cli 2.x版本创建方式："></a>vue-cli 2.x版本创建方式：</h4><pre><code>vue init webpack 工程名字<工程名字不能用中文></code></pre><h4 id="vue-cli-3-x版本创建方式："><a href="#vue-cli-3-x版本创建方式：" class="headerlink" title="vue-cli 3.x版本创建方式："></a>vue-cli 3.x版本创建方式：</h4><pre><code>vue create 工程名字<工程名字不能用中文></code></pre><h3 id="5-进入开发模式"><a href="#5-进入开发模式" class="headerlink" title="5.进入开发模式"></a>5.进入开发模式</h3><ol><li>cd 到工程目录</li><li>执行 <code>code .</code>,用vscode 打开工程文件</li><li>安装依赖，执行<code>npm install</code></li><li>执行 <code>install vue-router vue-resource --save</code> 安装 vue 路由模块vue-router和网络请求模块vue-resource</li><li><code>npm run dev</code> 启动项目</li></ol><h3 id="其他问题补充："><a href="#其他问题补充：" class="headerlink" title="其他问题补充："></a>其他问题补充：</h3><h4 id="问题1-执行npm-install-vue-style-loader-css-loader-sass-loader-save-dev-安装了css相关依赖之后，npm-run-dev，项目报错：TypeError-this-getResolve-is-not-a-function"><a href="#问题1-执行npm-install-vue-style-loader-css-loader-sass-loader-save-dev-安装了css相关依赖之后，npm-run-dev，项目报错：TypeError-this-getResolve-is-not-a-function" class="headerlink" title="问题1. 执行npm install vue-style-loader css-loader sass-loader --save-dev 安装了css相关依赖之后，npm run dev，项目报错：TypeError: this.getResolve is not a function."></a>问题1. 执行<code>npm install vue-style-loader css-loader sass-loader --save-dev</code> 安装了css相关依赖之后，<code>npm run dev</code>，项目报错：TypeError: this.getResolve is not a function.</h4><h4 id="原因：安装的sass-loader的版本为最新8-0-0，导致编译报错。"><a href="#原因：安装的sass-loader的版本为最新8-0-0，导致编译报错。" class="headerlink" title="原因：安装的sass-loader的版本为最新8.0.0，导致编译报错。"></a>原因：安装的sass-loader的版本为最新8.0.0，导致编译报错。</h4><h4 id="解决：npm-install-sass-loader-7-3-1，然后启动项目。"><a href="#解决：npm-install-sass-loader-7-3-1，然后启动项目。" class="headerlink" title="解决：npm install sass-loader@7.3.1，然后启动项目。"></a>解决：<code>npm install sass-loader@7.3.1</code>，然后启动项目。</h4><h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2."></a>问题2.</h3><h4 id="待补充……"><a href="#待补充……" class="headerlink" title="待补充……"></a>待补充……</h4></body></html>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Helm部署DotnetCore至K8S</title>
      <link href="/2020/02/24/Helm%E9%83%A8%E7%BD%B2DotnetCore%E8%87%B3K8S/"/>
      <url>/2020/02/24/Helm%E9%83%A8%E7%BD%B2DotnetCore%E8%87%B3K8S/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="1-Helm-简介"><a href="#1-Helm-简介" class="headerlink" title="1.Helm 简介"></a>1.Helm 简介</h2><p>Helm 是一个为K8S打造的包管理器。通过Helm可以方便管理Kubernetes应用程序。Helm主要有两大核心概念：Charts、Release。</p><ol><li><p>Chart：用来定义，安装和升级K8S 应用。亦可分享及版本化控制。</p></li><li><p>Release：类似Image之于Container，Release是Chart的运行实例。</p></li></ol><p>目前Helm最新的版本为V3.1，较之前版本，在整体架构上移除服务端Tiller。对于Windows系统而言可借助Choco快速安装：<code>choco install kubernetes-helm</code>，通过执行 helm version确认是否安装成功。</p><p>在继续往前，请确保已具备基础的K8S基础知识，并且确保本机已安装Docker和K8S。安装教程和K8S简单入门可参考我的这篇文章：<a href="https://www.cnblogs.com/sheng-jie/p/10591794.html" target="_blank" rel="noopener">ASP.NET Core 借助 K8S 玩转容器编排</a>。</p><p>对于第一次接触Helm .NETer 来说我们可以通过VS 2019来快速体验一下。请确保已安装Visual Studio Tools for Kubernetes。</p><p><a href="/2020/02/24/Helm%E9%83%A8%E7%BD%B2DotnetCore%E8%87%B3K8S/Helm.png" data-fancybox="group" data-caption="Helm" class="fancybox"><img alt="Helm" title="Helm" data-src="/2020/02/24/Helm%E9%83%A8%E7%BD%B2DotnetCore%E8%87%B3K8S/Helm.png" class="lazyload"></a></p><h2 id="2-创建-Chart-helm-create"><a href="#2-创建-Chart-helm-create" class="headerlink" title="2.创建 Chart (helm create)"></a>2.创建 Chart (helm create)</h2><p>打开VS 创建项目，选择Container Application for Kubernetes，创建一个空的ASP.NET Core Web 项目。</p><h2 id="3-安装-Chart-helm-install"><a href="#3-安装-Chart-helm-install" class="headerlink" title="3.安装 Chart (helm install)"></a>3.安装 Chart (helm install)</h2><h2 id="4-更新-Chart-helm-upgrade"><a href="#4-更新-Chart-helm-upgrade" class="headerlink" title="4.更新 Chart (helm upgrade)"></a>4.更新 Chart (helm upgrade)</h2><h2 id="5-删除-Chart-helm-delete"><a href="#5-删除-Chart-helm-delete" class="headerlink" title="5.删除 Chart(helm delete)"></a>5.删除 Chart(helm delete)</h2><blockquote><p>参考资料：<br>颜圣杰: <a href="https://www.cnblogs.com/sheng-jie/p/Deploy-an-ASP-NET-Core-app-to-k8s-with-helm.html" target="_blank" rel="noopener">《ASP.NET Core 借助 Helm 部署应用至K8S》</a><br>KaliArch: <a href="https://juejin.im/post/5d5b8dba6fb9a06b1b19c21b#heading-25" target="_blank" rel="noopener">《玩K8S不得不会的HELM》</a></p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm install参数详解</title>
      <link href="/2020/02/24/npm-install%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/02/24/npm-install%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="npm-本地安装"><a href="#npm-本地安装" class="headerlink" title="npm 本地安装"></a>npm 本地安装</h2><h3 id="npm-install-lt-moduleName-gt-命令"><a href="#npm-install-lt-moduleName-gt-命令" class="headerlink" title="npm install <moduleName> 命令"></a><code>npm install <modulename></modulename></code> 命令</h3><ol><li>安装模块到项目node_modules目录下。</li><li>不会将模块依赖写入devDependencies或dependencies 节点。</li><li>运行 npm install 初始化项目时不会下载模块。</li></ol><h3 id="npm-install-g-lt-moduleName-gt-命令"><a href="#npm-install-g-lt-moduleName-gt-命令" class="headerlink" title="npm install -g <moduleName> 命令"></a><code>npm install -g <modulename></modulename></code> 命令</h3><ol><li>安装模块到全局，不会在项目node_modules目录中保存模块包。</li><li>不会将模块依赖写入devDependencies或dependencies 节点。</li><li>运行 npm install 初始化项目时不会下载模块。</li></ol><h3 id="npm-install-save-lt-moduleName-gt-命令（简写为：-S）"><a href="#npm-install-save-lt-moduleName-gt-命令（简写为：-S）" class="headerlink" title="npm install -save <moduleName> 命令（简写为： -S）"></a><code>npm install -save <modulename></modulename></code> 命令（简写为： -S）</h3><ol><li>安装模块到项目node_modules目录下。</li><li>会将模块依赖写入dependencies 节点。</li><li>运行 npm install 初始化项目时，会将模块下载到项目目录下。</li><li>运行npm install –production或者注明NODE_ENV变量值为production时，会自动下载模块到node_modules目录中。</li></ol><h3 id="npm-install-save-dev-lt-moduleName-gt-命令-（简称为：-D）"><a href="#npm-install-save-dev-lt-moduleName-gt-命令-（简称为：-D）" class="headerlink" title="npm install --save-dev <moduleName> 命令 （简称为：-D）"></a><code>npm install --save-dev <modulename></modulename></code> 命令 （简称为：-D）</h3><ol><li>安装模块到项目node_modules目录下。</li><li>会将模块依赖写入devDependencies 节点。</li><li>运行 npm install 初始化项目时，会将模块下载到项目目录下。</li><li>运行npm install –production或者注明NODE_ENV变量值为production时，不会自动下载模块到node_modules目录中。  </li></ol><h3 id="npm-install-save-optional-lt-moduleName-gt-命令（简写为：-O）"><a href="#npm-install-save-optional-lt-moduleName-gt-命令（简写为：-O）" class="headerlink" title="npm install --save-optional <moduleName> 命令（简写为： -O）"></a><code>npm install --save-optional <modulename></modulename></code> 命令（简写为： -O）</h3><ol><li>安装模块到项目node_modules目录下。</li><li>会将模块安装到optionalDependencies（可选环境依赖）中。</li><li>package.json 文件的optionalDependencies属性:   </li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">"optionalDependencies":</span><br><span class="line">{</span><br><span class="line">"gulp": "^3.9.1"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="npm-install-save-exact-lt-moduleName-gt-命令（简写为：-E）"><a href="#npm-install-save-exact-lt-moduleName-gt-命令（简写为：-E）" class="headerlink" title="npm install --save-exact <moduleName> 命令（简写为： -E）"></a><code>npm install --save-exact <modulename></modulename></code> 命令（简写为： -E）</h3><ol><li>安装模块到项目node_modules目录下。</li><li>会将模块依赖写入dependencies 节点。</li><li>package.json文件里”dependencies”属性:</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">"dependencies":</span><br><span class="line">{</span><br><span class="line">"gulp-concat": "2.6.1"   //注意此处：版本号没有 ^</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="npm-install-lt-moduleName-gt-lt-version-gt-命令"><a href="#npm-install-lt-moduleName-gt-lt-version-gt-命令" class="headerlink" title="npm install  <moduleName>@<version> 命令"></a><code>npm install  <modulename>@<version></version></modulename></code> 命令</h3><ol><li>安装指定模块的版本</li></ol><blockquote><h4 id="devDependencies节点"><a href="#devDependencies节点" class="headerlink" title="devDependencies节点:"></a>devDependencies节点:</h4><p>该模块是我们在开发时需要用的，比如项目中使用的 gulp ，压缩css、js的模块。这些模块在我们的项目部署后是不需要的，所以我们可以使用 -save-dev 的形式安装。  </p><h4 id="dependencies节点："><a href="#dependencies节点：" class="headerlink" title="dependencies节点："></a>dependencies节点：</h4><p>该模块是项目运行必备的，应该使用 -save 的形式安装。</p></blockquote><h2 id="npm-init"><a href="#npm-init" class="headerlink" title="npm init"></a>npm init</h2><ol><li>引导创建一个package.json文件，包括名称、版本、作者这些信息</li></ol><h2 id="npm-卸载"><a href="#npm-卸载" class="headerlink" title="npm 卸载"></a>npm 卸载</h2><ol><li><code>npm uninstall <modulename></modulename></code> 命令  </li><li><code>npm prune</code> 命令, 清除未被使用到的模块</li></ol><h2 id="npm-更新"><a href="#npm-更新" class="headerlink" title="npm 更新"></a>npm 更新</h2><ol><li><code>npm update <modulename></modulename></code> 命令</li><li><code>npm update <modulename>@<version></version></modulename></code> 命令 update 该模块到指定版本</li><li><code>npm outdated <modulename></modulename></code> npm 检查是否过时</li></ol><h2 id="npm-查看"><a href="#npm-查看" class="headerlink" title="npm 查看"></a>npm 查看</h2><ol><li><code>npm ls 或 npm ll 或 npm la</code> npm 查看安装的模块； 区别：展示方式不一样</li><li><code>npm view <modulename> repository.url</modulename></code> 查看包的源文件地址</li><li><code>npm view <modulename> engines</modulename></code> 查看当前模块依赖的node最低版本号</li><li><code>npm view <modulename> version</modulename></code> 查看模块的当前版本号</li><li><code>npm search <modulename></modulename></code>  查看某个包是否已经存在</li><li><code>npm help <modulename></modulename></code> 命令 查看命令的详细帮助</li><li><code>npm repo <modulename></modulename></code> 打开搞模块的仓库界面</li><li><code>npm docs <modulename></modulename></code> 打开某个模块的文档</li><li>其他命令： <code>npm root | npm config | npm cache clean | npm -v</code> </li></ol><h2 id="npm-版本控制"><a href="#npm-版本控制" class="headerlink" title="npm 版本控制"></a>npm 版本控制</h2><p>首先看npm包的版本号的格式X.Y.Z,版本好的格式遵循semver 2.0规范，其中X为主版本号，只有更新了不向下兼容的API时进行修改主版本号，Y为次版本号，当模块增加了向下兼容的功能时进行修改，Z为修订版本号，当模块进行了向下兼容的bug修改后进行修改,这就是“语义化的版本控制”。</p><blockquote><p>默认情况下，当用–save或者–save-dev安装一个模块时，npm通过脱字符(^)来限定所安装模块的主版本号，而该脱字符对于不同的版本号有不同的更新机制<br>^1.2.1 代表的更新版本范围为 >=1.2.1 && < 2.0.0<br>^0.2.1 代表的更新版本范围为 >=0.2.1 && < 0.3.0<br>^0.0.2 代表的更新版本范围为 0.0.2（相当于锁定为了0.0.2版本）</p></blockquote><blockquote><p>波浪号(~)是限定模块的次要版本<br>~1.5.1允许安装版本号大于1.5.1但小于1.6.0版本的模块<br>~0.5.1允许安装版本号为0.6.0  </p></blockquote><blockquote><p>当主版本号/次版本号/修订版本号为X or x or <em>时，那么update或install是会下载该分支最新的版本号<br>(</em>)跟新或安装模块时会安装>=0.0.0的最新版本<br>1.x 表示的更新范围为>=1.0.0&&< 2.0.0<br>1.2.x 表示的更新范围为>=1.2.0&&< 1.3.0  </p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB介绍和安装(一)</title>
      <link href="/2020/02/23/MongoDB%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%AE%89%E8%A3%85-%E4%B8%80/"/>
      <url>/2020/02/23/MongoDB%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%AE%89%E8%A3%85-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="MongoDB简介"><a href="#MongoDB简介" class="headerlink" title="MongoDB简介"></a>MongoDB简介</h2><p>MongoDB是一个高性能，开源，无模式的文档型数据库，是当前NoSql数据库中比较热门的一种。它在许多场景下可用于替代传统的关系型数据库或键/值存储方式。</p><p>传统的关系数据库一般由数据库（database）、表（table）、记录（record）三个层次概念组成，MongoDB是由数据库 （database）、集合（collection）、文档对象（document）三个层次组成。MongoDB对于关系型数据库里的表，但是集合中没 有列、行和关系概念，这体现了模式自由的特点。</p><p>特点:高性能、易部署、易使用，存储数据非常方便。</p><h3 id="主要功能特性有："><a href="#主要功能特性有：" class="headerlink" title="主要功能特性有："></a>主要功能特性有：</h3><ul><li>面向集合存储，易存储对象类型的数据。</li><li>模式自由。</li><li>支持动态查询。</li><li>支持完全索引，包含内部对象。</li><li>支持查询。</li><li>支持复制和故障恢复。</li><li>使用高效的二进制数据存储，包括大型对象（如视频等）。</li><li>自动处理碎片，以支持云计算层次的扩展性</li><li>支持Python，PHP，Ruby，Java，C，C#，Javascript，Perl及C++语言的驱动程序，社区中也提供了对Erlang及.NET等平台的驱动程序。</li><li>文件存储格式为BSON（一种JSON的扩展）。</li><li>可通过网络访问。</li></ul><h3 id="功能"><a href="#功能" class="headerlink" title="功能:"></a>功能:</h3><ul><li>面向集合的存储：适合存储对象及JSON形式的数据。</li><li>动态查询：Mongo支持丰富的查询表达式。查询指令使用JSON形式的标记，可轻易查询文档中内嵌的对象及数组。</li><li>完整的索引支持：包括文档内嵌对象及数组。Mongo的查询优化器会分析查询表达式，并生成一个高效的查询计划。</li><li>查询监视：Mongo包含一个监视工具用于分析数据库操作的性能。</li><li>复制及自动故障转移：Mongo数据库支持服务器之间的数据复制，支持主-从模式及服务器之间的相互复制。复制的主要目标是提供冗余及自动故障转移。</li><li>高效的传统存储方式：支持二进制数据及大型对象（如照片或图片）</li><li>自动分片以支持云级别的伸缩性：自动分片功能支持水平的数据库集群，可动态添加额外的机器。</li></ul><h3 id="适用场合"><a href="#适用场合" class="headerlink" title="适用场合:"></a>适用场合:</h3><ul><li>网站数据：Mongo非常适合实时的插入，更新与查询，并具备网站实时数据存储所需的复制及高度伸缩性。</li><li>缓存：由于性能很高，Mongo也适合作为信息基础设施的缓存层。在系统重启之后，由Mongo搭建的持久化缓存层可以避免下层的数据源过载。</li><li>大尺寸，低价值的数据：使用传统的关系型数据库存储一些数据时可能会比较昂贵，在此之前，很多时候程序员往往会选择传统的文件进行存储。</li><li>高伸缩性的场景：Mongo非常适合由数十或数百台服务器组成的数据库。Mongo的路线图中已经包含对MapReduce引擎的内置支持。</li><li>用于对象及JSON数据的存储：Mongo的BSON数据格式非常适合文档化格式的存储及查询。</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>mongod.exe 是用来连接到mongo数据库服务器的，即服务器端。</li><li>mongo.exe 是用来启动MongoDB shell的，即客户端。  </li></ul><ul><li>其他文件：  <ul><li>Mongodump.exe：逻辑备份工具。</li><li>mongorestore.exe：逻辑恢复工具。</li><li>mongoexport.exe：数据导出工具。</li><li>mongoimport.exe：数据导入工具。</li></ul></li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> Nosql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sqlserver统计当前库有多少表</title>
      <link href="/2020/02/23/Sqlserver%E7%BB%9F%E8%AE%A1%E5%BD%93%E5%89%8D%E5%BA%93%E6%9C%89%E5%A4%9A%E5%B0%91%E8%A1%A8/"/>
      <url>/2020/02/23/Sqlserver%E7%BB%9F%E8%AE%A1%E5%BD%93%E5%89%8D%E5%BA%93%E6%9C%89%E5%A4%9A%E5%B0%91%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="统计当前数据库表实现脚本"><a href="#统计当前数据库表实现脚本" class="headerlink" title="统计当前数据库表实现脚本"></a>统计当前数据库表实现脚本</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">--创建临时表  </span><br><span class="line">CREATE TABLE #tablespaceinfo</span><br><span class="line">    (</span><br><span class="line">      nameinfo VARCHAR(500) ,</span><br><span class="line">      rowsinfo BIGINT ,</span><br><span class="line">      reserved VARCHAR(20) ,</span><br><span class="line">      datainfo VARCHAR(20) ,</span><br><span class="line">      index_size VARCHAR(20) ,</span><br><span class="line">      unused VARCHAR(20)</span><br><span class="line">    )  </span><br><span class="line"></span><br><span class="line">--声明表变量  </span><br><span class="line">DECLARE @tablename VARCHAR(255);  </span><br><span class="line"></span><br><span class="line">--定义游标  </span><br><span class="line">DECLARE Info_cursor CURSOR</span><br><span class="line">FOR</span><br><span class="line">    SELECT  '[' + [name] + ']'</span><br><span class="line">    FROM    sys.tables</span><br><span class="line">    WHERE   type = 'U';  </span><br><span class="line"></span><br><span class="line">--开始游标  </span><br><span class="line">OPEN Info_cursor  </span><br><span class="line">FETCH NEXT FROM Info_cursor INTO @tablename  </span><br><span class="line"> </span><br><span class="line">WHILE @@FETCH_STATUS = 0</span><br><span class="line">    BEGIN </span><br><span class="line">        INSERT  INTO #tablespaceinfo</span><br><span class="line">                EXEC sp_spaceused @tablename  </span><br><span class="line">        FETCH NEXT FROM Info_cursor  </span><br><span class="line">    INTO @tablename  </span><br><span class="line">    END </span><br><span class="line"></span><br><span class="line">--关闭游标  </span><br><span class="line">CLOSE Info_cursor  </span><br><span class="line">DEALLOCATE Info_cursor  </span><br><span class="line"> </span><br><span class="line">--创建临时表   </span><br><span class="line">CREATE TABLE [#tmptb]</span><br><span class="line">    (</span><br><span class="line">      TableName VARCHAR(50) ,</span><br><span class="line">      DataInfo BIGINT ,</span><br><span class="line">      RowsInfo BIGINT ,</span><br><span class="line">      Spaceperrow AS ( CASE RowsInfo</span><br><span class="line">                         WHEN 0 THEN 0</span><br><span class="line">                         ELSE DataInfo / RowsInfo</span><br><span class="line">                       END ) PERSISTED</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">--插入数据到临时表  </span><br><span class="line">INSERT  INTO [#tmptb]</span><br><span class="line">        ( [TableName] ,</span><br><span class="line">          [DataInfo] ,</span><br><span class="line">          [RowsInfo]</span><br><span class="line">        )</span><br><span class="line">        SELECT  [nameinfo] ,</span><br><span class="line">                CAST(REPLACE([datainfo], 'KB', '') AS BIGINT) AS 'datainfo' ,</span><br><span class="line">                [rowsinfo]</span><br><span class="line">        FROM    #tablespaceinfo</span><br><span class="line">        ORDER BY CAST(REPLACE(reserved, 'KB', '') AS INT) DESC  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--汇总记录  </span><br><span class="line">SELECT  [tbspinfo].* ,</span><br><span class="line">        [tmptb].[Spaceperrow] AS '每行记录大概占用空间（KB）'</span><br><span class="line">FROM    [#tablespaceinfo] AS tbspinfo ,</span><br><span class="line">        [#tmptb] AS tmptb</span><br><span class="line">WHERE   [tbspinfo].[nameinfo] = [tmptb].[TableName]  and [tbspinfo].[nameinfo] <>'EntNameIndex2' and [tbspinfo].rowsinfo>0</span><br><span class="line">ORDER BY CAST(REPLACE([tbspinfo].[reserved], 'KB', '') AS INT) DESC</span><br></pre></td></tr></tbody></table></figure></div><h2 id="去重保留最大值那条"><a href="#去重保留最大值那条" class="headerlink" title="去重保留最大值那条"></a>去重保留最大值那条</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">--Year和MCode一样的前提下的重复数据，只要Cu值最大的那条</span><br><span class="line">select * from tbMonitorResults t</span><br><span class="line">where  1=1 and Year between 2016 and 2020</span><br><span class="line">and  not exists(select 1 from tbMonitorResults where Year = t.Year and MCode=t.MCode </span><br><span class="line">and  Cu > t.Cu)</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Sqlserver </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sqlserver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins实现CICD</title>
      <link href="/2020/02/23/Jenkins%E5%AE%9E%E7%8E%B0CICD/"/>
      <url>/2020/02/23/Jenkins%E5%AE%9E%E7%8E%B0CICD/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="1-安装OpenJDK8"><a href="#1-安装OpenJDK8" class="headerlink" title="1.安装OpenJDK8"></a>1.<a href="#java">安装OpenJDK8</a></h3><h3 id="2-安装Jenkins"><a href="#2-安装Jenkins" class="headerlink" title="2.安装Jenkins"></a>2.<a href="#install">安装Jenkins</a></h3><h3 id="3-启动Jenkins"><a href="#3-启动Jenkins" class="headerlink" title="3.启动Jenkins"></a>3.<a href="#startup">启动Jenkins</a></h3><h3 id="4-配置Jenkins"><a href="#4-配置Jenkins" class="headerlink" title="4.配置Jenkins"></a>4.<a href="#config">配置Jenkins</a></h3><h3 id="5-参考文档"><a href="#5-参考文档" class="headerlink" title="5.参考文档"></a>5.<a href="#reference">参考文档</a></h3><h2 id="一-安装OpenJDK8"><a href="#一-安装OpenJDK8" class="headerlink" title=" (一) 安装OpenJDK8"></a><p id="java"> (一) 安装OpenJDK8</p></h2><h3 id="1-检查是否已安装JDK及卸载"><a href="#1-检查是否已安装JDK及卸载" class="headerlink" title="1.检查是否已安装JDK及卸载"></a>1.检查是否已安装JDK及卸载</h3><pre><code>yum list installed | grep [java][jdk]</code></pre><h3 id="2-卸载JAVA环境"><a href="#2-卸载JAVA环境" class="headerlink" title="2.卸载JAVA环境"></a>2.卸载JAVA环境</h3><pre><code>yum -y remove java-1.6.0-openjdk*  //表时卸载所有openjdk相关文件输入yum -y remove tzdata-java.noarch   //卸载tzdata-java</code></pre><h3 id="3-安装JDK"><a href="#3-安装JDK" class="headerlink" title="3.安装JDK"></a>3.安装JDK</h3><p>查看JDK软件包列表   </p><pre><code>yum search java | grep -i --color jdk</code></pre><p>选择版本安装  </p><pre><code>yum install -y java-1.8.0-openjdk java-1.8.0-openjdk-devel  #或者如下命令，安装jdk1.8.0的所有文件  yum install -y java-1.8.0-openjdk*  </code></pre><p>查看JDK是否安装成功</p><pre><code>java -version</code></pre><h3 id="4-配置环境变量"><a href="#4-配置环境变量" class="headerlink" title="4.配置环境变量"></a>4.配置环境变量</h3><p>1.JDK默认安装路径/usr/lib/jvm  </p><pre><code>ls /usr/lib/jvm</code></pre><p>2.在<code>/etc/profile</code> 文件添加如下命令</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># set java environment  </span><br><span class="line">JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.181-3.b13.el7_5.x86_64</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin  </span><br><span class="line">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar  </span><br><span class="line">export JAVA_HOME  CLASSPATH  PATH</span><br></pre></td></tr></tbody></table></figure></div><p>3.保存 profile 文件，执行以下命令  </p><pre><code>source  /etc/profile</code></pre><p>4.使用如下命令，查看JDK变量</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo $JAVA_HOME  </span><br><span class="line">echo $PATH  </span><br><span class="line">echo $CLASSPATH</span><br></pre></td></tr></tbody></table></figure></div><hr><h2 id="二-安装Jenkins"><a href="#二-安装Jenkins" class="headerlink" title=" (二) 安装Jenkins"></a><p id="install"> (二) 安装Jenkins</p></h2><h3 id="添加Jenkins-repo"><a href="#添加Jenkins-repo" class="headerlink" title="添加Jenkins repo:"></a>添加Jenkins repo:</h3><pre><code>wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins.io/redhat-stable/jenkins.reporpm --import http://pkg.jenkins.io/redhat-stable/jenkins.io.key</code></pre><h3 id="更新Jenkins-repo-cache："><a href="#更新Jenkins-repo-cache：" class="headerlink" title="更新Jenkins repo cache："></a>更新Jenkins repo cache：</h3><pre><code>yum clean allyum makecache</code></pre><h3 id="国内镜像安装Jenkins："><a href="#国内镜像安装Jenkins：" class="headerlink" title="国内镜像安装Jenkins："></a>国内镜像安装Jenkins：</h3><pre><code>wget https://mirrors.tuna.tsinghua.edu.cn/jenkins/redhat-stable/jenkins-2.164.2-1.1.noarch.rpmrpm -ivh jenkins-2.164.2-1.1.noarch.rpm</code></pre><hr><h2 id="三-启动Jenkins"><a href="#三-启动Jenkins" class="headerlink" title=" (三) 启动Jenkins"></a><p id="startup"> (三) 启动Jenkins</p></h2><h3 id="安装完成后启动Jenkins："><a href="#安装完成后启动Jenkins：" class="headerlink" title="安装完成后启动Jenkins："></a>安装完成后启动Jenkins：</h3><pre><code># 检查Jenkins服务状态sudo systemctl status jenkins# 设置为开机自启动sudo systemctl enable jenkins# 启动Jenkins服务sudo systemctl start jenkins</code></pre><h3 id="为Jenkins开启防火墙8080端口："><a href="#为Jenkins开启防火墙8080端口：" class="headerlink" title="为Jenkins开启防火墙8080端口："></a>为Jenkins开启防火墙8080端口：</h3><pre><code># 检查防火墙配置sudo firewall-cmd --list-all# 开启8080端口sudo firewall-cmd --zone=public --add-port=8080/tcp sudo firewall-cmd --zone=public --add-port=8080/tcp --permanent# 重新加载防火墙配置sudo firewall-cmd --reload</code></pre><h4 id="在浏览器中访问http-8080确认是否可以打开Jenkins的Getting-Started页面。"><a href="#在浏览器中访问http-8080确认是否可以打开Jenkins的Getting-Started页面。" class="headerlink" title="在浏览器中访问http://:8080确认是否可以打开Jenkins的Getting Started页面。"></a>在浏览器中访问http://<jenkins_host_ip>:8080确认是否可以打开Jenkins的Getting Started页面。</jenkins_host_ip></h4><h4 id="运行sudo-more-var-lib-jenkins-secrets-initialAdminPassword，复制Jenkins初始密码，输入到Jenkins的Getting-Started页面来Unlock-Jenkins。"><a href="#运行sudo-more-var-lib-jenkins-secrets-initialAdminPassword，复制Jenkins初始密码，输入到Jenkins的Getting-Started页面来Unlock-Jenkins。" class="headerlink" title="运行sudo more /var/lib/jenkins/secrets/initialAdminPassword，复制Jenkins初始密码，输入到Jenkins的Getting Started页面来Unlock Jenkins。"></a>运行<code>sudo more /var/lib/jenkins/secrets/initialAdminPassword</code>，复制Jenkins初始密码，输入到Jenkins的Getting Started页面来Unlock Jenkins。</h4><hr><h2 id="四-配置Jenkins"><a href="#四-配置Jenkins" class="headerlink" title=" (四) 配置Jenkins"></a><p id="config"> (四) 配置Jenkins</p></h2><p>选择“Install Suggested Plugins”继续配置Jenkins，等待Jenkins插件安装完成。</p><p>创建Jenkins的管理员账号，用该账号来登录Jenkins继续其它配置。</p><hr><h2 id="五-参考文档"><a href="#五-参考文档" class="headerlink" title=" (五) 参考文档"></a><p id="reference"> (五) 参考文档</p></h2><blockquote><p><a href="https://blog.csdn.net/nklinsirui/article/details/89382092" target="_blank" rel="noopener">《CentOS7安装Jenkins》</a><br><a href="https://www.cnblogs.com/xuhuale/p/11062293.html" target="_blank" rel="noopener">《Linux下Jenkins与GitHub自动构建NetCore与部署》</a><br><a href="https://mp.weixin.qq.com/s/1x4krc6VIzRpcF3OJTSjQA" target="_blank" rel="noopener">《基于Jenkins的持续交付全流程设计与实践》</a><br><a href="https://mp.weixin.qq.com/s/0HCcYgNnyi30lsv9ozch1Q" target="_blank" rel="noopener">《Docker+Jenkins+Gogs 自动构建.Net Core》</a>  </p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> CICD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CICD </tag>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TeamCity实现CICD</title>
      <link href="/2020/02/23/TeamCity%E5%AE%9E%E7%8E%B0CICD/"/>
      <url>/2020/02/23/TeamCity%E5%AE%9E%E7%8E%B0CICD/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body></body></html>]]></content>
      
      
      <categories>
          
          <category> CICD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CICD </tag>
            
            <tag> TeamCity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DaoCloud实现CICD</title>
      <link href="/2020/02/23/DaoCloud%E5%AE%9E%E7%8E%B0CICD/"/>
      <url>/2020/02/23/DaoCloud%E5%AE%9E%E7%8E%B0CICD/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body></body></html>]]></content>
      
      
      <categories>
          
          <category> CICD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DaoCloud </tag>
            
            <tag> Linux </tag>
            
            <tag> CICD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Swarm 容器编排</title>
      <link href="/2020/02/23/Docker-Swarm-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92/"/>
      <url>/2020/02/23/Docker-Swarm-%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body></body></html>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker水平扩展和负载均衡</title>
      <link href="/2020/02/23/Docker%E6%B0%B4%E5%B9%B3%E6%89%A9%E5%B1%95%E5%92%8C%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/2020/02/23/Docker%E6%B0%B4%E5%B9%B3%E6%89%A9%E5%B1%95%E5%92%8C%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body></body></html>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Compose 实践</title>
      <link href="/2020/02/23/Docker-Compose-%E5%AE%9E%E8%B7%B5/"/>
      <url>/2020/02/23/Docker-Compose-%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body></body></html>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 持久化存储及数据共享</title>
      <link href="/2020/02/23/Docker-%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/"/>
      <url>/2020/02/23/Docker-%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body></body></html>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dockerfile语法梳理及实践</title>
      <link href="/2020/02/23/Dockerfile%E8%AF%AD%E6%B3%95%E6%A2%B3%E7%90%86%E5%8F%8A%E5%AE%9E%E8%B7%B5/"/>
      <url>/2020/02/23/Dockerfile%E8%AF%AD%E6%B3%95%E6%A2%B3%E7%90%86%E5%8F%8A%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="你必须知道的Dockerfile"><a href="#你必须知道的Dockerfile" class="headerlink" title="你必须知道的Dockerfile"></a>你必须知道的Dockerfile</h2><h3 id="一、关于Dockerfile"><a href="#一、关于Dockerfile" class="headerlink" title="一、关于Dockerfile"></a>一、关于Dockerfile</h3><p>在Docker中创建镜像最常用的方式，就是使用Dockerfile。<br>Dockerfile是一个Docker镜像的描述文件，我们可以理解成火箭发射的A、B、C、D…的步骤。Dockerfile其内部包含了一条条的指令，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。</p><p>一个Dockerfile的示例如下所示：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#基于centos镜像</span><br><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">#维护人的信息</span><br><span class="line">MAINTAINER The CentOS Project <303323496@qq.com></span><br><span class="line"></span><br><span class="line">#安装httpd软件包</span><br><span class="line">RUN yum -y update</span><br><span class="line">RUN yum -y install httpd</span><br><span class="line"></span><br><span class="line">#开启80端口</span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">#复制网站首页文件至镜像中web站点下</span><br><span class="line">ADD index.html /var/www/html/index.html</span><br><span class="line"></span><br><span class="line">#复制该脚本至镜像中，并修改其权限</span><br><span class="line">ADD run.sh /run.sh</span><br><span class="line">RUN chmod 775 /run.sh</span><br><span class="line"></span><br><span class="line">#当启动容器时执行的脚本文件</span><br><span class="line">CMD ["/run.sh"]</span><br></pre></td></tr></tbody></table></figure></div><p>　　由上可知，Dockerfile结构大致分为四个部分：</p><p>　　（1）基础镜像信息</p><p>　　（2）维护者信息</p><p>　　（3）镜像操作指令</p><p>　　（4）容器启动时执行指令。</p><p>　Dockerfile每行支持一条指令，每条指令可带多个参数，支持使用以#号开头的注释。下面会对上面使用到的一些常用指令做一些介绍。</p><h3 id="二、Dockerfile常用指令"><a href="#二、Dockerfile常用指令" class="headerlink" title="二、Dockerfile常用指令"></a>二、Dockerfile常用指令</h3><p>首先，来一张通俗易懂的全景图：</p><p><a href="/2020/02/23/Dockerfile%E8%AF%AD%E6%B3%95%E6%A2%B3%E7%90%86%E5%8F%8A%E5%AE%9E%E8%B7%B5/Dockerfile.png" data-fancybox="group" data-caption="Dockerfile" class="fancybox"><img alt="Dockerfile" title="Dockerfile" data-src="/2020/02/23/Dockerfile%E8%AF%AD%E6%B3%95%E6%A2%B3%E7%90%86%E5%8F%8A%E5%AE%9E%E8%B7%B5/Dockerfile.png" class="lazyload"></a></p><h4 id="2-1-FROM"><a href="#2-1-FROM" class="headerlink" title="2.1 FROM"></a>2.1 FROM</h4><p>指明构建的新镜像是来自于哪个基础镜像，例如:</p><pre><code>FROM centos:6</code></pre><h4 id="2-2-MAINTAINER"><a href="#2-2-MAINTAINER" class="headerlink" title="2.2 MAINTAINER"></a>2.2 MAINTAINER</h4><p>指明镜像维护着及其联系方式（一般是邮箱地址），例如：</p><pre><code>MAINTAINER Edison Zhou <edisonchou@hotmail.com></edisonchou@hotmail.com></code></pre><p>不过，MAINTAINER并不推荐使用，更推荐使用LABEL来指定镜像作者，例如：</p><pre><code>LABEL maintainer="edisonzhou.cn"</code></pre><h4 id="2-3-RUN"><a href="#2-3-RUN" class="headerlink" title="2.3 RUN"></a>2.3 RUN</h4><p>构建镜像时运行的Shell命令，例如：</p><pre><code>RUN ["yum", "install", "httpd"]RUN yum install httpd</code></pre><p>又如，我们在使用微软官方ASP.NET Core Runtime镜像时往往会加上以下RUN命令，弥补无法在默认镜像下使用Drawing相关接口的缺憾：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">FROM microsoft/dotnet:2.2.1-aspnetcore-runtime</span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install -y libgdiplus</span><br><span class="line">RUN apt-get install -y libc6-dev</span><br><span class="line">RUN ln -s /usr/lib/libgdiplus.so /lib/x86_64-linux-gnu/libgdiplus.so</span><br></pre></td></tr></tbody></table></figure></div><h4 id="2-4-CMD"><a href="#2-4-CMD" class="headerlink" title="2.4 CMD"></a>2.4 CMD</h4><p>启动容器时执行的Shell命令，例如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">CMD ["-C", "/start.sh"] </span><br><span class="line">CMD ["/usr/sbin/sshd", "-D"] </span><br><span class="line">CMD /usr/sbin/sshd -D</span><br></pre></td></tr></tbody></table></figure></div><h4 id="2-5-EXPOSE"><a href="#2-5-EXPOSE" class="headerlink" title="2.5 EXPOSE"></a>2.5 EXPOSE</h4><p>声明容器运行的服务端口，例如：</p><pre><code>EXPOSE 80 443</code></pre><h4 id="2-6-ENV"><a href="#2-6-ENV" class="headerlink" title="2.6 ENV"></a>2.6 ENV</h4><p>设置环境内环境变量，例如：</p><pre><code>ENV MYSQL_ROOT_PASSWORD 123456ENV JAVA_HOME /usr/local/jdk1.8.0_45</code></pre><h4 id="2-7-ADD"><a href="#2-7-ADD" class="headerlink" title="2.7 ADD"></a>2.7 ADD</h4><p>拷贝文件或目录到镜像中，例如：  </p><pre><code>ADD <src>...<dest>ADD html.tar.gz /var/www/htmlADD https://xxx.com/html.tar.gz /var/www/html</dest></src></code></pre><p>PS：如果是URL或压缩包，会自动下载或自动解压。</p><h4 id="2-8-COPY"><a href="#2-8-COPY" class="headerlink" title="2.8 COPY"></a>2.8 COPY</h4><p>拷贝文件或目录到镜像中，用法同ADD，只是不支持自动下载和解压，例如：</p><pre><code>COPY ./start.sh /start.sh</code></pre><h4 id="2-9-ENTRYPOINT"><a href="#2-9-ENTRYPOINT" class="headerlink" title="2.9 ENTRYPOINT"></a>2.9 ENTRYPOINT</h4><p>启动容器时执行的Shell命令，同CMD类似，只是由ENTRYPOINT启动的程序不会被docker run命令行指定的参数所覆盖，而且，这些命令行参数会被当作参数传递给ENTRYPOINT指定指定的程序，例如：</p><pre><code>ENTRYPOINT ["/bin/bash", "-C", "/start.sh"]ENTRYPOINT /bin/bash -C '/start.sh'</code></pre><p>PS：Dockerfile文件中也可以存在多个ENTRYPOINT指令，但仅有最后一个会生效。</p><h4 id="2-10-VOLUME"><a href="#2-10-VOLUME" class="headerlink" title="2.10 VOLUME"></a>2.10 VOLUME</h4><p>指定容器挂载点到宿主机自动生成的目录或其他容器，例如：</p><pre><code>VOLUME ["/var/lib/mysql"]</code></pre><p>PS：一般不会在Dockerfile中用到，更常见的还是在docker run的时候指定-v数据卷。</p><h4 id="2-11-USER"><a href="#2-11-USER" class="headerlink" title="2.11 USER"></a>2.11 USER</h4><p>为RUN、CMD和ENTRYPOINT执行Shell命令指定运行用户，例如：</p><pre><code>USER <user>[:<usergroup>]USER <uid>[:<uid>]USER edisonzhou</uid></uid></usergroup></user></code></pre><h4 id="2-12-WORKDIR"><a href="#2-12-WORKDIR" class="headerlink" title="2.12 WORKDIR"></a>2.12 WORKDIR</h4><p>为RUN、CMD、ENTRYPOINT以及COPY和AND设置工作目录，例如：</p><pre><code>WORKDIR /data</code></pre><h4 id="2-13-HEALTHCHECK"><a href="#2-13-HEALTHCHECK" class="headerlink" title="2.13 HEALTHCHECK"></a>2.13 HEALTHCHECK</h4><p>告诉Docker如何测试容器以检查它是否仍在工作，即健康检查，例如：</p><pre><code>HEALTHCHECK --interval=5m --timeout=3s --retries=3 \CMD curl -f http:/localhost/ || exit 1</code></pre><p>其中，一些选项的说明：</p><ul><li>interval=DURATION (default: 30s)：每隔多长时间探测一次，默认30秒  </li></ul><ul><li>timeout= DURATION (default: 30s)：服务响应超时时长，默认30秒  </li><li>start-period= DURATION (default: 0s)：服务启动多久后开始探测，默认0秒  </li><li>retries=N (default: 3)：认为检测失败几次为宕机，默认3次 </li></ul><p>一些返回值的说明：  </p><ol><li>：容器成功是健康的，随时可以使用  </li><li>：不健康的容器无法正常工作  </li><li>：保留不使用此退出代码  </li></ol><h4 id="2-14-ARG"><a href="#2-14-ARG" class="headerlink" title="2.14 ARG"></a>2.14 ARG</h4><p>在构建镜像时，指定一些参数，例如：</p><pre><code>FROM centos:6ARG user # ARG user=rootUSER $user</code></pre><p>这时，我们在docker build时可以带上自定义参数user了，如下所示：</p><pre><code>docker build --build-arg user=edisonzhou Dockerfile .</code></pre><blockquote><p>原文链接： <a href="https://www.cnblogs.com/edisonchou/p/dockerfile_inside_introduction.html" target="_blank" rel="noopener">https://www.cnblogs.com/edisonchou/p/dockerfile_inside_introduction.html</a><br>相关推荐： <a href="https://www.cnblogs.com/edisonchou/p/aspnet_core_k8s_artcles_index.html" target="_blank" rel="noopener">https://www.cnblogs.com/edisonchou/p/aspnet_core_k8s_artcles_index.html</a></p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 常用操作</title>
      <link href="/2020/02/23/Docker-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/02/23/Docker-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="Docker-常用操作"><a href="#Docker-常用操作" class="headerlink" title="Docker 常用操作"></a>Docker 常用操作</h2><h3 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h3><ol><li>查询镜像：<code>docker search <imagename></imagename></code></li><li>获取镜像：<code>docker pull <imagename></imagename></code></li><li>获取镜像的具体信息：<code>docker inspect <imageid></imageid></code></li><li>删除容器： <code>docker rm <containerid></containerid></code></li><li>删除镜像： <code>docker rmi <imageid></imageid></code></li><li>查看镜像的层：<code>docker history  <imageid></imageid></code></li></ol><h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><ol><li>创建容器：<code>docker create -it <imagename></imagename></code></li><li>启动容器：<code>docker start <containerid></containerid></code></li><li>创建并启动容器：<code>docker run ImageName></code></li><li>删除容器：<code>docker rm <containerid></containerid></code></li><li>停止容器：<code>docker stop <containerid></containerid></code></li><li>重启容器：<code>docker restart <containerid></containerid></code></li><li>进入容器：<code>docker exec -it CONTAINER ID bash 或 /bin/bash</code></li><li>获取退出运行的容器：<code>docker container ls -aq</code></li><li>删除退出运行的所有容器：<code>docker rm $(docker container ls -aq)</code></li></ol><h3 id="简写操作"><a href="#简写操作" class="headerlink" title="简写操作"></a>简写操作</h3><ol><li>docker image ls 简写–> docker images</li><li>docker container ls -a 简写–> docker ps -a</li><li>docker container commit 简写 docker commit</li><li>docker container build  简写 docker build</li></ol><hr><h2 id="Docker-概念"><a href="#Docker-概念" class="headerlink" title="Docker 概念"></a>Docker 概念</h2><h3 id="1-container-跟-image-的关系"><a href="#1-container-跟-image-的关系" class="headerlink" title="1. container 跟 image 的关系"></a>1. container 跟 image 的关系</h3><blockquote><h4 id="类实例跟类的关系；"><a href="#类实例跟类的关系；" class="headerlink" title="类实例跟类的关系；"></a>类实例跟类的关系；</h4></blockquote><h4 id="在image-layer之上建立一个container-layer（可读写）；"><a href="#在image-layer之上建立一个container-layer（可读写）；" class="headerlink" title="在image layer之上建立一个container layer（可读写）；"></a>在image layer之上建立一个container layer（可读写）；</h4><blockquote><h4 id="container是在image的基础上产生的，通过image创建（copy）；"><a href="#container是在image的基础上产生的，通过image创建（copy）；" class="headerlink" title="container是在image的基础上产生的，通过image创建（copy）；"></a>container是在image的基础上产生的，通过image创建（copy）；</h4><h4 id="image负责app的存储和分发，container负责运行app；"><a href="#image负责app的存储和分发，container负责运行app；" class="headerlink" title="image负责app的存储和分发，container负责运行app；"></a>image负责app的存储和分发，container负责运行app；</h4></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 命令大全</title>
      <link href="/2020/02/23/Docker-%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
      <url>/2020/02/23/Docker-%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="Docker-命令大全"><a href="#Docker-命令大全" class="headerlink" title="Docker 命令大全"></a>Docker 命令大全</h1><h2 id="容器生命周期管理"><a href="#容器生命周期管理" class="headerlink" title="容器生命周期管理"></a>容器生命周期管理</h2><ul><li><a href="https://www.runoob.com/docker/docker-run-command.html" target="_blank" rel="noopener">run</a></li><li><a href="https://www.runoob.com/docker/docker-start-stop-restart-command.html" target="_blank" rel="noopener">start/stop/restart</a></li><li><a href="https://www.runoob.com/docker/docker-kill-command.html" target="_blank" rel="noopener">kill</a></li><li><a href="https://www.runoob.com/docker/docker-rm-command.html" target="_blank" rel="noopener">rm</a></li><li><a href="https://www.runoob.com/docker/docker-pause-unpause-command.html" target="_blank" rel="noopener">pause/unpause</a></li><li><a href="https://www.runoob.com/docker/docker-create-command.html" target="_blank" rel="noopener">create</a></li><li><a href="https://www.runoob.com/docker/docker-exec-command.html" target="_blank" rel="noopener">exec</a></li></ul><h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h2><ul><li><a href="https://www.runoob.com/docker/docker-ps-command.html" target="_blank" rel="noopener">ps      </a></li><li><a href="https://www.runoob.com/docker/docker-inspect-command.html" target="_blank" rel="noopener">inspect </a></li><li><a href="https://www.runoob.com/docker/docker-top-command.html" target="_blank" rel="noopener">top     </a></li><li><a href="https://www.runoob.com/docker/docker-attach-command.html" target="_blank" rel="noopener">attach  </a></li><li><a href="https://www.runoob.com/docker/docker-events-command.html" target="_blank" rel="noopener">events  </a></li><li><a href="https://www.runoob.com/docker/docker-logs-command.html" target="_blank" rel="noopener">logs    </a></li><li><a href="https://www.runoob.com/docker/docker-wait-command.html" target="_blank" rel="noopener">wait    </a></li><li><a href="https://www.runoob.com/docker/docker-export-command.html" target="_blank" rel="noopener">export  </a></li><li><a href="https://www.runoob.com/docker/docker-port-command.html" target="_blank" rel="noopener">port    </a></li></ul><h2 id="容器rootfs命令"><a href="#容器rootfs命令" class="headerlink" title="容器rootfs命令"></a>容器rootfs命令</h2><ul><li><a href="https://www.runoob.com/docker/docker-commit-command.html" target="_blank" rel="noopener">commit</a></li><li><a href="https://www.runoob.com/docker/docker-cp-command.html" target="_blank" rel="noopener">cp    </a></li><li><a href="https://www.runoob.com/docker/docker-diff-command.html" target="_blank" rel="noopener">diff  </a></li></ul><h2 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h2><ul><li><a href="https://www.runoob.com/docker/docker-login-command.html" target="_blank" rel="noopener">login </a></li><li><a href="https://www.runoob.com/docker/docker-pull-command.html" target="_blank" rel="noopener">pull  </a></li><li><a href="https://www.runoob.com/docker/docker-push-command.html" target="_blank" rel="noopener">push  </a></li><li><a href="https://www.runoob.com/docker/docker-search-command.html" target="_blank" rel="noopener">search</a></li></ul><h2 id="本地镜像管理"><a href="#本地镜像管理" class="headerlink" title="本地镜像管理"></a>本地镜像管理</h2><ul><li><a href="https://www.runoob.com/docker/docker-images-command.html" target="_blank" rel="noopener">images  </a></li><li><a href="https://www.runoob.com/docker/docker-rmi-command.html" target="_blank" rel="noopener">rmi     </a></li><li><a href="https://www.runoob.com/docker/docker-tag-command.html" target="_blank" rel="noopener">tag     </a></li><li><a href="https://www.runoob.com/docker/docker-build-command.html" target="_blank" rel="noopener">build   </a></li><li><a href="https://www.runoob.com/docker/docker-history-command.html" target="_blank" rel="noopener">history </a></li><li><a href="https://www.runoob.com/docker/docker-save-command.html" target="_blank" rel="noopener">save    </a></li><li><a href="https://www.runoob.com/docker/docker-load-command.html" target="_blank" rel="noopener">load    </a></li><li><a href="https://www.runoob.com/docker/docker-import-command.html" target="_blank" rel="noopener">import  </a></li></ul><h2 id="info-version"><a href="#info-version" class="headerlink" title="info|version"></a>info|version</h2><ul><li><a href="https://www.runoob.com/docker/docker-info-command.html" target="_blank" rel="noopener">info</a></li><li><a href="https://www.runoob.com/docker/docker-version-command.html" target="_blank" rel="noopener">version</a></li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Asp.Net之string.Join使用</title>
      <link href="/2020/02/23/Asp-Net%E4%B9%8Bstring-Join%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/02/23/Asp-Net%E4%B9%8Bstring-Join%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="sql-拼接方式"><a href="#sql-拼接方式" class="headerlink" title="sql+拼接方式"></a>sql+拼接方式</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static int InsertModel<t>(T t) where T : BaseModel</t></span><br><span class="line">       {</span><br><span class="line">           Type type = typeof(T);</span><br><span class="line">           string columnStrings = string.Join(",", type.GetProperties().Select(p => string.Format("[{0}]", p.Name)));</span><br><span class="line">           string sql = "insert into "+type.Name+"(";</span><br><span class="line">           foreach (var item in type.GetProperties())</span><br><span class="line">           {</span><br><span class="line">               if (item.Name != "Id")</span><br><span class="line">               {</span><br><span class="line">                   sql+=item.Name+",";</span><br><span class="line">               }</span><br><span class="line">           }</span><br><span class="line">           sql = sql.Substring(0, sql.Length - 1);</span><br><span class="line">           sql += ")";</span><br><span class="line">           sql+=" values(";</span><br><span class="line">           foreach (var item in type.GetProperties())</span><br><span class="line">           {</span><br><span class="line">               if (item.Name != "Id")</span><br><span class="line">               {</span><br><span class="line">                   sql += "'" + item.GetValue(t) + "',";</span><br><span class="line">               }</span><br><span class="line">           }</span><br><span class="line">           sql = sql.Substring(0, sql.Length - 1);</span><br><span class="line">           sql += ")";</span><br><span class="line">           return DbHelperSQL.ExecuteSql(sql);</span><br><span class="line"></span><br><span class="line">       }</span><br></pre></td></tr></tbody></table></figure></div><h2 id="优化-使用string-join-“-”-key-ToArray"><a href="#优化-使用string-join-“-”-key-ToArray" class="headerlink" title="优化,使用string.join(“,”,key.ToArray())"></a>优化,使用string.join(“,”,key.ToArray())</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public bool Insert<t>(T t) where T : BaseModel</t></span><br><span class="line">       {</span><br><span class="line">           //插入实体时要判断一下时间的插入.还可以通过特性来判断一下数据的长度</span><br><span class="line">           //约定的id为自增长.</span><br><span class="line">           var type = typeof(T);</span><br><span class="line">           var keys = new List<string>();</string></span><br><span class="line">           var values = new List<string>();</string></span><br><span class="line">           var par = new List<sqlparameter>();</sqlparameter></span><br><span class="line">           foreach (var item in type.GetProperties())</span><br><span class="line">           {</span><br><span class="line">               var value = item.GetValue(t);</span><br><span class="line">               if (item.Name.ToLower() == "id") continue;</span><br><span class="line">               keys.Add(item.Name);</span><br><span class="line">               values.Add("@" + item.Name);</span><br><span class="line">               par.Add(new SqlParameter("@" + item.Name, value));</span><br><span class="line">           }</span><br><span class="line">           var c = string.Join(",", keys.ToArray());</span><br><span class="line">           var v = string.Join(",", values.ToArray());</span><br><span class="line">           var sql = string.Format($"INSERT INTO [{type.Name}] ({c}) " +</span><br><span class="line">               $"VALUES({v})");</span><br><span class="line"></span><br><span class="line">           return ExcuteSql<bool>(sql, cmd =></bool></span><br><span class="line">           {</span><br><span class="line">               foreach (var parameter in par)</span><br><span class="line">                   cmd.Parameters.Add(parameter);</span><br><span class="line"></span><br><span class="line">               var result = cmd.ExecuteNonQuery();</span><br><span class="line">               return result > 0;</span><br><span class="line">           });</span><br><span class="line"></span><br><span class="line">           //   return RunCmd(sql, par.ToArray());</span><br><span class="line">       }</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Asp.Net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Asp.Net </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议详解</title>
      <link href="/2020/02/23/HTTP%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/02/23/HTTP%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>当今web程序的开发技术真是百家争鸣，ASP.NET, PHP, JSP，Perl, AJAX 等等。 无论Web技术在未来如何发展，理解Web程序之间通信的基本协议相当重要, 因为它让我们理解了Web应用程序的内部工作. 本文将对HTTP协议进行详细的实例讲解，内容较多，希望大家耐心看。也希望对大家的开发工作或者测试工作有所帮助。使用Fiddler工具非常方便地捕获HTTP Request和HTTP Response,  关于Fiddler工具的用法，请看我另一篇博客<br><a href="http://www.cnblogs.com/TankXiao/archive/2012/02/06/2337728.html" target="_blank" rel="noopener">[Fiddler 教程]</a></p><h1 id="阅读目录"><a href="#阅读目录" class="headerlink" title="阅读目录"></a>阅读目录</h1><h2 id="1-协议详解"><a href="#1-协议详解" class="headerlink" title="1. 协议详解"></a>1. 协议详解</h2><p><a href="http://www.cnblogs.com/TankXiao/archive/2012/02/13/2342672.html" target="_blank" rel="noopener"> HTTP协议 (一) HTTP协议详解</a></p><h2 id="2-基本认证"><a href="#2-基本认证" class="headerlink" title="2.基本认证"></a>2.基本认证</h2><p><a href>HTTP协议 (二) 基本认证</a></p><h2 id="3-压缩"><a href="#3-压缩" class="headerlink" title="3.压缩"></a>3.压缩</h2><p><a href>HTTP协议 (三) 压缩</a></p><h2 id="4-缓存"><a href="#4-缓存" class="headerlink" title="4.缓存"></a>4.缓存</h2><p><a href="http://www.cnblogs.com/TankXiao/archive/2012/11/28/2793365.html" target="_blank" rel="noopener">HTTP协议 (四) 缓存</a></p><h2 id="5-代理"><a href="#5-代理" class="headerlink" title="5.代理"></a>5.代理</h2><p><a href="http://www.cnblogs.com/TankXiao/archive/2012/12/12/2794160.html" target="_blank" rel="noopener">HTTP协议 (五) 代理</a></p><h2 id="6-状态码详解"><a href="#6-状态码详解" class="headerlink" title="6.状态码详解"></a>6.状态码详解</h2><p><a href="http://www.cnblogs.com/TankXiao/archive/2013/01/08/2818542.html" target="_blank" rel="noopener">HTTP协议 (六) 状态码详解</a></p><h2 id="7-Cookie"><a href="#7-Cookie" class="headerlink" title="7.Cookie"></a>7.Cookie</h2><p><a href="http://www.cnblogs.com/TankXiao/archive/2013/04/15/2848906.html" target="_blank" rel="noopener">HTTP协议 (七) Cookie</a></p><blockquote><p>其他资料：<a href="https://mp.weixin.qq.com/s?__biz=MzU1MzE4OTU0OQ==&mid=2247483886&idx=2&sn=3b9a0dde6fa9b06f3fba6a0aeca83820&chksm=fbf7e82ccc80613ab4eeda8ced91d6b6b6c8143693e864711de395f112a7f1cdef257ec26ecb&mpshare=1&scene=1&srcid=&sharer_sharetime=1583060341102&sharer_shareid=b105a99d0b987865d2122100dce7799a&key=26c378d410f2b0d4f899c82e66436bb473a5410b4234cd8198273b9bd9971a52093efb8468886a5f1db5ca60b448f84a8f7df7d826cd98cad572e19a6ac473a1045826d034cbb2bc30b4eb91e245f85d&ascene=1&uin=MjM2MzIxNjY3Nw%3D%3D&devicetype=Windows+10&version=62080079&lang=zh_CN&exportkey=AR6Hl%2FHeCxjZmAjOmeywCUw%3D&pass_ticket=bV4Usm2l0lG61%2FZABVf1fTx%2B%2B2ywmAIjYe%2Bbr3wuzTfLqD4oc3IRR3KsfTBJwDxS" target="_blank" rel="noopener">《万字长文，最硬核的mysql知识总结》</a></p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> Asp.Net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Asp.Net </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jquery图片背景自适应</title>
      <link href="/2020/02/23/Jquery%E5%9B%BE%E7%89%87%E8%83%8C%E6%99%AF%E8%87%AA%E9%80%82%E5%BA%94/"/>
      <url>/2020/02/23/Jquery%E5%9B%BE%E7%89%87%E8%83%8C%E6%99%AF%E8%87%AA%E9%80%82%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>最近在做一个项目，要求实现背景自适应，何为背景自适应呢？  </p><p>1.如果背景图高度不够，background-size就应该是 auto 100%  </p><p>2.如果背景图宽度不够，background-size就应该是100% auto  </p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#css样式  </span><br><span class="line"></span><br><span class="line">#app {</span><br><span class="line">    position: fixed;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    background-image: url(fileurl);</span><br><span class="line">    background-position: center 0;</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-size: 100% auto;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"># js 脚本</span><br><span class="line"></span><br><span class="line">var bg_auto_size = function(src) {</span><br><span class="line">var dh = document.documentElement.clientHeight;</span><br><span class="line">var dw = document.documentElement.clientWidth;</span><br><span class="line">var img_url = src;</span><br><span class="line">var img = new Image();</span><br><span class="line">img.src = img_url;</span><br><span class="line">img.onload = function() {</span><br><span class="line">     var dRatio = dw / dh;</span><br><span class="line">     var imgRatio = img.width / img.height;</span><br><span class="line">     if(dRatio <= imgRatio) {</span><br><span class="line">         $('#app').css({ 'background-size': 'auto 100%', 'background-position': 'center 0' });</span><br><span class="line">     } else {</span><br><span class="line">         $('#app').css({ 'background-size': '100% auto', 'background-position': 'center 0' });</span><br><span class="line">     }</span><br><span class="line"> }</span><br><span class="line">};</span><br><span class="line">//这个图片的地址必须是![](75)绝对路径，如果用相对路径就会报错，文件识别不出，下面路径是我随便找的，不是实际背景的真实绝对路径</span><br><span class="line">var bg = 'fileurl';</span><br><span class="line">bg_auto_size(bg);</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WCF、WebAPI、WCFREST、WebService之间的区别</title>
      <link href="/2020/02/23/WCF%E3%80%81WebAPI%E3%80%81WCFREST%E3%80%81WebService%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/02/23/WCF%E3%80%81WebAPI%E3%80%81WCFREST%E3%80%81WebService%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在.net平台下，有大量的技术让你创建一个HTTP服务，像Web Service，WCF，现在又出了WebAPI。<br>在.net平台下，你有很多的选择来构建一个HTTP Services。我分享一下我对Web Service、WCF以及Web API的看法。</p><h2 id="Web-Service"><a href="#Web-Service" class="headerlink" title="Web Service"></a>Web Service</h2><p>1、它是基于SOAP协议的，数据格式是XML<br>2、只支持HTTP协议<br>3、它不是开源的，但可以被任意一个了解XML的人使用<br>4、它只能部署在IIS上</p><h2 id="WCF"><a href="#WCF" class="headerlink" title="WCF"></a>WCF</h2><p>1、这个也是基于SOAP的，数据格式是XML<br>2、这个是Web Service（ASMX）的进化版，可以支持各种各样的协议，像TCP，HTTP，HTTPS，Named Pipes, MSMQ.<br>3、WCF的主要问题是，它配置起来特别的繁琐<br>4、它不是开源的，但可以被任意一个了解XML的人使用<br>5、它可以部署应用程序中或者IIS上或者Windows服务中</p><h2 id="WCF-Rest"><a href="#WCF-Rest" class="headerlink" title="WCF Rest"></a>WCF Rest</h2><p>1、想使用WCF Rest service，你必须在WCF中使用webHttpBindings<br>2、它分别用[WebGet]和[WebInvoke]属性，实现了HTTP的GET和POST动词<br>3、要想使用其他的HTTP动词，你需要在IIS中做一些配置，使.svc文件可以接受这些动词的请求<br>4、使用WebGet通过参数传输数据，也需要配置。而且必须指定UriTemplate<br>5、它支持XML、JSON以及ATOM这些数据格式</p><h2 id="Web-API"><a href="#Web-API" class="headerlink" title="Web API"></a>Web API</h2><p>1、这是一个简单的构建HTTP服务的新框架<br>2、在.net平台上Web API 是一个开源的、理想的、构建REST-ful 服务的技术<br>3、不像WCF REST Service.它可以使用HTTP的全部特点（比如URIs、request/response头，缓存，版本控制，多种内容格式）<br>4、它也支持MVC的特征，像路由、控制器、action、filter、模型绑定、控制反转（IOC）或依赖注入（DI），单元测试。这些可以使程序更简单、更健壮<br>5、它可以部署在应用程序和IIS上<br>6、这是一个轻量级的框架，并且对限制带宽的设备，比如智能手机等支持的很好<br>7、Response可以被Web API的MediaTypeFormatter转换成Json、XML 或者任何你想转换的格式。</p><h1 id="WCF和WEB-API我该选择哪个？"><a href="#WCF和WEB-API我该选择哪个？" class="headerlink" title="WCF和WEB API我该选择哪个？"></a>WCF和WEB API我该选择哪个？</h1><p>1、当你想创建一个支持消息、消息队列、双工通信的服务时，你应该选择WCF<br>2、当你想创建一个服务，可以用更快速的传输通道时，像TCP、Named Pipes或者甚至是UDP（在WCF4.5中）,在其他传输通道不可用的时候也可以支持HTTP。<br>3、当你想创建一个基于HTTP的面向资源的服务并且可以使用HTTP的全部特征时（比如URIs、request/response头，缓存，版本控制，多种内容格式），你应该选择Web API<br>4、当你想让你的服务用于浏览器、手机、iPhone和平板电脑时，你应该选择Web API</p><blockquote><p>所有问题都会有一定程度的抽象和假设.</p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> Asp.Net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Asp.Net </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>支付宝沙箱环境搭建</title>
      <link href="/2020/02/23/%E6%94%AF%E4%BB%98%E5%AE%9D%E6%B2%99%E7%AE%B1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/02/23/%E6%94%AF%E4%BB%98%E5%AE%9D%E6%B2%99%E7%AE%B1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="沙箱环境的配置"><a href="#沙箱环境的配置" class="headerlink" title="沙箱环境的配置"></a>沙箱环境的配置</h1><h2 id="1-注册成为开发人员"><a href="#1-注册成为开发人员" class="headerlink" title="1.注册成为开发人员"></a>1.注册成为开发人员</h2><div class="note info">            <p>注册成功以后，点击以下链接，进入到支付宝官方的沙箱环境说明：<a href="https://docs.open.alipay.com/200/10531" target="_blank" rel="noopener">https://docs.open.alipay.com/200/10531</a> </p>          </div><a href="/2020/02/23/%E6%94%AF%E4%BB%98%E5%AE%9D%E6%B2%99%E7%AE%B1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/支付宝.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img class="full-image lazyload" data-src="/2020/02/23/%E6%94%AF%E4%BB%98%E5%AE%9D%E6%B2%99%E7%AE%B1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/支付宝.png"></a>  <h2 id="2-沙箱介绍"><a href="#2-沙箱介绍" class="headerlink" title="2.沙箱介绍"></a>2.沙箱介绍</h2><div class="note info">            <p>然后点击上图中的沙箱环境，跳转到自己的沙箱环境，配置自己的沙箱环境 。 </p>          </div><a href="/2020/02/23/%E6%94%AF%E4%BB%98%E5%AE%9D%E6%B2%99%E7%AE%B1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/沙箱应用.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img class="full-image lazyload" data-src="/2020/02/23/%E6%94%AF%E4%BB%98%E5%AE%9D%E6%B2%99%E7%AE%B1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/沙箱应用.png"></a>  ## 3.秘钥<div class="note info">            <p> 至于公钥秘钥的生成，点击 <a href="https://docs.open.alipay.com/291/105971" target="_blank" rel="noopener">https://docs.open.alipay.com/291/105971</a> 下载生成RSA密钥的工具，操作视频可以搜索该链接：<a href="https://openclub.alipay.com/index.php?c=video&fid=76" target="_blank" rel="noopener">https://openclub.alipay.com/index.php?c=video&fid=76</a> 查看生成秘钥的具体操作步骤。<br>重点是秘钥长度一定要是2048，一定要是2048.当时我测试的时候，生成的1024的，验签通过，但是一上传就提示失败。可见再牛逼的网站也是有bug的。  </p>          </div><h2 id="4-下载支付宝支付demo"><a href="#4-下载支付宝支付demo" class="headerlink" title="4.下载支付宝支付demo"></a>4.下载支付宝支付demo</h2><div class="note info">            <p>  打开demo，把配置里面的配置改成自己沙箱账号的配置。<br>支付宝支付demo下载的链接：<a href="https://docs.open.alipay.com/54/106682/" target="_blank" rel="noopener">https://docs.open.alipay.com/54/106682/</a><br>把配置文件里面的配置改成沙箱 </p>          </div><a href="/2020/02/23/%E6%94%AF%E4%BB%98%E5%AE%9D%E6%B2%99%E7%AE%B1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/代码网关设置.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img class="full-image lazyload" data-src="/2020/02/23/%E6%94%AF%E4%BB%98%E5%AE%9D%E6%B2%99%E7%AE%B1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/代码网关设置.png"></a>  <h2 id="5-下载沙箱钱包"><a href="#5-下载沙箱钱包" class="headerlink" title="5.下载沙箱钱包"></a>5.下载沙箱钱包</h2><div class="note info">            <p>进行支付测试，注意不是支付宝哦，详细查看文说明档。，目前沙箱钱包仅提供Android版本，可点击 <a href="https://sandbox.alipaydev.com/user/downloadApp.htm" target="_blank" rel="noopener" class="font-color:red">下载</a></p>          </div></body></html>]]></content>
      
      
      <categories>
          
          <category> Asp.Net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Asp.Net </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jquery属性过滤选择器</title>
      <link href="/2020/02/23/Jquery%E5%B1%9E%E6%80%A7%E8%BF%87%E6%BB%A4%E9%80%89%E6%8B%A9%E5%99%A8/"/>
      <url>/2020/02/23/Jquery%E5%B1%9E%E6%80%A7%E8%BF%87%E6%BB%A4%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在HTML文档中，元素的开始标记中通常包含有多个属性(attribute), 在jQuery中，除了直接使用id和class属性作为选择器之外，还可以根据各种属性（如title等）对由选择器查询到的元素进行过滤；<br>属性过滤选择器包含了在中括号”[]”中，而不是以冒号开头，通常使用”选择器[属性过滤选择器]”语法格式，<br>可以根据是否包含指定属性或者根据属性值从查询到的元素中进行筛选。</p><h2 id="1-包含属性过滤器"><a href="#1-包含属性过滤器" class="headerlink" title="1:包含属性过滤器"></a>1:包含属性过滤器</h2><p>用于选择包含给定属性的所有元素<br>格式:<code>$("selector[attribute]")</code></p><h2 id="2-属性等于过滤器"><a href="#2-属性等于过滤器" class="headerlink" title="2:属性等于过滤器"></a>2:属性等于过滤器</h2><p>用于筛选给定属性等于某特定值的所有元素<br><code>$("selector[attribute=value]")</code>;<br>例子：<code>$("input[name=accept]").attr("checked", "true")</code>;  //将name为accept的复选框选中</p><h2 id="3：属性包含过滤器"><a href="#3：属性包含过滤器" class="headerlink" title="3：属性包含过滤器"></a>3：属性包含过滤器</h2><p>用于选择指定属性值包含给定字符串的所有元素<br>格式:<code>$("selector[attribute*=value]")</code>;<br>例子:<code>$("input[name*='news']").val("name中包含有news的元素")</code>;  //将name中包含’news’的文本框添加文本值</p><h2 id="4：属性包含单词过滤器"><a href="#4：属性包含单词过滤器" class="headerlink" title="4：属性包含单词过滤器"></a>4：属性包含单词过滤器</h2><p>用于选择指定属性值中包含给定单词(由空格分隔)的元素<br>格式:<code>$("selector[attribute~=value]")</code>;<br>例子:<code>$('input[name~='news']').val("name中包含news单词的元素")</code>;</p><h2 id="5：属性不等于过滤器"><a href="#5：属性不等于过滤器" class="headerlink" title="5：属性不等于过滤器"></a>5：属性不等于过滤器</h2><p>用于选择不包含指定属性，或者包含指定属性但该属性不等于某个值的所有元素<br>格式:<code>$("selector[attribute!=value]")</code></p><h2 id="6：属性开始过滤器"><a href="#6：属性开始过滤器" class="headerlink" title="6：属性开始过滤器"></a>6：属性开始过滤器</h2><p>用于选择给定属性是以某特定值开始的所有元素<br>格式:<code>$("selector[attribute^=value]")</code></p><h2 id="7：属性结尾过滤器"><a href="#7：属性结尾过滤器" class="headerlink" title="7：属性结尾过滤器"></a>7：属性结尾过滤器</h2><p>用于选择给定属性是以某特定值结尾的所有元素<br>格式:$(“selector[attribute$=value]”) </p><h2 id="8：复合属性过滤器"><a href="#8：复合属性过滤器" class="headerlink" title="8：复合属性过滤器"></a>8：复合属性过滤器</h2><p>用于选择同时满足多个条件的所有元素<br>格式:<code>$("selector[selector1][selector2]...[selector[N]")</code><br>实例：<code>$("input[id][name^='news']").val("复合条件")</code>：用于选择包含有id属性并且name值以’news’开头的文本框，并对其值进行设置</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SublimeText常用的快捷键</title>
      <link href="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="Sublime-Text-3-快捷键（实用，快速换行等）"><a href="#Sublime-Text-3-快捷键（实用，快速换行等）" class="headerlink" title="Sublime Text 3 快捷键（实用，快速换行等）"></a>Sublime Text 3 快捷键（实用，快速换行等）</h1><h2 id="1-选择类"><a href="#1-选择类" class="headerlink" title="1.选择类"></a>1.选择类</h2><p>Ctrl+D ：选中光标所占的文本，继续操作则会选中下一个相同的文本。<br>Alt+F3：选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑。举个栗子：快速选中并更改所有相同的变量名、函数名等。<br>Ctrl+L：选中整行，继续操作则继续选择下一行，效果和 Shift+↓ 效果一样。<br>Ctrl+Shift+L ：先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行。<br>Ctrl+Shift+M：选择括号内的内容（继续选择父括号）。举个栗子：快速选中删除函数中的代码，重写函数体代码或重写括号内里的内容。<br>Ctrl+M：光标移动至括号内结束或开始的位置。<br>Ctrl+Enter：在下一行插入新行。举个例子：即使光标不在行尾，也能快速向下插入一行。<br>Ctrl+Shift+Enter： 在上一行插入新行。举个栗子：即使光标不在行首，也能快速向上插入一行。<br>Ctrl+Shift+[ ：选中代码，按下快捷键，折叠代码。<br>Ctrl+Shift+] ：选中代码，按下快捷键，展开代码。<br>Ctrl+K+0 ：展开所有折叠代码。<br>Ctrl+← ：向左单位性地移动光标，快速移动光标。<br>Ctrl+→ ：向右单位性地移动光标，快速移动光标。<br>shift+↑ ：向上选中多行。<br>shift+↓ ：向下选中多行。<br>Shift+← ：向左选中文本。<br>Shift+→： 向右选中文本。<br>Ctrl+Shift+←：向左单位性地选中文本。<br>Ctrl+Shift+→：向右单位性地选中文本。<br>Ctrl+Shift+↑：将光标所在行和上一行代码互换（将光标所在行插入到上一行之前）。<br>Ctrl+Shift+↓：将光标所在行和下一行代码互换（将光标所在行插入到下一行之后）。<br>Ctrl+Alt+↑：向上添加多行光标，可同时编辑多行。<br>Ctrl+Alt+↓：向下添加多行光标，可同时编辑多行。</p><h2 id="搜索类"><a href="#搜索类" class="headerlink" title="搜索类"></a>搜索类</h2><p>Ctrl+J：合并选中的多行代码为一行。举个栗子：将多行格式的CSS属性合并为一行。<br>Ctrl+Shift+D：复制光标所在整行，插入到下一行。<br>Tab：向右缩进。<br>Shift+Tab：向左缩进。<br>Ctrl+K+K：从光标处开始删除代码至行尾。<br>Ctrl+Shift+K：删除整行。<br>Ctrl+/：注释单行。<br>Ctrl+Shift+/ ：注释多行。<br>Ctrl+K+U：转换大写。<br>Ctrl+K+L：转换小写。<br>Ctrl+Z：撤销。<br>Ctrl+Y：恢复撤销。<br>Ctrl+U：软撤销，感觉和 Gtrl+Z 一样。<br>Ctrl+F2：设置书签<br>Ctrl+T：左右字母互换。<br>F6： 单词检测拼写</p><h2 id="显示类"><a href="#显示类" class="headerlink" title="显示类"></a>显示类</h2><p>Ctrl+Tab：按文件浏览过的顺序，切换当前窗口的标签页。<br>Ctrl+PageDown：向左切换当前窗口的标签页。<br>Ctrl+PageUp： 向右切换当前窗口的标签页。<br>Alt+Shift+1： 窗口分屏，恢复默认1屏（非小键盘的数字）<br>Alt+Shift+2： 左右分屏-2列<br>Alt+Shift+3： 左右分屏-3列<br>Alt+Shift+4： 左右分屏-4列<br>Alt+Shift+5： 等分4屏<br>Alt+Shift+8： 垂直分屏-2屏<br>Alt+Shift+9： 垂直分屏-3屏<br>Ctrl+K+B： 开启/关闭侧边栏。<br>F11： 全屏模式<br>Shift+F11：免打扰模式</p><h1 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h1><h2 id="1-选择一个选中项的下一个匹配项-ctrl-d"><a href="#1-选择一个选中项的下一个匹配项-ctrl-d" class="headerlink" title="1.选择一个选中项的下一个匹配项: ctrl+d"></a>1.选择一个选中项的下一个匹配项: ctrl+d</h2><p>把光标放在一个单词上，按下⌘+ D,将选择这个单词。一直按住⌘且按D多次，将选择当前选中项的下一个匹配项。通过按住⌘,再按D三次,将选择三个相同的文本。<br><a href="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime1.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img class="full-image lazyload" data-src="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime1.gif"></a> </p><h2 id="2-选择一个选中项的所有匹配项-alt-f3"><a href="#2-选择一个选中项的所有匹配项-alt-f3" class="headerlink" title="2.选择一个选中项的所有匹配项: alt+f3"></a>2.选择一个选中项的所有匹配项: alt+f3</h2><p>和上面一样,但它选择文件中的所有匹配项。小心使用这个,因为它能选择一个文件中的所有匹配项. .<br><a href="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime2.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img class="full-image lazyload" data-src="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime2.gif"></a></p><h2 id="3-选择与光标关联的开始和结束标签-ctrl-shift-’"><a href="#3-选择与光标关联的开始和结束标签-ctrl-shift-’" class="headerlink" title="3.选择与光标关联的开始和结束标签:  ctrl+shift+’"></a>3.选择与光标关联的开始和结束标签:  ctrl+shift+’</h2><p>这是一个法宝。也许你希望所有属性保持不变,但只是想选择标签。这个快捷键为你这样做,会注意到你可以在一次操作多个标签。<em>需要Emmet插件</em><br><a href="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime3.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img class="full-image lazyload" data-src="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime3.gif"></a></p><h2 id="4-选择容器内内容-ctrl-shift-a"><a href="#4-选择容器内内容-ctrl-shift-a" class="headerlink" title="4.选择容器内内容: ctrl+shift+a"></a>4.选择容器内内容: ctrl+shift+a</h2><p>如果你把光标放在文本间再按下上面的键将选择文本,就像ctrl+ D。但是再次按下它，将选择父容器,再按,将选择父容器的父容器。<em>需要Emmet插件</em><br><a href="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime4.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img class="full-image lazyload" data-src="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime4.gif"></a></p><h2 id="5-选择括号内的内容-ctrl-shift-m"><a href="#5-选择括号内的内容-ctrl-shift-m" class="headerlink" title="5.选择括号内的内容: ctrl+shift+m"></a>5.选择括号内的内容: ctrl+shift+m</h2><p>这有助于选择括号之间的一切。同样适用于CSS。<br><a href="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime5.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img class="full-image lazyload" data-src="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime5.gif"></a></p><h2 id="6-上移或下移行-ctrl-shift-↑-或-↓"><a href="#6-上移或下移行-ctrl-shift-↑-或-↓" class="headerlink" title="6.上移或下移行: ctrl+shift+↑ 或 ↓"></a>6.上移或下移行: ctrl+shift+↑ 或 ↓</h2><a href="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime6.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img class="full-image lazyload" data-src="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime6.gif"></a><h2 id="7-复制行或选中项-ctrl-shift-d"><a href="#7-复制行或选中项-ctrl-shift-d" class="headerlink" title="7.复制行或选中项: ctrl+shift+d"></a>7.复制行或选中项: ctrl+shift+d</h2><p>如果你已经选中了文本,它会复制你的选中项。否则,把光标放在行上,会复制整行。<br><a href="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime7.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img class="full-image lazyload" data-src="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime7.gif"></a></p><h2 id="8-增加和减少缩进-ctrl-或"><a href="#8-增加和减少缩进-ctrl-或" class="headerlink" title="8.增加和减少缩进: ctrl+[ 或 ]"></a>8.增加和减少缩进: ctrl+[ 或 ]</h2><a href="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime8.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img class="full-image lazyload" data-src="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime8.gif"></a><h2 id="9-剪切行或选中项-ctrl-x"><a href="#9-剪切行或选中项-ctrl-x" class="headerlink" title="9.剪切行或选中项: ctrl+x"></a>9.剪切行或选中项: ctrl+x</h2><a href="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime9.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img class="full-image lazyload" data-src="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime9.gif"></a><h2 id="10-粘贴并保持缩进-ctrl-shift-v"><a href="#10-粘贴并保持缩进-ctrl-shift-v" class="headerlink" title="10.粘贴并保持缩进: ctrl+shift+v"></a>10.粘贴并保持缩进: ctrl+shift+v</h2><p>这是又一个我每次都用的快捷键。在gif中我显示了普通粘贴(ctrl+ V)和缩进粘贴两种效果的对比。注意缩进如何排列。<br><a href="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime10.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img class="full-image lazyload" data-src="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime10.gif"></a></p><h2 id="11-用标签包裹行或选中项-alt-shift-w"><a href="#11-用标签包裹行或选中项-alt-shift-w" class="headerlink" title="11.用标签包裹行或选中项: alt+shift+w"></a>11.用标签包裹行或选中项: alt+shift+w</h2><p>使用标签包裹一行; 开始输入你想使用的标签,你成功了.<br><a href="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime11.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img class="full-image lazyload" data-src="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime11.gif"></a></p><h2 id="12-移除未闭合的容器元素-ctrl-shift"><a href="#12-移除未闭合的容器元素-ctrl-shift" class="headerlink" title="12.移除未闭合的容器元素: ctrl+shift+;"></a>12.移除未闭合的容器元素: ctrl+shift+;</h2><p>这会移除与你的光标相关的父标签。对清除标记很有帮助。<br><a href="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime12.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img class="full-image lazyload" data-src="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime12.gif"></a></p><h2 id="13-计算数学表达式-ctrl-shift-y"><a href="#13-计算数学表达式-ctrl-shift-y" class="headerlink" title="13.计算数学表达式: ctrl+shift+y"></a>13.计算数学表达式: ctrl+shift+y</h2><p>我从未想过我会经常使用这个，但是确实很好用<br><a href="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime13.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img class="full-image lazyload" data-src="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime13.gif"></a></p><h2 id="14-递增和递减-alt-shift-↑-或-↓，ctrl-↑-或-↓"><a href="#14-递增和递减-alt-shift-↑-或-↓，ctrl-↑-或-↓" class="headerlink" title="14.递增和递减: alt+shift+↑ 或 ↓，ctrl+ ↑ 或 ↓"></a>14.递增和递减: alt+shift+↑ 或 ↓，ctrl+ ↑ 或 ↓</h2><p>按住 ↑ 将以10的步长改变数字, 不按住以1为步长. 同时注意到你不需要选择数字, Sublime Text 足够聪明到更新本行最近的数字.<br><a href="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime14.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img class="full-image lazyload" data-src="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime14.gif"></a></p><h2 id="15-大写和小写-ctrl-k-u-ctrl-k-l"><a href="#15-大写和小写-ctrl-k-u-ctrl-k-l" class="headerlink" title="15.大写和小写: ctrl+k+u,ctrl+k+l"></a>15.大写和小写: ctrl+k+u,ctrl+k+l</h2><a href="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime15.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img class="full-image lazyload" data-src="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime15.gif"></a><h2 id="16-注释选中项-行-ctrl"><a href="#16-注释选中项-行-ctrl" class="headerlink" title="16.注释选中项/行: ctrl+/"></a>16.注释选中项/行: ctrl+/</h2><p>这个在所有语言下都可用, 对行和选中项都可用.<br><a href="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime16.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img class="full-image lazyload" data-src="/2020/02/23/SublimeText%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/sublime16.gif"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sublime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.NetCore项目部署到IIS</title>
      <link href="/2020/02/22/NetCore%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0IIS/"/>
      <url>/2020/02/22/NetCore%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0IIS/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="netcore-3-1-mvc项目部署到IIS"><a href="#netcore-3-1-mvc项目部署到IIS" class="headerlink" title=".netcore 3.1 mvc项目部署到IIS"></a>.netcore 3.1 mvc项目部署到IIS</h2><h3 id="1-基础环境配置"><a href="#1-基础环境配置" class="headerlink" title="1. 基础环境配置"></a>1. 基础环境配置</h3><ol><li>安装 dotnet-sdk-3.1.101-win-x64.exe</li><li>安装 dotnet-hosting-3.1.1-win.exe</li><li>安装 aspnetcore-runtime-3.1.1-win-x64.exe</li><li>安装 vc_redist.x64.exe</li></ol><blockquote><p>Windows Server 2012 R2 安装.NET Core<br><a href="https://dotnet.microsoft.com/download/dotnet-core" target="_blank" rel="noopener">https://dotnet.microsoft.com/download/dotnet-core</a></p></blockquote><h3 id="2-Windows-Server-2012-R2-安装-vc-redist-报错，net-core-runtime基于vc-redist-x64运行的，查看windows-server-日志管理器，查看详细日志错误信息，具体操作自行百度。"><a href="#2-Windows-Server-2012-R2-安装-vc-redist-报错，net-core-runtime基于vc-redist-x64运行的，查看windows-server-日志管理器，查看详细日志错误信息，具体操作自行百度。" class="headerlink" title="2. Windows Server 2012 R2 安装 vc_redist 报错，net core runtime基于vc_redist.x64运行的，查看windows server 日志管理器，查看详细日志错误信息，具体操作自行百度。"></a>2. Windows Server 2012 R2 安装 vc_redist 报错，net core runtime基于vc_redist.x64运行的，查看windows server 日志管理器，查看详细日志错误信息，具体操作自行百度。</h3><h3 id="解决方式："><a href="#解决方式：" class="headerlink" title="解决方式："></a>解决方式：</h3><h4 id="根据错误码，手动安装需要的依赖包。"><a href="#根据错误码，手动安装需要的依赖包。" class="headerlink" title="根据错误码，手动安装需要的依赖包。"></a>根据错误码，手动安装需要的依赖包。</h4><blockquote><p><a href="https://www.microsoft.com/en-us/download/confirmation.aspx?id=42334" target="_blank" rel="noopener">https://www.microsoft.com/en-us/download/confirmation.aspx?id=42334</a>  </p><p>点击 <code>click here to download manually</code> 下载依赖包，顺序安装即可。  </p><p>再次重试安装 vc_redist.x64.exe 。</p></blockquote><p><a href="/2020/02/22/NetCore%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0IIS/core.png" data-fancybox="group" data-caption="core" class="fancybox"><img alt="core" title="core" data-src="/2020/02/22/NetCore%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0IIS/core.png" class="lazyload"></a></p><h3 id="3-发布项目，部署iis，设置无托管模式，设置端口，启动项目，大功告成。"><a href="#3-发布项目，部署iis，设置无托管模式，设置端口，启动项目，大功告成。" class="headerlink" title="3. 发布项目，部署iis，设置无托管模式，设置端口，启动项目，大功告成。"></a>3. 发布项目，部署iis，设置无托管模式，设置端口，启动项目，大功告成。</h3></body></html>]]></content>
      
      
      <categories>
          
          <category> NetCore </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NetCore </tag>
            
            <tag> IIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下GitLab的安装及使用</title>
      <link href="/2020/02/22/Linux%E4%B8%8BGitLab%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/02/22/Linux%E4%B8%8BGitLab%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="GitLab介绍"><a href="#GitLab介绍" class="headerlink" title="GitLab介绍"></a><center>GitLab介绍</center></h2><blockquote><h3 id="Git：是一种版本控制系统，是一个命令，是一种工具。"><a href="#Git：是一种版本控制系统，是一个命令，是一种工具。" class="headerlink" title="Git：是一种版本控制系统，是一个命令，是一种工具。"></a>Git：是一种版本控制系统，是一个命令，是一种工具。</h3><h3 id="Gitlib：是用于实现Git功能的开发库。"><a href="#Gitlib：是用于实现Git功能的开发库。" class="headerlink" title="Gitlib：是用于实现Git功能的开发库。"></a>Gitlib：是用于实现Git功能的开发库。</h3><h3 id="Github：是一个基于Git实现的在线代码托管仓库，包含一个网站界面，向互联网开放。"><a href="#Github：是一个基于Git实现的在线代码托管仓库，包含一个网站界面，向互联网开放。" class="headerlink" title="Github：是一个基于Git实现的在线代码托管仓库，包含一个网站界面，向互联网开放。"></a>Github：是一个基于Git实现的在线代码托管仓库，包含一个网站界面，向互联网开放。</h3><h3 id="GitLab：是一个基于Git实现的在线代码仓库托管软件，你可以用gitlab自己搭建一个类似于Github一样的系统，一般用于在企业、学校等内部网络搭建git私服。"><a href="#GitLab：是一个基于Git实现的在线代码仓库托管软件，你可以用gitlab自己搭建一个类似于Github一样的系统，一般用于在企业、学校等内部网络搭建git私服。" class="headerlink" title="GitLab：是一个基于Git实现的在线代码仓库托管软件，你可以用gitlab自己搭建一个类似于Github一样的系统，一般用于在企业、学校等内部网络搭建git私服。"></a>GitLab：是一个基于Git实现的在线代码仓库托管软件，你可以用gitlab自己搭建一个类似于Github一样的系统，一般用于在企业、学校等内部网络搭建git私服。</h3></blockquote><hr><h2 id="GitLab的安装"><a href="#GitLab的安装" class="headerlink" title="GitLab的安装"></a><center>GitLab的安装</center></h2><h2 id="1-基础环境准备"><a href="#1-基础环境准备" class="headerlink" title="1. 基础环境准备"></a>1. 基础环境准备</h2><pre><code>yum install curl policycoreutils openssh-server openssh-clients postfix cronie  </code></pre><h4 id="启动Postfix以发送通知电子邮件"><a href="#启动Postfix以发送通知电子邮件" class="headerlink" title="启动Postfix以发送通知电子邮件"></a>启动Postfix以发送通知电子邮件</h4><pre><code>systemctl start postfix</code></pre><h4 id="打开http访问和ssh访问"><a href="#打开http访问和ssh访问" class="headerlink" title="打开http访问和ssh访问"></a>打开http访问和ssh访问</h4><pre><code>sudo lokkit -s http -s ssh</code></pre><h2 id="2-安装-gitlab-ce"><a href="#2-安装-gitlab-ce" class="headerlink" title="2. 安装 gitlab-ce"></a>2. 安装 gitlab-ce</h2><pre><code>curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash</code></pre><blockquote><h3 id="由于网络问题，国内用户，建议使用清华大学的镜像源进行安装："><a href="#由于网络问题，国内用户，建议使用清华大学的镜像源进行安装：" class="headerlink" title="由于网络问题，国内用户，建议使用清华大学的镜像源进行安装："></a>由于网络问题，国内用户，建议使用清华大学的镜像源进行安装：</h3><pre><code>vi /etc/yum.repos.d/gitlab-ce.repo</code></pre><h4 id="1-添加以下内容，保存文件"><a href="#1-添加以下内容，保存文件" class="headerlink" title="1.添加以下内容，保存文件"></a>1.添加以下内容，保存文件</h4><pre><code>[gitlab-ce]name=gitlab-cebaseurl=http://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7repo_gpgcheck=0gpgcheck=0enabled=1gpgkey=https://packages.gitlab.com/gpg.key</code></pre><h4 id="2-安装依赖"><a href="#2-安装依赖" class="headerlink" title="2.安装依赖"></a>2.安装依赖</h4><pre><code>yum makecache</code></pre><h4 id="3-安装gitlab-ce"><a href="#3-安装gitlab-ce" class="headerlink" title="3.安装gitlab-ce"></a>3.安装gitlab-ce</h4><pre><code>yum install gitlab-ce</code></pre></blockquote><h2 id="3-配置并启动-gitlab-ce"><a href="#3-配置并启动-gitlab-ce" class="headerlink" title="3. 配置并启动 gitlab-ce"></a>3. 配置并启动 gitlab-ce</h2><pre><code>gitlab-ctl reconfigure</code></pre><h2 id="4-登录-gitlab"><a href="#4-登录-gitlab" class="headerlink" title="4. 登录 gitlab"></a>4. 登录 gitlab</h2><h3 id="1-由于默认gitlab使用80端口，所以，我们需要修改gitlab的默认端口"><a href="#1-由于默认gitlab使用80端口，所以，我们需要修改gitlab的默认端口" class="headerlink" title="1.由于默认gitlab使用80端口，所以，我们需要修改gitlab的默认端口"></a>1.由于默认gitlab使用80端口，所以，我们需要修改gitlab的默认端口</h3><pre><code>修改 vi /etc/gitlab/gitlab.rb ，然后执行重新配置，重启命令后完成</code></pre><p><a href="/2020/02/22/Linux%E4%B8%8BGitLab%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/gitlab.png" data-fancybox="group" data-caption="gitlab" class="fancybox"><img alt="gitlab" title="gitlab" data-src="/2020/02/22/Linux%E4%B8%8BGitLab%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/gitlab.png" class="lazyload"></a></p><pre><code>external_url 'http://192.168.120.136'nginx['listen_port'] = 9091#unicorn['listen'] = '192.168.120.136'unicorn['port'] = 9092</code></pre><h3 id="2-更新配置"><a href="#2-更新配置" class="headerlink" title="2.更新配置"></a>2.更新配置</h3><pre><code>gitlab-ctl reconfigure</code></pre><h3 id="3-重启ctl"><a href="#3-重启ctl" class="headerlink" title="3.重启ctl"></a>3.重启ctl</h3><pre><code>gitlab-ctl restart</code></pre><blockquote><p>端口要用9090以后的最好，否则不生效；<br>默认情况下：unicorn会占用8080端口，nginx会占用80端口。<br>改完之后，就可以通过nginx[‘listen_port’] 在浏览器进行访问了。</p></blockquote><h3 id="4-gitlab访问"><a href="#4-gitlab访问" class="headerlink" title="4.gitlab访问"></a>4.gitlab访问</h3><pre><code>http://192.168.120.136:9001</code></pre><h5 id="默认用户为root-首次登录需设置登录密码。"><a href="#默认用户为root-首次登录需设置登录密码。" class="headerlink" title="默认用户为root,首次登录需设置登录密码。"></a>默认用户为root,首次登录需设置登录密码。</h5><hr><h2 id="Gitlab常用命令"><a href="#Gitlab常用命令" class="headerlink" title="Gitlab常用命令"></a><center>Gitlab常用命令</center></h2><blockquote><h3 id="gitlab-ctl-start-启动所有gitlab组件"><a href="#gitlab-ctl-start-启动所有gitlab组件" class="headerlink" title="gitlab-ctl start            #启动所有gitlab组件"></a><code>gitlab-ctl start</code>            #启动所有gitlab组件</h3><h3 id="gitlab-ctl-stop-停止所有gitlab组件"><a href="#gitlab-ctl-stop-停止所有gitlab组件" class="headerlink" title="gitlab-ctl stop             #停止所有gitlab组件"></a><code>gitlab-ctl stop</code>             #停止所有gitlab组件</h3><p>###<code>gitlab-ctl restart</code>           #重启所有gitlab组件  </p><h3 id="gitlab-ctl-status-查看服务状态"><a href="#gitlab-ctl-status-查看服务状态" class="headerlink" title="gitlab-ctl status           #查看服务状态"></a><code>gitlab-ctl status</code>           #查看服务状态</h3><h3 id="gitlab-ctl-reconfigure-修改配置文件之后-重新加载gitlab配置文件并启动所有gitlab组件"><a href="#gitlab-ctl-reconfigure-修改配置文件之后-重新加载gitlab配置文件并启动所有gitlab组件" class="headerlink" title="gitlab-ctl reconfigure      #修改配置文件之后,重新加载gitlab配置文件并启动所有gitlab组件"></a><code>gitlab-ctl reconfigure</code>      #修改配置文件之后,重新加载gitlab配置文件并启动所有gitlab组件</h3><h3 id="vim-etc-gitlab-gitlab-rb-修改默认的配置文件"><a href="#vim-etc-gitlab-gitlab-rb-修改默认的配置文件" class="headerlink" title="vim /etc/gitlab/gitlab.rb   #修改默认的配置文件"></a><code>vim /etc/gitlab/gitlab.rb</code>   #修改默认的配置文件</h3><h3 id="gitlab-rake-gitlab-check-SANITIZE-true-trace-检查gitlab"><a href="#gitlab-rake-gitlab-check-SANITIZE-true-trace-检查gitlab" class="headerlink" title="gitlab-rake gitlab:check SANITIZE=true --trace   #检查gitlab"></a><code>gitlab-rake gitlab:check SANITIZE=true --trace</code>   #检查gitlab</h3><h3 id="gitlab-ctl-tail-查看日志"><a href="#gitlab-ctl-tail-查看日志" class="headerlink" title="gitlab-ctl tail             #查看日志"></a><code>gitlab-ctl tail</code>             #查看日志</h3><h3 id="gitlab-ctl-help-查看gitlab命令的帮助"><a href="#gitlab-ctl-help-查看gitlab命令的帮助" class="headerlink" title="gitlab-ctl --help          #查看gitlab命令的帮助"></a><code>gitlab-ctl --help</code>          #查看gitlab命令的帮助</h3></blockquote><hr><h2 id="GitLab的使用"><a href="#GitLab的使用" class="headerlink" title="GitLab的使用"></a><center>GitLab的使用</center></h2><h4 id="待完成…"><a href="#待完成…" class="headerlink" title="待完成…"></a>待完成…</h4></body></html>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> GitLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 目录区别</title>
      <link href="/2020/02/22/Linux%E7%9B%AE%E5%BD%95%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/02/22/Linux%E7%9B%AE%E5%BD%95%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="目录-、-home目录-、-目录的区别"><a href="#目录-、-home目录-、-目录的区别" class="headerlink" title="/目录 、/home目录 、~目录的区别"></a>/目录 、/home目录 、~目录的区别</h2><h3 id="：根目录"><a href="#：根目录" class="headerlink" title="/ ：根目录"></a>/ ：根目录</h3><h4 id="cd-从任何用户执行该命令都会进入同一个目录，即所有用户共享，其下文件如图"><a href="#cd-从任何用户执行该命令都会进入同一个目录，即所有用户共享，其下文件如图" class="headerlink" title="cd /:  从任何用户执行该命令都会进入同一个目录，即所有用户共享，其下文件如图"></a><code>cd /</code>:  从任何用户执行该命令都会进入同一个目录，即所有用户共享，其下文件如图</h4><div style="display: inline-block;">  <a href="/2020/02/22/Linux%E7%9B%AE%E5%BD%95%E5%8C%BA%E5%88%AB/根目录.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="/2020/02/22/Linux%E7%9B%AE%E5%BD%95%E5%8C%BA%E5%88%AB/根目录.png" class="lazyload"></a></div><h2 id="home-：家目录（我觉得还不如叫用户列表目录）"><a href="#home-：家目录（我觉得还不如叫用户列表目录）" class="headerlink" title="/home ：家目录（我觉得还不如叫用户列表目录）"></a>/home ：家目录（我觉得还不如叫用户列表目录）</h2><h4 id="cd-home：会显示这台机器的用户，如图，所以我认为与其叫什么家目录，不如说是用户目录"><a href="#cd-home：会显示这台机器的用户，如图，所以我认为与其叫什么家目录，不如说是用户目录" class="headerlink" title="cd /home：会显示这台机器的用户，如图，所以我认为与其叫什么家目录，不如说是用户目录"></a><code>cd /home</code>：会显示这台机器的用户，如图，所以我认为与其叫什么家目录，不如说是用户目录</h4><div style="display: inline-block;"><p><a href="/2020/02/22/Linux%E7%9B%AE%E5%BD%95%E5%8C%BA%E5%88%AB/%E5%AE%B6%E7%9B%AE%E5%BD%95.png" data-fancybox="group" data-caption="家目录" class="fancybox"><img alt="家目录" title="家目录" data-src="/2020/02/22/Linux%E7%9B%AE%E5%BD%95%E5%8C%BA%E5%88%AB/%E5%AE%B6%E7%9B%AE%E5%BD%95.png" class="lazyload"></a></p></div><h2 id="：当前用户的家目录"><a href="#：当前用户的家目录" class="headerlink" title="~ ：当前用户的家目录"></a>~ ：当前用户的家目录</h2><h4 id="在imooc用户下登录："><a href="#在imooc用户下登录：" class="headerlink" title="在imooc用户下登录："></a>在imooc用户下登录：</h4><p><code>cd ~</code> 等价于<code>cd /home/imooc</code>：会进入当前用户的家目录（一般情况连接上机器都是在这个目录，一般操作也都是在这里）</p><div style="display: inline-block;"><p><a href="/2020/02/22/Linux%E7%9B%AE%E5%BD%95%E5%8C%BA%E5%88%AB/%E7%94%A8%E6%88%B7%E5%AE%B6%E7%9B%AE%E5%BD%951.png" data-fancybox="group" data-caption="用户家目录" class="fancybox"><img alt="用户家目录" title="用户家目录" data-src="/2020/02/22/Linux%E7%9B%AE%E5%BD%95%E5%8C%BA%E5%88%AB/%E7%94%A8%E6%88%B7%E5%AE%B6%E7%9B%AE%E5%BD%951.png" class="lazyload"></a></p></div><h4 id="在root下登录：-cd-等价于cd-root"><a href="#在root下登录：-cd-等价于cd-root" class="headerlink" title="在root下登录： cd ~等价于cd /root"></a>在root下登录： <code>cd ~</code>等价于<code>cd /root</code></h4><div style="display: inline-block;"><p><a href="/2020/02/22/Linux%E7%9B%AE%E5%BD%95%E5%8C%BA%E5%88%AB/%E7%94%A8%E6%88%B7%E5%AE%B6%E7%9B%AE%E5%BD%952.png" data-fancybox="group" data-caption="用户家目录" class="fancybox"><img alt="用户家目录" title="用户家目录" data-src="/2020/02/22/Linux%E7%9B%AE%E5%BD%95%E5%8C%BA%E5%88%AB/%E7%94%A8%E6%88%B7%E5%AE%B6%E7%9B%AE%E5%BD%952.png" class="lazyload"></a></p></div></body></html>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 防火墙设置</title>
      <link href="/2020/02/22/Linux-%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE/"/>
      <url>/2020/02/22/Linux-%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a><center>常用命令</center></h2><h3 id="查看防火墙状态："><a href="#查看防火墙状态：" class="headerlink" title="查看防火墙状态："></a>查看防火墙状态：</h3><pre><code>sudo systemctl status firewalld 或firewall-cmd --state</code></pre><h3 id="关闭防火墙命令："><a href="#关闭防火墙命令：" class="headerlink" title="关闭防火墙命令："></a>关闭防火墙命令：</h3><pre><code>sudo systemctl stop firewalld或systemctl stop firewalld.service</code></pre><h3 id="打开防火墙命令："><a href="#打开防火墙命令：" class="headerlink" title="打开防火墙命令："></a>打开防火墙命令：</h3><pre><code>sudo systemctl start firewalld或systemctl start firewalld.service</code></pre><h3 id="禁止firewall开机启动："><a href="#禁止firewall开机启动：" class="headerlink" title="禁止firewall开机启动："></a>禁止firewall开机启动：</h3><pre><code>sudo systemctl disable firewalld或systemctl disable firewalld.service</code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 安装 ifconfig</title>
      <link href="/2020/02/22/Linux-%E5%AE%89%E8%A3%85-ifconfig/"/>
      <url>/2020/02/22/Linux-%E5%AE%89%E8%A3%85-ifconfig/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h3 id="CentOS-7-系统默认-没有安装-ifconfig-命令。"><a href="#CentOS-7-系统默认-没有安装-ifconfig-命令。" class="headerlink" title="CentOS 7 系统默认 没有安装  ifconfig 命令。"></a>CentOS 7 系统默认 没有安装  ifconfig 命令。</h3><h4 id="如果直接运行-ifconfig-命令，则提示错误-：-bash-ifconfig-command-not-found"><a href="#如果直接运行-ifconfig-命令，则提示错误-：-bash-ifconfig-command-not-found" class="headerlink" title="如果直接运行 ifconfig 命令，则提示错误 ：-bash: ifconfig: command not found."></a>如果直接运行 ifconfig 命令，则提示错误 ：<code>-bash: ifconfig: command not found.</code></h4><h3 id="直接运行yum-install-ifconfig"><a href="#直接运行yum-install-ifconfig" class="headerlink" title="直接运行yum install ifconfig"></a>直接运行yum install ifconfig</h3><h4 id="提示错误-No-package-ifconfig-available-Error-Nothing-to-do"><a href="#提示错误-No-package-ifconfig-available-Error-Nothing-to-do" class="headerlink" title="提示错误 No package ifconfig available. Error: Nothing to do"></a>提示错误 <code>No package ifconfig available. Error: Nothing to do</code></h4><h4 id="此时执行yum-查询命令-yum-search-ifconfig"><a href="#此时执行yum-查询命令-yum-search-ifconfig" class="headerlink" title="此时执行yum 查询命令 yum search ifconfig"></a>此时执行yum 查询命令 <code>yum search ifconfig</code></h4><h4 id="然后执行安装依赖包-yum-install-net-tools-x86-64"><a href="#然后执行安装依赖包-yum-install-net-tools-x86-64" class="headerlink" title="然后执行安装依赖包 yum install net-tools.x86_64"></a>然后执行安装依赖包 <code>yum install net-tools.x86_64</code></h4><h4 id="最后执行-ifconfig-命令，大功告成。"><a href="#最后执行-ifconfig-命令，大功告成。" class="headerlink" title="最后执行 ifconfig 命令，大功告成。"></a>最后执行 <code>ifconfig</code> 命令，大功告成。</h4></body></html>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkinx命令以及升级步骤</title>
      <link href="/2020/02/22/Jenkinx%E5%91%BD%E4%BB%A4%E4%BB%A5%E5%8F%8A%E5%8D%87%E7%BA%A7%E6%AD%A5%E9%AA%A4/"/>
      <url>/2020/02/22/Jenkinx%E5%91%BD%E4%BB%A4%E4%BB%A5%E5%8F%8A%E5%8D%87%E7%BA%A7%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="Jenkins-命令"><a href="#Jenkins-命令" class="headerlink" title="Jenkins 命令"></a><center>Jenkins 命令</center></h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><pre><code>service jenkins start</code></pre><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><pre><code>service jenkins restart</code></pre><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><pre><code>service jenkins stop</code></pre><h3 id="登录Jenkins"><a href="#登录Jenkins" class="headerlink" title="登录Jenkins"></a>登录Jenkins</h3><pre><code>http://localhost:8080/</code></pre><h3 id="关闭Jenkins"><a href="#关闭Jenkins" class="headerlink" title="关闭Jenkins"></a>关闭Jenkins</h3><pre><code>http://localhost:8080/exit </code></pre><h3 id="重启Jenkies"><a href="#重启Jenkies" class="headerlink" title="重启Jenkies"></a>重启Jenkies</h3><pre><code>http://localhost:8080/restart </code></pre><h3 id="重新加载Jenkies"><a href="#重新加载Jenkies" class="headerlink" title="重新加载Jenkies"></a>重新加载Jenkies</h3><pre><code>http://localhost:8080/reload </code></pre><h2 id="Jenkins-升级"><a href="#Jenkins-升级" class="headerlink" title="Jenkins 升级"></a><center>Jenkins 升级</center></h2><h3 id="1-找到war包，执行linux系统命令-find"><a href="#1-找到war包，执行linux系统命令-find" class="headerlink" title="1. 找到war包，执行linux系统命令 find"></a>1. 找到war包，执行linux系统命令 find</h3><pre><code>find / -name jenkins.war</code></pre><h3 id="2-下载新版本包"><a href="#2-下载新版本包" class="headerlink" title="2. 下载新版本包"></a>2. 下载新版本包</h3><pre><code>wget http://updates.jenkins-ci.org/download/war/2.176.3/jenkins.war</code></pre><h3 id="3-停止jenkins服务"><a href="#3-停止jenkins服务" class="headerlink" title="3. 停止jenkins服务"></a>3. 停止jenkins服务</h3><pre><code>ps -ef | grep jenkinskill -9 [httpPort]  结束jenkins运行进程</code></pre><h3 id="4-备份原本的war包"><a href="#4-备份原本的war包" class="headerlink" title="4. 备份原本的war包"></a>4. 备份原本的war包</h3><pre><code>cd /usr/local/jenkins/mv jenkins.war jenkins.war.bakmv /root/jenkins.war  .</code></pre><h3 id="5-启动jenkins"><a href="#5-启动jenkins" class="headerlink" title="5.启动jenkins"></a>5.启动jenkins</h3><pre><code>service jenkins start</code></pre><h2 id="wget-下载加速"><a href="#wget-下载加速" class="headerlink" title="wget 下载加速"></a><center>wget 下载加速</center></h2><h2 id="1-安装mwget"><a href="#1-安装mwget" class="headerlink" title="1.安装mwget"></a>1.安装mwget</h2><pre><code>wget http://jaist.dl.sourceforge.net/project/kmphpfm/mwget/0.1/mwget_0.1.0.orig.tar.bz2tar -xjvf mwget_0.1.0.orig.tar.bz2cd mwget_0.1.0.orig</code></pre><h2 id="2-执行-configure"><a href="#2-执行-configure" class="headerlink" title="2.执行./configure"></a>2.执行./configure</h2><pre><code>./configure</code></pre><h4 id="如果出现-error-C-compiler-cannot-create-executables-说明没有安装c-编译器-安装一个c-编译器就可以了"><a href="#如果出现-error-C-compiler-cannot-create-executables-说明没有安装c-编译器-安装一个c-编译器就可以了" class="headerlink" title="如果出现 error: C++ compiler cannot create executables 说明没有安装c++编译器 安装一个c++编译器就可以了"></a>如果出现 error: C++ compiler cannot create executables 说明没有安装c++编译器 安装一个c++编译器就可以了</h4><pre><code>yum install gcc-c++</code></pre><h4 id="如果执行-configure-出现-configure-error-Your-intltool-is-too-old-You-need-intltool-0-35-0-or-later"><a href="#如果执行-configure-出现-configure-error-Your-intltool-is-too-old-You-need-intltool-0-35-0-or-later" class="headerlink" title="如果执行./configure 出现 configure: error: Your intltool is too old. You need intltool 0.35.0 or later."></a>如果执行./configure 出现 configure: error: Your intltool is too old. You need intltool 0.35.0 or later.</h4><pre><code>yum install intltool</code></pre><h2 id="3-最后的安装"><a href="#3-最后的安装" class="headerlink" title="3.最后的安装"></a>3.最后的安装</h2><pre><code>make && make install</code></pre><h2 id="4-安装完毕后-可以使用mwget加速下载"><a href="#4-安装完毕后-可以使用mwget加速下载" class="headerlink" title="4.安装完毕后 可以使用mwget加速下载"></a>4.安装完毕后 可以使用mwget加速下载</h2><pre><code>mwget http://updates.jenkins-ci.org/download/war/2.176.3/jenkins.war</code></pre><h2 id="jenkins-离线问题"><a href="#jenkins-离线问题" class="headerlink" title="jenkins 离线问题"></a><center>jenkins 离线问题</center></h2><h4 id="1-修改-var-lib-jenkins-updates-default-json"><a href="#1-修改-var-lib-jenkins-updates-default-json" class="headerlink" title="1. 修改/var/lib/jenkins/updates/default.json"></a>1. 修改/var/lib/jenkins/updates/default.json</h4><pre><code>www.google.com 改为 www.baidu.com</code></pre><h4 id="2-修改-var-lib-jenkins-hudson-model-UpdateCenter-xml"><a href="#2-修改-var-lib-jenkins-hudson-model-UpdateCenter-xml" class="headerlink" title="2. 修改/var/lib/jenkins/hudson.model.UpdateCenter.xml"></a>2. 修改/var/lib/jenkins/hudson.model.UpdateCenter.xml</h4><pre><code>https://updates.jenkins.io/update-center.json 改为 http://updates.jenkins.io/update-center.json</code></pre><h4 id="3-重启jenkins-解决离线问题。"><a href="#3-重启jenkins-解决离线问题。" class="headerlink" title="3. 重启jenkins,解决离线问题。"></a>3. 重启jenkins,解决离线问题。</h4></body></html>]]></content>
      
      
      <categories>
          
          <category> CICD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CICD </tag>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/2020/02/21/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/02/21/Markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><hr><h3 id="1-斜体和粗体"><a href="#1-斜体和粗体" class="headerlink" title="1. 斜体和粗体"></a>1. 斜体和粗体</h3><p>使用 * 和 ** 表示斜体和粗体。</p><p>示例：</p><p>这是 <em>斜体</em>，这是 <strong>粗体</strong>。</p><a id="more"></a><h3 id="2-分级标题"><a href="#2-分级标题" class="headerlink" title="2. 分级标题"></a>2. 分级标题</h3><p>使用 === 表示一级标题，使用 — 表示二级标题。</p><p>示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">这是一个一级标题</span><br><span class="line">============================</span><br><span class="line"></span><br><span class="line">这是一个二级标题</span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">### 这是一个三级标题</span><br></pre></td></tr></tbody></table></figure></div><p>你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。</p><h3 id="3-外链接"><a href="#3-外链接" class="headerlink" title="3. 外链接"></a>3. 外链接</h3><p>使用 [描述](链接地址) 为文字增加外链接。</p><p>示例：</p><p>这是去往 <a href="http://Shen-Yu.github.com" target="_blank" rel="noopener">本人博客</a> 的链接。</p><p><a href="https://n1-q.mafengwo.net/s15/M00/65/BB/CoUBGV3brtOAMKOdAAsHBZ8nyQk791.jpg?imageMogr2%2Fthumbnail%2F1360x%2Fstrip%2Fquality%2F90" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://n1-q.mafengwo.net/s15/M00/65/BB/CoUBGV3brtOAMKOdAAsHBZ8nyQk791.jpg?imageMogr2%2Fthumbnail%2F1360x%2Fstrip%2Fquality%2F90" class="lazyload"></a></p><h3 id="4-无序列表"><a href="#4-无序列表" class="headerlink" title="4. 无序列表"></a>4. 无序列表</h3><p>使用 *，+，- 表示无序列表。</p><p>示例：</p><ul><li>无序列表项 一</li><li>无序列表项 二</li><li>无序列表项 三</li></ul><h3 id="5-有序列表"><a href="#5-有序列表" class="headerlink" title="5. 有序列表"></a>5. 有序列表</h3><p>使用数字和点表示有序列表。</p><p>示例：</p><ol><li>有序列表项 一</li><li>有序列表项 二</li><li>有序列表项 三</li></ol><h3 id="6-文字引用"><a href="#6-文字引用" class="headerlink" title="6. 文字引用"></a>6. 文字引用</h3><p>使用 > 表示文字引用。</p><p>示例：</p><blockquote><p>野火烧不尽，春风吹又生。</p></blockquote><h3 id="7-行内代码块"><a href="#7-行内代码块" class="headerlink" title="7. 行内代码块"></a>7. 行内代码块</h3><p>使用 `代码` 表示行内代码块。</p><p>示例：</p><p>让我们聊聊 <code>html</code>。</p><h3 id="8-代码块"><a href="#8-代码块" class="headerlink" title="8.  代码块"></a>8.  代码块</h3><p>使用 四个缩进空格 表示代码块。</p><p>示例：</p><pre><code>这是一个代码块，此行左侧有四个不可见的空格。</code></pre><h3 id="9-插入图像"><a href="#9-插入图像" class="headerlink" title="9.  插入图像"></a>9.  插入图像</h3><p>使用 ![描述](图片链接地址) 插入图像。</p><p>示例：</p><p><a href="https://www.zybuluo.com/static/img/my_head.jpg" data-fancybox="group" data-caption="我的头像" class="fancybox"><img alt="我的头像" title="我的头像" data-src="https://www.zybuluo.com/static/img/my_head.jpg" class="lazyload"></a></p><h1 id="Cmd-Markdown-高阶语法手册"><a href="#Cmd-Markdown-高阶语法手册" class="headerlink" title="Cmd Markdown 高阶语法手册"></a>Cmd Markdown 高阶语法手册</h1><h3 id="1-内容目录"><a href="#1-内容目录" class="headerlink" title="1. 内容目录"></a>1. 内容目录</h3><p>在段落中填写 <code>[TOC]</code> 以显示全文内容的目录结构。</p><p>[TOC]</p><h3 id="2-标签分类"><a href="#2-标签分类" class="headerlink" title="2. 标签分类"></a>2. 标签分类</h3><p>在编辑区任意行的列首位置输入以下代码给文稿标签：</p><p>标签： 数学 英语 Markdown</p><p>或者</p><p>Tags： 数学 英语 Markdown</p><h3 id="3-删除线"><a href="#3-删除线" class="headerlink" title="3. 删除线"></a>3. 删除线</h3><p>使用 ~~ 表示删除线。</p><p><del>这是一段错误的文本。</del></p><h3 id="4-注脚"><a href="#4-注脚" class="headerlink" title="4. 注脚"></a>4. 注脚</h3><p>使用 [^keyword] 表示注脚。</p><p>这是一个注脚[^footnote]的样例。</p><p>这是第二个注脚[^footnote2]的样例。</p><h3 id="5-LaTeX-公式"><a href="#5-LaTeX-公式" class="headerlink" title="5. LaTeX 公式"></a>5. LaTeX 公式</h3><p>$ 表示行内公式： </p><p>质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。</p><p>$$ 表示整行公式：</p><p>$$\sum_{i=1}^n a_i=0$$</p><p>$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$</p><p>$$\sum^{j-1}<em>{k=0}{\widehat{\gamma}</em>{kj} z_k}$$</p><p>访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">MathJax</a> 参考更多使用方法。</p><h3 id="6-加强的代码块"><a href="#6-加强的代码块" class="headerlink" title="6. 加强的代码块"></a>6. 加强的代码块</h3><p>支持四十一种编程语言的语法高亮的显示，行号显示。</p><p>非代码示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install vim-gnome</span><br></pre></td></tr></tbody></table></figure></div><p>Python 示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span><span class="params">(param1=<span class="string">''</span>, param2=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">'''A docstring'''</span></span><br><span class="line">    <span class="keyword">if</span> param1 > param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Greater'</span></span><br><span class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">>>> </span>message = <span class="string">'''interpreter</span></span><br><span class="line"><span class="string"><span class="meta">... </span>prompt'''</span></span><br></pre></td></tr></tbody></table></figure></div><p>JavaScript 示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* nth element in the fibonacci series.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param </span>n >= 0</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return </span>the nth element, >= 0.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> tmp;</span><br><span class="line">  <span class="keyword">while</span> (--n >= <span class="number">0</span>) {</span><br><span class="line">    tmp = a;</span><br><span class="line">    a += b;</span><br><span class="line">    b = tmp;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(fib(<span class="number">10</span>));</span><br></pre></td></tr></tbody></table></figure></div><h3 id="7-流程图"><a href="#7-流程图" class="headerlink" title="7. 流程图"></a>7. 流程图</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">st=>start: Start:>https://www.zybuluo.com</span><br><span class="line">io=>inputoutput: verification</span><br><span class="line">op=>operation: Your Operation</span><br><span class="line">cond=>condition: Yes or No?</span><br><span class="line">sub=>subroutine: Your Subroutine</span><br><span class="line">e=>end</span><br><span class="line"></span><br><span class="line">st->io->op->cond</span><br><span class="line">cond(yes)->e</span><br><span class="line">cond(no)->sub->io</span><br></pre></td></tr></tbody></table></figure></div><h4 id="更多语法参考：流程图语法参考"><a href="#更多语法参考：流程图语法参考" class="headerlink" title="更多语法参考：流程图语法参考"></a>更多语法参考：<a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">流程图语法参考</a></h4><h3 id="8-序列图"><a href="#8-序列图" class="headerlink" title="8. 序列图"></a>8. 序列图</h3><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Alice->Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob-->Alice: I am good thanks!</span><br></pre></td></tr></tbody></table></figure></div><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Title: Here is a title</span><br><span class="line">A->B: Normal line</span><br><span class="line">B-->C: Dashed line</span><br><span class="line">C->>D: Open arrow</span><br><span class="line">D-->>A: Dashed open arrow</span><br></pre></td></tr></tbody></table></figure></div><h4 id="更多语法参考：序列图语法参考"><a href="#更多语法参考：序列图语法参考" class="headerlink" title="更多语法参考：序列图语法参考"></a>更多语法参考：<a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">序列图语法参考</a></h4><h3 id="9-甘特图"><a href="#9-甘特图" class="headerlink" title="9. 甘特图"></a>9. 甘特图</h3><p>甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">title 项目开发流程</span><br><span class="line">section 项目确定</span><br><span class="line">    需求分析       :a1, 2016-06-22, 3d</span><br><span class="line">    可行性报告     :after a1, 5d</span><br><span class="line">    概念验证       : 5d</span><br><span class="line">section 项目实施</span><br><span class="line">    概要设计      :2016-07-05  , 5d</span><br><span class="line">    详细设计      :2016-07-08, 10d</span><br><span class="line">    编码          :2016-07-15, 10d</span><br><span class="line">    测试          :2016-07-22, 5d</span><br><span class="line">section 发布验收</span><br><span class="line">    发布: 2d</span><br><span class="line">    验收: 3d</span><br></pre></td></tr></tbody></table></figure></div><h4 id="更多语法参考：甘特图语法参考"><a href="#更多语法参考：甘特图语法参考" class="headerlink" title="更多语法参考：甘特图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#gant-diagrams" target="_blank" rel="noopener">甘特图语法参考</a></h4><h3 id="10-Mermaid-流程图"><a href="#10-Mermaid-流程图" class="headerlink" title="10. Mermaid 流程图"></a>10. Mermaid 流程图</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A[Hard edge] -->|Link text| B(Round edge)</span><br><span class="line">B --> C{Decision}</span><br><span class="line">C -->|One| D[Result one]</span><br><span class="line">C -->|Two| E[Result two]</span><br></pre></td></tr></tbody></table></figure></div><h4 id="更多语法参考：Mermaid-流程图语法参考"><a href="#更多语法参考：Mermaid-流程图语法参考" class="headerlink" title="更多语法参考：Mermaid 流程图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#flowcharts-basic-syntax" target="_blank" rel="noopener">Mermaid 流程图语法参考</a></h4><h3 id="11-Mermaid-序列图"><a href="#11-Mermaid-序列图" class="headerlink" title="11. Mermaid 序列图"></a>11. Mermaid 序列图</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Alice->John: Hello John, how are you?</span><br><span class="line">loop every minute</span><br><span class="line">    John-->Alice: Great!</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure></div><h4 id="更多语法参考：Mermaid-序列图语法参考"><a href="#更多语法参考：Mermaid-序列图语法参考" class="headerlink" title="更多语法参考：Mermaid 序列图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#sequence-diagrams" target="_blank" rel="noopener">Mermaid 序列图语法参考</a></h4><h3 id="12-表格支持"><a href="#12-表格支持" class="headerlink" title="12. 表格支持"></a>12. 表格支持</h3><table><thead><tr><th>项目</th><th align="right">价格</th><th align="center">数量</th></tr></thead><tbody><tr><td>计算机</td><td align="right">$1600</td><td align="center">5</td></tr><tr><td>手机</td><td align="right">$12</td><td align="center">12</td></tr><tr><td>管线</td><td align="right">$1</td><td align="center">234</td></tr></tbody></table><h3 id="13-定义型列表"><a href="#13-定义型列表" class="headerlink" title="13. 定义型列表"></a>13. 定义型列表</h3><dl><dt>名词 1</dt><dd>定义 1（左侧有一个可见的冒号和四个不可见的空格）</dd></dl><dl><dt>代码块 2</dt><dd>这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）</dd></dl><pre><code>代码块（左侧有八个不可见的空格）</code></pre><h3 id="14-Html-标签"><a href="#14-Html-标签" class="headerlink" title="14. Html 标签"></a>14. Html 标签</h3><p>本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：</p><pre><code><table>    <tbody><tr>        <th rowspan="2">值班人员</th>        <th>星期一</th>        <th>星期二</th>        <th>星期三</th>    </tr>    <tr>        <td>李强</td>        <td>张明</td>        <td>王平</td>    </tr></tbody></table></code></pre><table>    <tbody><tr>        <th rowspan="2">值班人员</th>        <th>星期一</th>        <th>星期二</th>        <th>星期三</th>    </tr>    <tr>        <td>李强</td>        <td>张明</td>        <td>王平</td>    </tr></tbody></table><h3 id="15-内嵌图标"><a href="#15-内嵌图标" class="headerlink" title="15. 内嵌图标"></a>15. 内嵌图标</h3><p>本站的图标系统对外开放，在文档中输入</p><pre><code><i class="icon-weibo"></i></code></pre><p>即显示微博的图标： <i class="icon-weibo icon-2x"></i></p><p>替换 上述 <code>i 标签</code> 内的 <code>icon-weibo</code> 以显示不同的图标，例如：</p><pre><code><i class="icon-renren"></i></code></pre><p>即显示人人的图标： <i class="icon-renren icon-2x"></i></p><p>更多的图标和玩法可以参看 <a href="http://fortawesome.github.io/Font-Awesome/3.2.1/icons/" target="_blank" rel="noopener">font-awesome</a> 官方网站。</p><h3 id="16-待办事宜-Todo-列表"><a href="#16-待办事宜-Todo-列表" class="headerlink" title="16. 待办事宜 Todo 列表"></a>16. 待办事宜 Todo 列表</h3><p>使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：</p><pre><code>- [ ] **Cmd Markdown 开发**    - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率    - [ ] 支持以 PDF 格式导出文稿    - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)    - [x] 改进 LaTex 功能        - [x] 修复 LaTex 公式渲染问题        - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers)- [ ] **七月旅行准备**    - [ ] 准备邮轮上需要携带的物品    - [ ] 浏览日本免税店的物品    - [x] 购买蓝宝石公主号七月一日的船票</code></pre><p>对应显示如下待办事宜 Todo 列表：</p><ul><li><input disabled type="checkbox"> <strong>Cmd Markdown 开发</strong><ul><li><input disabled type="checkbox"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li><li><input disabled type="checkbox"> 支持以 PDF 格式导出文稿</li><li><input checked disabled type="checkbox"> 新增Todo列表功能 <a href="https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments" target="_blank" rel="noopener">语法参考</a></li><li><input checked disabled type="checkbox"> 改进 LaTex 功能<ul><li><input checked disabled type="checkbox"> 修复 LaTex 公式渲染问题</li><li><input checked disabled type="checkbox"> 新增 LaTex 公式编号功能 <a href="http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers" target="_blank" rel="noopener">语法参考</a></li></ul></li></ul></li><li><input disabled type="checkbox"> <strong>七月旅行准备</strong><ul><li><input disabled type="checkbox"> 准备邮轮上需要携带的物品</li><li><input disabled type="checkbox"> 浏览日本免税店的物品</li><li><input checked disabled type="checkbox"> 购买蓝宝石公主号七月一日的船票</li></ul></li></ul><p>[^footnote]: 这是一个 <em>注脚</em> 的 <strong>文本</strong>。</p><p>[^footnote2]: 这是另一个 <em>注脚</em> 的 <strong>文本</strong>。</p><blockquote><h3 id="其他参考："><a href="#其他参考：" class="headerlink" title="其他参考："></a>其他参考：</h3><h3 id="Markdown语法大全-超级版"><a href="#Markdown语法大全-超级版" class="headerlink" title="Markdown语法大全(超级版)"></a><a href="https://www.jianshu.com/p/ebe52d2d468f" target="_blank" rel="noopener">Markdown语法大全(超级版)</a></h3></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git命令</title>
      <link href="/2020/02/21/Git%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/02/21/Git%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="git初始化设置"><a href="#git初始化设置" class="headerlink" title="git初始化设置"></a><center>git初始化设置</center></h2><p><strong>设置用户名和密码</strong> </p><pre><code>git config --global user.name "haojy_dev"git config --global user.email "haojy11@163.com"---git config --local  xxxxxxx---git config --system xxxxxxx作用域优先级：  git config --local> git config --global > git config --system1. 仓库级别 local2. 用户级别 global3. 系统级别 system</code></pre><p><strong>git查看所有的配置信息</strong> <code>git config -l</code></p><p><strong>查看仓库配置</strong><code>git config --local -l</code></p><p><strong>查看用户配置</strong> <code>git config --global -l</code></p><p><strong>查看系统配置</strong> <code>git config --system -l</code></p><p><strong>增加配置项</strong> <code>git config [--local|--global|--system] --add section.key value(默认是添加在local配置中)</code></p><p><strong>获取一个配置项</strong>  <code>git config [--local|--global|--system] --get section.key(默认是获取local配置中内容)</code></p><p><strong>删除一个配置项</strong>  <code>git config [--local|--global|--system] --unset section.key</code></p><p><strong>生成公钥和私钥</strong> <code>ssh-keygen -t rsa -C"youremail@example.com"</code></p><p><strong>初始化仓库</strong> <code>git init</code></p><h2 id="git基本操作"><a href="#git基本操作" class="headerlink" title="git基本操作"></a><center>git基本操作</center></h2><p><strong>将文件添加到仓库</strong> <code>git add filename</code></p><p><strong>一次添加多个文件</strong> <code>git add .</code></p><p><strong>将文件提交到仓库</strong> <code>git commit -m "message"</code></p><p><strong>将文件从仓库删除</strong> <code>git rm filemame</code></p><p><strong>查看当前状态</strong> <code>git status</code></p><p><strong>文件重命名</strong> <code>git mv readme readme.md</code></p><p><strong>对最近一次提交的说明 进行更改</strong> <code>git commit --amend</code></p><p><strong>查看文件内容</strong> <code>cat index.html</code></p><p><strong>设置git提交忽略的文件</strong> <code>vi .gitignore</code></p><p><strong>vi 修改文件编码格式:</strong> </p><pre><code>:set encoding=utf-8 fileencodings=utf-8:wq!</code></pre><h2 id="git回退操作"><a href="#git回退操作" class="headerlink" title="git回退操作"></a><center>git回退操作</center></h2><p><strong>删除所有untracked的文件</strong> <code>git clean -df</code></p><p><strong>将本地修改撤销掉</strong> <code>git checkout -- filename</code></p><p><strong>清空暂存区所有文件</strong> <code>git reset --hard</code></p><p><strong>将暂存区修改撤销掉</strong> <code>git reset HEAD filename</code></p><p><strong>将本地文件回退到指定版本</strong> <code>git reset --hard version_number</code></p><p><strong>将本地文件回退到上一版本</strong> <code>git reset --hard HEAD^</code></p><p><strong>工作区与暂存区恢复一致</strong> <code>git reset --hard HEAD</code></p><p><strong>删除版本库中的内容</strong> <code>git rm -r -f --cached out+commit</code></p><p><strong>git远程强制覆盖本地</strong></p><pre><code>$ git fetch --all$ git reset --hard origin/master $ git pull</code></pre><h2 id="DIFF操作"><a href="#DIFF操作" class="headerlink" title="DIFF操作"></a><center>DIFF操作</center></h2><p><strong>查看工作区和暂存区差别</strong> <code>git diff</code></p><p><strong>查看暂存区和仓库差别</strong> <code>git diff --cached</code></p><p><strong>查看工作区和仓库差别</strong> <code>git diff HEAD</code></p><p><strong>查看本地分支和远程分支区别</strong> <code>git diff master origin/master</code></p><p><strong>直接将两个分支上最新的提交做diff</strong> <code>git diff topic master</code></p><p><strong>查看当前目录和另外一个分支的差别</strong> <code>git diff test</code></p><p><strong>比较两个历史版本之间的差异</strong> <code>git diff SHA1 SHA2</code></p><p><strong>比较两个版本间有哪些文件变更</strong> <code>git diff edf19e c458bd7 --stat</code></p><p><strong>git查看不同版本某一文件差异</strong> <code>git diff HEAD edf19e c458bd7 --stat ---index.html</code></p><p><strong>git查看不同分支文件差异</strong> <code>git diff <branchname> master --stat --index.html</branchname></code></p><h2 id="git分支操作"><a href="#git分支操作" class="headerlink" title="git分支操作"></a><center>git分支操作</center></h2><p><strong>创建分支</strong> <code>git branch <branchname></branchname></code></p><p><strong>创建并切换到分支</strong> <code>git checkout -b <branchname></branchname></code></p><p><strong>切换分支</strong> <code>git checkout <branchname></branchname></code></p><p><strong>删除分支</strong> <code>git branch -d <branchname></branchname></code> <code>git branch -D <branchname></branchname></code></p><p><strong>删除远程分支</strong> <code>git push origin --delete <branchname></branchname></code></p><p><strong>与当前分支合并</strong> <code>git merge <branchname></branchname></code></p><p><strong>查看分支</strong> <code>git branch -a</code> <code>git branch -av</code></p><p><strong>查看所有本地分支和远程分支之间关联</strong> <code>git branch -vv</code></p><h2 id="git远程库操作"><a href="#git远程库操作" class="headerlink" title="git远程库操作"></a><center>git远程库操作</center></h2><p><strong>从远程库克隆</strong> <code>git clone git@link/file.git</code></p><p><strong>查看远程仓库信息</strong> <code>git remote -v</code></p><p><strong>将远程仓库和本地仓库关联</strong> <code>git remote add origin git@link/file.git(origin并非固定值)</code></p><p><strong>解除与远程仓库的关联</strong> <code>git remote rm origin</code></p><p><strong>设置本地分支和远程分支的关联</strong> <code>git branch --set-upstream-to origin/dev dev</code></p><p><strong>从远程仓库拉取并合并</strong> <code>git pull origin dev</code></p><p><strong>服务端和本地同步</strong> <code>git pull origin master --allow-unrelated-histories</code></p><p><strong>从远程仓库获取并合并</strong> <code>git fecth origin dev + git merge origin/branch</code></p><p><strong>将本地仓库内容推送到关联的远程：</strong>      <code>git push origin master（master为当前分支）</code></p><h2 id="git-stash操作"><a href="#git-stash操作" class="headerlink" title="git stash操作"></a><center>git stash操作</center></h2><p><strong>存储</strong> <code>git stash</code></p><p><strong>查看stash区域</strong> <code>git stash list</code></p><p><strong>恢复stash中内容</strong> <code>git stash apply stash@{stash_number}</code></p><p><strong>删除stash中内容</strong> <code>git stash drop stash@{stash_number}</code></p><h2 id="git-tag操作"><a href="#git-tag操作" class="headerlink" title="git tag操作"></a><center>git tag操作</center></h2><p><strong>查看tag</strong> <code>git tag</code></p><p><strong>查看tag详细信息</strong> <code>git show v1.0</code></p><p><strong>创建tag</strong> <code>git tag -a v1.0 -m 'this is test version 1.0'</code></p><p><strong>删除本地tag</strong> <code>git tag -d v0.8</code></p><p><strong>删除远程tag</strong> <code>git push origin master :refs/tags/v0.8</code></p><p><strong>tag推送到远程</strong> <code>git push origin v1.0</code></p><h2 id="git图形界面"><a href="#git图形界面" class="headerlink" title="git图形界面"></a><center>git图形界面</center></h2><p><strong>查看</strong> <code>gitk</code></p><h2 id="git-Log"><a href="#git-Log" class="headerlink" title="git Log"></a><center>git Log</center></h2><p><strong>查看历史记录</strong> <code>git log -- pretty=oneline</code></p><p><strong>查看git版本演进历史</strong> <code>git log --graph</code></p><p><strong>短链接方式显示提交记录</strong> <code>git log --oneline</code></p><p><strong>显示最近的4条提交记录</strong> <code>git log --n4</code></p><p><strong>显示全部日志，包括不同分支的日志记录</strong> <code>git log --all</code></p><p><strong>xxx为log日志短链接的名称，-p 表示查看文件内容，-t 表示查看文件类型</strong> <code>git cat-file -p</code></p><p><strong>查看命令记录</strong> <code>git reflog</code></p><h2 id="git协议"><a href="#git协议" class="headerlink" title="git协议"></a><center>git协议</center></h2><p><strong>本地协议[哑协议]</strong> <code>/path/to/repo.git</code></p><p><strong>本地协议[智能协议]</strong> <code>file:///path/to/repo.git</code></p><p><strong>http/https协议[智能协议]</strong> <code>https://github.com/HJY-dev/HJY-dev.github.io.git</code></p><p><strong>ssh协议[智能协议]</strong> <code>git@github.com:HJY-dev/HJY-dev.github.io.git</code></p><blockquote><p>文章对 Nauyus 公众号文章【一分钟了解git最实用操作】 进行补充修改。<br>可扫码关注公众号，支持原创。<br><a href="https://mp.weixin.qq.com/mp/qrcode?scene=10000004&size=102&__biz=MzA3NzQ4MzYwNQ==&mid=2247483846&idx=1&sn=95131aa014dc37aecdc058236f245f97&send_time=" data-fancybox="group" data-caption="Nauyus" class="fancybox"><img alt="Nauyus" title="Nauyus" data-src="https://mp.weixin.qq.com/mp/qrcode?scene=10000004&size=102&__biz=MzA3NzQ4MzYwNQ==&mid=2247483846&idx=1&sn=95131aa014dc37aecdc058236f245f97&send_time=" class="lazyload"></a></p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/02/20/hello-world/"/>
      <url>/2020/02/20/hello-world/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure></div><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure></div><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure></div><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p></body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SonarQube系列二之代码分析</title>
      <link href="/2019/12/21/SonarQube%E7%B3%BB%E5%88%97%E4%BA%8C%E4%B9%8B%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2019/12/21/SonarQube%E7%B3%BB%E5%88%97%E4%BA%8C%E4%B9%8B%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="SonarQube系列（一）之代码分析"><a href="#SonarQube系列（一）之代码分析" class="headerlink" title="SonarQube系列（一）之代码分析"></a>SonarQube系列（一）之代码分析</h2><h3 id="1-【SonarQube分析C-代码】"><a href="#1-【SonarQube分析C-代码】" class="headerlink" title="1.【SonarQube分析C#代码】"></a>1.【SonarQube分析C#代码】</h3><h3 id="2-【添加单元测试信息】"><a href="#2-【添加单元测试信息】" class="headerlink" title="2.【添加单元测试信息】"></a>2.【添加单元测试信息】</h3><h3 id="3-【扩展】"><a href="#3-【扩展】" class="headerlink" title="3.【扩展】"></a>3.【扩展】</h3><blockquote><p>参考资料<br>QiXiao_柒小(東): <a href="https://www.cnblogs.com/7tiny/p/11269774.html" target="_blank" rel="noopener">《SonarQube系列一、Linux安装与部署》</a></p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> SonarQub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SonarQub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SonarQube系列一之Linux安装部署</title>
      <link href="/2019/12/20/SonarQube%E7%B3%BB%E5%88%97%E4%B8%80%E4%B9%8BLinux%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/12/20/SonarQube%E7%B3%BB%E5%88%97%E4%B8%80%E4%B9%8BLinux%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="SonarQube系列（一）之Linux安装部署"><a href="#SonarQube系列（一）之Linux安装部署" class="headerlink" title="SonarQube系列（一）之Linux安装部署"></a>SonarQube系列（一）之Linux安装部署</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>SonarQube® 是一种自动代码审查工具，用于检测代码中的错误，漏洞和多余的代码。它可以与您现有的工作流程集成，以便在项目分支和拉取请求之间进行连续的代码检查。比如：</p><p>SonarQube集成 gitlab，在分支推送的时候自动进行代码检查分析，生成代码报告。</p><p>SonarQube集成 jenkins，在代码构建的时候自动进行代码分析，生成代码报告。</p><p>总之，SonarQube是可以配合一切好用的CI/CD工具进行自动化分析代码并生成代码报告，通过报告我们可以看到代码中可能存在的bug和代码债务。</p><blockquote><p>官方网站：<a href="https://www.sonarqube.org/" target="_blank" rel="noopener">https://www.sonarqube.org/</a></p></blockquote><h3 id="1-【SonarQube安装】"><a href="#1-【SonarQube安装】" class="headerlink" title="1.【SonarQube安装】"></a>1.【SonarQube安装】</h3><h3 id="2-【SonarQube插件】"><a href="#2-【SonarQube插件】" class="headerlink" title="2.【SonarQube插件】"></a>2.【SonarQube插件】</h3><blockquote><p>参考资料<br>QiXiao_柒小(東): <a href="https://www.cnblogs.com/7tiny/p/11269774.html" target="_blank" rel="noopener">《SonarQube系列一、Linux安装与部署》</a><br>码农阿宇：<a href="https://www.cnblogs.com/CoderAyu/p/9416376.html" target="_blank" rel="noopener">《基于Win10极简SonarQube C#代码质量分析》</a></p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> SonarQub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SonarQub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux实战技能四</title>
      <link href="/2019/11/23/Linux%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD%E5%9B%9B/"/>
      <url>/2019/11/23/Linux%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD%E5%9B%9B/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="Linux之战技能之Shell篇"><a href="#Linux之战技能之Shell篇" class="headerlink" title="Linux之战技能之Shell篇"></a>Linux之战技能之Shell篇</h2></body></html>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux实战技能三</title>
      <link href="/2019/11/22/Linux%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD%E4%B8%89/"/>
      <url>/2019/11/22/Linux%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="Linux之战技能之系统管理篇"><a href="#Linux之战技能之系统管理篇" class="headerlink" title="Linux之战技能之系统管理篇"></a>Linux之战技能之系统管理篇</h2><h3 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h3><ul><li><p>net-tools</p><ul><li><code>ifconfig</code></li><li><code>route</code></li><li><code>netstat</code></li></ul></li><li><p>iproute2</p><ul><li><code>ip</code></li><li><code>ss</code></li></ul></li><li><p>ifconfig</p><ul><li>eth0 第一块网卡（网络接口）<ul><li>eno1 板载网卡</li><li>ens33 PCI-E网卡</li><li>enp0s3 无法获取物理信息的 PCI-E 网卡</li><li>CentOS 7 使用了一致性网络设备命名，以上都不匹配则使用eth0</li></ul></li></ul></li><li><p>查看网络情况</p><ul><li><code>mii-tool eth0</code></li></ul></li><li><p>查看网关命令</p><ul><li><code>route -n</code></li><li>使用<code>-n</code>参数不解析主机名</li></ul></li></ul><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><ul><li><p>网络配置命令</p><ul><li><code>ifconfig <接口>  <ip地址> [netmask  子网掩码 ]</ip地址></code></li><li><code>ifup <接口></code></li><li><code>ifdown <接口></code></li></ul></li><li><p>网管配置命令</p><ul><li>添加网关<ul><li><code>route add default gw <网关IP></code></li><li><code>route add -host <指定IP> gw <网关IP></code></li><li><code>route add -net <指定网段> netmask <子网掩码> gw <网关IP></code></li></ul></li></ul></li><li><p>网络命令集合</p><ul><li><code>ip addr ls</code><ul><li>ifconfig</li></ul></li><li><code>ip link set dev eth0 up</code><ul><li>ifup eth0</li></ul></li><li><code>ip addr add 10.0.0.1/24 dev eth1</code><ul><li>ifconfig eth1 10.0.0.1 netmask 255.255.255.0</li></ul></li><li><code>ip route add 10.0.0.1/24 via 192.168.0.1</code><ul><li>route add -net 10.0.0.0 netmask 255.255.255.0 gw 192.168.0.1</li></ul></li></ul></li><li><p>网络故障排除命令</p><ul><li><code>ping</code></li><li><code>traceroute</code></li><li><code>mtr</code></li><li><code>nslookup</code></li><li><code>telnet</code></li><li><code>tcpdump</code></li><li><code>netstat</code></li><li><code>ss</code></li></ul></li><li><p>网络服务管理</p><ul><li>网络服务管理程序分为两种，分别为SysV和systemd <ul><li><code>service network start|stop|restart</code></li><li><code>chkconfig -list network</code></li><li><code>systemctl list-unit-files  NetworkManager.service</code></li><li><code>systemctl start|stop|restart NetworkManger</code></li><li><code>systemctl enable|disable NetworkManger</code></li></ul></li></ul></li><li><p>网络配置文件</p><ul><li><code>ifcfg-eth0</code></li><li><code>/etc/hosts</code></li></ul></li><li><p>⽹网络其他命令</p><ul><li><code>hostname</code></li><li><code>hostnamectl</code><ul><li>hostnamectl  set-hostname centos7.test </li><li>注意修改 <code>/etc/hosts</code> 文件</li></ul></li></ul></li></ul><h3 id="软件包管理器"><a href="#软件包管理器" class="headerlink" title="软件包管理器"></a>软件包管理器</h3><p>包管理器是方便软件安装、卸载，解决软件依赖关系的重要工具</p><ul><li>CentOS、RedHat 使用 yum 包管理器，软件安装包格式为 rpm</li><li>Debian、Ubuntu 使用 apt 包管理器，软件安装包格式为 deb</li></ul><h4 id="rpm-包"><a href="#rpm-包" class="headerlink" title="rpm 包"></a>rpm 包</h4><ul><li><p>格式</p><ul><li>vim-common-7.4.10-5.el7.x86_64.rpm </li><li>软件名称   软件版本  系统版本 平台   </li></ul></li><li><p>rpm 命令</p><ul><li>-q 查询软件包</li><li>-i 安装软件包</li><li>-e 卸载软件包</li></ul></li></ul><h4 id="yum-包管理器"><a href="#yum-包管理器" class="headerlink" title="yum 包管理器"></a>yum 包管理器</h4><ul><li><p>rpm 包的问题</p><ul><li>需要自己解决依赖关系</li><li>软件包来源不可靠</li></ul></li><li><p>CentOS yum 源</p><ul><li><a href="http://mirror.centos.org/centos/7/" target="_blank" rel="noopener">http://mirror.centos.org/centos/7/</a> </li></ul></li><li><p>国内镜像</p><ul><li><a href="https://opsx.alibaba.com/mirror" target="_blank" rel="noopener">https://opsx.alibaba.com/mirror</a></li></ul></li><li><p>yum 常用命令</p><ul><li>install 安装软件包</li><li>remove 卸载软件包</li><li>listl grouplist 查看软件包</li><li>update 升级软件包</li></ul></li></ul><h4 id="其他安装方式"><a href="#其他安装方式" class="headerlink" title="其他安装方式"></a>其他安装方式</h4><ul><li>二进制安装</li><li>源代码编译安装<ul><li>wget <a href="https://openresty.org/download/openresty-1.15.8.1.tar.gz" target="_blank" rel="noopener">https://openresty.org/download/openresty-1.15.8.1.tar.gz</a> </li><li>tar -zxf openresty-VERSION.tar.gz </li><li>cd openresty-VERSION/ </li><li>./configure –prefix=/usr/local/openresty </li><li>make -j2 </li><li>make install</li></ul></li></ul><h4 id="升级内核"><a href="#升级内核" class="headerlink" title="升级内核"></a>升级内核</h4><ul><li>rpm 格式内核<ul><li>查看内核版本<ul><li>uname -r</li></ul></li><li>升级内核版本<ul><li>yum install kernel-3.10.0</li></ul></li><li>升级已安装的其他软件包和补丁<ul><li>yum update</li></ul></li></ul></li></ul><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><h4 id="进程的查看命令"><a href="#进程的查看命令" class="headerlink" title="进程的查看命令"></a>进程的查看命令</h4><ul><li>查看命令<ul><li><code>ps</code></li><li><code>pstree</code></li><li><code>top</code></li></ul></li><li>结论：<ul><li>进程也是树形结构</li><li>进程和权限有着密不可分的关系</li></ul></li></ul><h4 id="进程的优先级调整"><a href="#进程的优先级调整" class="headerlink" title="进程的优先级调整"></a>进程的优先级调整</h4><ul><li><p>调整优先级</p><ul><li><code>nice</code> 范围从 -20 到 19，值越小优先级越高，抢占资源就越多</li><li><code>renice</code> 重新设置优先级</li></ul></li><li><p>进程的作业控制</p><ul><li><code>jobs</code></li><li><code>& 符号</code></li></ul></li></ul><h4 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h4><p>信号是进程间通信方式之一，典型用法是：终端用户输入中断命令，通过信号机制 停止一个程序的运行。</p><ul><li>使用信号的常用快捷键和命令 <ul><li><code>kill -l</code><ul><li>SIGINT 通知前台进程组终止进程 ctrl+c</li><li>SIGKILL 立即结束程序，不能被阻塞和处理 kill -9 pid</li></ul></li></ul></li></ul><h4 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h4><h4 id="系统日志"><a href="#系统日志" class="headerlink" title="系统日志"></a>系统日志</h4><h4 id="服务管理工具systemctl"><a href="#服务管理工具systemctl" class="headerlink" title="服务管理工具systemctl"></a>服务管理工具systemctl</h4><h3 id="内存与磁盘管理"><a href="#内存与磁盘管理" class="headerlink" title="内存与磁盘管理"></a>内存与磁盘管理</h3><h4 id="内存使用率查看"><a href="#内存使用率查看" class="headerlink" title="内存使用率查看"></a>内存使用率查看</h4><h4 id="磁盘使用率查看"><a href="#磁盘使用率查看" class="headerlink" title="磁盘使用率查看"></a>磁盘使用率查看</h4><h4 id="常见文件系统"><a href="#常见文件系统" class="headerlink" title="常见文件系统"></a>常见文件系统</h4><h4 id="ext4-文件系统"><a href="#ext4-文件系统" class="headerlink" title="ext4 文件系统"></a>ext4 文件系统</h4><h4 id="磁盘分区与挂载"><a href="#磁盘分区与挂载" class="headerlink" title="磁盘分区与挂载"></a>磁盘分区与挂载</h4><h4 id="系统综合状态查询"><a href="#系统综合状态查询" class="headerlink" title="系统综合状态查询"></a>系统综合状态查询</h4><ul><li>使用<code>sar</code>命令查看系统综合状态 </li><li>使用第三方命令查看网络流量<ul><li><code>yum install epel-release</code></li><li><code>yum install iftop</code></li><li><code>iftop -P</code></li></ul></li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux实战技能二</title>
      <link href="/2019/11/21/Linux%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD%E4%BA%8C/"/>
      <url>/2019/11/21/Linux%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="Linux之战技能之系统操作篇"><a href="#Linux之战技能之系统操作篇" class="headerlink" title="Linux之战技能之系统操作篇"></a>Linux之战技能之系统操作篇</h2><h3 id="帮助命令：man、help、info"><a href="#帮助命令：man、help、info" class="headerlink" title="帮助命令：man、help、info"></a>帮助命令：man、help、info</h3><h4 id="man-命令"><a href="#man-命令" class="headerlink" title="man 命令"></a>man 命令</h4><p><code>man</code>帮助用法演示</p><pre><code>man ls</code></pre><p><code>man</code>也是一条命令，分为9章，可以使⽤用 man 命令获得 man 的帮助 </p><pre><code>man 7 man</code></pre><h4 id="help-命令"><a href="#help-命令" class="headerlink" title="help 命令"></a>help 命令</h4><p>shell（命令解释器器）自带的命令称为内部命令，其他的是外部命令</p><p>内部命令使用 <code>help</code>帮助  </p><pre><code>help cd </code></pre><p>外部命令使用<code>help</code>帮助 </p><pre><code>ls  --help</code></pre><h4 id="info-命令"><a href="#info-命令" class="headerlink" title="info 命令"></a>info 命令</h4><p><code>info</code>帮助比 help 更详细，作为 help 的补充 </p><pre><code>info ls</code></pre><h3 id="pwd和ls命令"><a href="#pwd和ls命令" class="headerlink" title="pwd和ls命令"></a>pwd和ls命令</h3><p><code>pwd</code> 显示当前的目录名称</p><p><code>ls</code>   查看当前目录下的文件</p><pre><code>ls       [选项，选项… ]  参数 … 常⽤用参数： -l       长格式显示⽂文件 -a       显示隐藏⽂文件 -r       逆序显示 -t       按照时间顺序显示 -R       递归显</code></pre><h3 id="详解cd命令"><a href="#详解cd命令" class="headerlink" title="详解cd命令"></a>详解cd命令</h3><p><code>cd</code> 更改当前的操作目录 </p><ul><li><code>cd /path/to/…</code>  绝对路径 </li><li><code>cd ./path/to/…</code>  相对路径 </li><li><code>cd ../path/to/…</code> 相对路径 </li></ul><h3 id="创建和删除目录"><a href="#创建和删除目录" class="headerlink" title="创建和删除目录"></a>创建和删除目录</h3><p><code>mkdir</code>     建立目录 </p><pre><code>常用参数 -p          建立多级⽬目录</code></pre><p><code>rmdir</code>    删除空目录<br><code>rm -r</code>   删除非空目录</p><h3 id="复制和移动目录"><a href="#复制和移动目录" class="headerlink" title="复制和移动目录"></a>复制和移动目录</h3><p><code>cp</code> 复制文件和目录</p><pre><code>cp [选项]        文件路径cp [选项]        文件…   路径常⽤用参数 -r       复制目录 -p       保留用户、权限、时间等文件属性-a       等同于 -dpR </code></pre><p><code>mv</code>移动文件</p><ul><li>mv  [选项]  源文件 目标文件 </li><li>mv  [选项]  源文件 目录</li></ul><p><code>rm</code>删除文件 </p><pre><code>常⽤用参数 -r 删除目录（包括目录下的所有文件） -f 删除文件不进行行提示 注意： rm 命令可以删除多个目录，需谨慎使用</code></pre><h3 id="如何在Linux下进行文本查看"><a href="#如何在Linux下进行文本查看" class="headerlink" title="如何在Linux下进行文本查看"></a>如何在Linux下进行文本查看</h3><ul><li><code>cat</code>文本内容显示到终端 </li><li><code>head</code> 查看文件开头 </li><li><code>tail</code> 查看文件结尾  <ul><li>常用参数 <code>-f</code>  文件内容更新后，显示信息同步更新  </li></ul></li><li><code>wc</code>  统计文件内容信息</li></ul><h3 id="打包压缩和解压缩"><a href="#打包压缩和解压缩" class="headerlink" title="打包压缩和解压缩"></a>打包压缩和解压缩</h3><h4 id="Linux-的备份压缩"><a href="#Linux-的备份压缩" class="headerlink" title="Linux 的备份压缩"></a>Linux 的备份压缩</h4><ul><li>早的 Linux 备份介质是磁带，使用的命令是 tar</li><li>可以打包后的磁带文件进行行压缩储存，压缩的命令是 gzip 和 bzip2 </li><li>经常使用的扩展名是  .tar.gz .tar.bz2 .tgz </li></ul><h4 id="打包命令"><a href="#打包命令" class="headerlink" title="打包命令"></a>打包命令</h4><p><code>tar</code>打包命令 </p><pre><code>常用参数   c 打包   x 解包 f 指定操作类型为文件</code></pre><h4 id="压缩和解压缩"><a href="#压缩和解压缩" class="headerlink" title="压缩和解压缩"></a>压缩和解压缩</h4><p>可以使用 <code>gzip</code>和<code>bzip2</code> 命令单独操作<br>通常和<code>tar</code>命令配合操作 </p><pre><code>常⽤参数 -z gzip  格式压缩和解压缩 -j bzip2 格式压缩和解压缩</code></pre><h3 id="Vim的四种模式"><a href="#Vim的四种模式" class="headerlink" title="Vim的四种模式"></a>Vim的四种模式</h3><h4 id="四种模式"><a href="#四种模式" class="headerlink" title="四种模式"></a>四种模式</h4><ul><li>正常模式 (Normal-mode)<ul><li>基本操作</li><li><code>y</code> 复制</li><li><code>d</code> 剪切</li><li><code>p</code> 粘贴</li><li><code>u</code> 撤销</li><li><code>ctrl+r</code> 重做</li><li><code>x</code> 删除单个字符</li><li><code>r</code> 替换单个字符</li><li><code>G</code> 定位指定的行</li><li><code>^</code> 定位到行首</li><li><code>$</code> 定位到行尾</li></ul></li><li>插入模式 (Insert-mode) <ul><li><code>i</code> <code>I</code> <code>a</code> <code>A</code> <code>o</code> <code>O</code> 进入插入模式</li></ul></li><li>命令模式 (Command-mode) <ul><li><code>:w</code> 写入</li><li><code>:q</code> 退出</li><li><code>:!</code> 执行shell命令</li><li><code>:s</code> 替换</li><li><code>/</code>  查找</li><li><code>:set</code> 设置命令</li></ul></li><li>可视模式 (Visual-mode) <ul><li><code>v</code> 字符可视模式</li><li><code>V</code> 行可视模式</li><li><code>ctrl+v</code> 块可视模式<ul><li>配合 <code>d</code> 和 <code>I</code>（大写i）命令可以进行块的便利操作</li></ul></li></ul></li></ul><h3 id="用户和用户组管理及密码管理"><a href="#用户和用户组管理及密码管理" class="headerlink" title="用户和用户组管理及密码管理"></a>用户和用户组管理及密码管理</h3><ul><li><p>用户管理常用命令</p><ul><li><code>useradd</code> 新建用户</li><li><code>userdel</code> 删除用户</li><li><code>passwd</code>修改用户密码</li><li><code>usermod</code> 修改用户属性</li><li><code>chage</code>修改用户属性</li></ul></li><li><p>组织管理命令</p><ul><li><code>groupadd</code> 新建用户组</li><li><code>groupdel</code> 删除用户组</li></ul></li><li><p>用户切换</p><ul><li><code>su</code> 切换用户</li><li><code>su - UserName</code> 使用 login shell 方式切换用户</li><li><code>sudo</code> 以其他用户身份执行命令</li><li><code>visudo</code> 设置需要使用sudo的用户（组）</li></ul></li><li><p>用户配置文件</p><ul><li><code>/etc/passwd</code> 用户配置文件</li><li><code>/etc/shadow</code> 用户密码相关配置文件</li><li><code>/etc/group</code> 用户组配置文件</li></ul></li><li><p>查看文件权限的方法</p><ul><li><code>-r</code> <code>w-------1</code> <code>root root</code> 1523 sep 28 12:05 <code>anaconda-ks.cfg</code>  分别指： 类型、权限、所属用户和组、文件名</li></ul></li><li><p>文件类型</p><ul><li>-普通文件</li><li><code>d</code> 目录文件</li><li><code>b</code> 块特殊文件</li><li><code>c</code> 字符特殊文件</li><li><code>|</code> 符号链接</li><li><code>f</code> 命名管道</li><li><code>s</code> 套接字文件</li></ul></li><li><p>文件权限</p><ul><li>字符权限表示方法<ul><li><code>r</code> 读</li><li><code>w</code> 写</li><li><code>x</code> 执行</li></ul></li><li>数字权限的表示方法<ul><li><code>r=4</code></li><li><code>w=2</code></li><li><code>x=1</code></li></ul></li></ul></li><li><p>文件权限的表示方法</p><ul><li><p>-rw-r-xr–1 username groupname mtime filename</p><ul><li><code>rw-</code> 文件属主的权限</li><li><code>r-x</code> 文件属组的权限</li><li><code>r--</code> 其他用户的权限</li></ul></li><li><p>创建新文件有默认权限，根据 umask 值计算，属主和属组根据当前进程的用户来设定</p></li></ul></li><li><p>目录权限的表示方法</p><ul><li><code>x</code> 进入目录</li><li><code>rx</code> 显示目录内的文件名</li><li><code>wx</code> 修改目录内的文件名</li></ul></li><li><p>修改权限命令</p><ul><li><code>chmod</code> 修改文件、目录权限<ul><li>chmod u+x /tmp/testfile</li><li>chmod 755 /tmp/testfile</li></ul></li><li><code>chown</code> 更改属主、属组</li><li><code>chgrp</code> 可以单独更改属组，不常用  </li></ul></li><li><p>特殊权限</p><ul><li><p><code>SUID</code> 用于二进制可执行文件，执行命令时取得文件属主权限 </p><ul><li>如 /usr/bin/passwd</li></ul></li><li><p><code>SGID</code> 用于目录，在该目录下创建新的文件和目录，权限自动更改为该目录的属组</p></li><li><p><code>SBIT</code> 用于目录，该目录下新建的文件和目录，仅root和自己可以删除</p><ul><li>如 /tmp</li></ul></li></ul></li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux实战技能一</title>
      <link href="/2019/11/20/Linux%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD%E4%B8%80/"/>
      <url>/2019/11/20/Linux%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="Linux-实战技能之基础篇"><a href="#Linux-实战技能之基础篇" class="headerlink" title="Linux 实战技能之基础篇"></a>Linux 实战技能之基础篇</h2><h3 id="什么是Linux"><a href="#什么是Linux" class="headerlink" title="什么是Linux"></a>什么是Linux</h3><p>Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。</p><p>Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。</p><p>Linux 能运行主要的 UNIX 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p><h3 id="Linux的内核版本及常见发行版"><a href="#Linux的内核版本及常见发行版" class="headerlink" title="Linux的内核版本及常见发行版"></a>Linux的内核版本及常见发行版</h3><p>Linux 的发行版说简单点就是将 Linux 内核与应用软件做一个打包。</p><p><a href="/2019/11/20/Linux%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD%E4%B8%80/1.png" data-fancybox="group" data-caption="Linux" class="fancybox"><img alt="Linux" title="Linux" data-src="/2019/11/20/Linux%E5%AE%9E%E6%88%98%E6%8A%80%E8%83%BD%E4%B8%80/1.png" class="lazyload"></a></p><p>目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等。</p><h3 id="安装VirtualBox虚拟机"><a href="#安装VirtualBox虚拟机" class="headerlink" title="安装VirtualBox虚拟机"></a>安装VirtualBox虚拟机</h3><h3 id="在虚拟机中安装Linux系统"><a href="#在虚拟机中安装Linux系统" class="headerlink" title="在虚拟机中安装Linux系统"></a>在虚拟机中安装Linux系统</h3><h3 id="第一次启动Linux"><a href="#第一次启动Linux" class="headerlink" title="第一次启动Linux"></a>第一次启动Linux</h3></body></html>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SkyWalking学习笔记</title>
      <link href="/2019/08/26/SkyWalking%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/08/26/SkyWalking%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body></body></html>]]></content>
      
      
      <categories>
          
          <category> NetCore </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NetCore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端进阶优秀文章整理</title>
      <link href="/2019/03/26/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BC%98%E7%A7%80%E6%96%87%E7%AB%A0%E6%95%B4%E7%90%86/"/>
      <url>/2019/03/26/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BC%98%E7%A7%80%E6%96%87%E7%AB%A0%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="前端进阶必备，github-优质资源整理"><a href="#前端进阶必备，github-优质资源整理" class="headerlink" title="前端进阶必备，github 优质资源整理"></a>前端进阶必备，github 优质资源整理</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前端技术日新月异，随着 大前端 的趋势，想要成为一名合格的前端工程师，需要学习掌握的东西更是宽泛。所以我们在寻求进阶的过程中，既要不断夯实前端基础，也要快速响应技术的更新迭代。闲话少说，这次给大家整理分享一些前端进阶的优质学习资源，希望对大家有所帮助！</p><blockquote><p><a href="https://juejin.im/post/5d3edad9f265da03a652f133" target="_blank" rel="noopener">github 优质项目</a><br><a href="https://juejin.im/post/5d23e750f265da1b855c7bbe" target="_blank" rel="noopener">前端 100 问</a></p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题汇总之Vue篇</title>
      <link href="/2019/03/07/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB%E4%B9%8BVue%E7%AF%87/"/>
      <url>/2019/03/07/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB%E4%B9%8BVue%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h3 id="1-active-class-是哪个组件的属性？嵌套路由怎么定义？"><a href="#1-active-class-是哪个组件的属性？嵌套路由怎么定义？" class="headerlink" title="1. active-class 是哪个组件的属性？嵌套路由怎么定义？"></a>1. active-class 是哪个组件的属性？嵌套路由怎么定义？</h3><p>答：vue-router 模块的 router-link 组件。</p><h3 id="2-怎么定义-vue-router-的动态路由？怎么获取传过来的动态参数？"><a href="#2-怎么定义-vue-router-的动态路由？怎么获取传过来的动态参数？" class="headerlink" title="2. 怎么定义 vue-router 的动态路由？怎么获取传过来的动态参数？"></a>2. 怎么定义 vue-router 的动态路由？怎么获取传过来的动态参数？</h3><p>答：在路由的 path 属性上加上 【/:id】。获取：router.params.id。</p><h3 id="3-vue-router-有哪几种导航钩子？"><a href="#3-vue-router-有哪几种导航钩子？" class="headerlink" title="3. vue-router 有哪几种导航钩子？"></a>3. vue-router 有哪几种导航钩子？</h3><p>答：<br>（1）全局导航钩子：beforeEach()、afterEach()<br>（2）路由独享组件：beforeEnter()<br>（3）组件内的钩子：beforeRouteEnter()、beforeRouteUpdate()、beforeRouteLeave()</p><h3 id="4-scss-是什么？使用步骤是？有那几大特性？"><a href="#4-scss-是什么？使用步骤是？有那几大特性？" class="headerlink" title="4. scss 是什么？使用步骤是？有那几大特性？"></a>4. scss 是什么？使用步骤是？有那几大特性？</h3><p>答:<br>（1）预处理 css，把 css 当成函数编写，定义变量，嵌套<br>（2）npm 下三个 loader （sass-loader、css-loader、node-sass）;<br>在 build 文件夹下 webpack.base.conf.js 文件，在module 中添加规则 { test: /.sass变量名称=值）；</p><h3 id="5-mint-ui是什么？怎么使用？至少说出三个组件的使用方法？"><a href="#5-mint-ui是什么？怎么使用？至少说出三个组件的使用方法？" class="headerlink" title="5. mint-ui是什么？怎么使用？至少说出三个组件的使用方法？"></a>5. mint-ui是什么？怎么使用？至少说出三个组件的使用方法？</h3><p>答：<br>（1）基于 vue 的前端组件库。npm 安装，然后 import 样式和js，Vue.use(mintUI)全局引入。<br>（2）在单个组件内部引入：import { Toast } from ‘mint-ui’<br>（3）组件1：Toast(‘登录成功’)；<br>组件2：mint-header<br>组件3：mint-swiper</p><h3 id="6-v-model-是什么？怎么使用？vue中标签怎么绑定事件？"><a href="#6-v-model-是什么？怎么使用？vue中标签怎么绑定事件？" class="headerlink" title="6. v-model 是什么？怎么使用？vue中标签怎么绑定事件？"></a>6. v-model 是什么？怎么使用？vue中标签怎么绑定事件？</h3><p>答：是可以实现双向数据绑定的指令（v-class、v-for 、v-if、v-show、v-on）</p><div @click="someFunc"><h3 id="7-axios-是什么？怎么使用？描述使用它实现登录功能的流程？"><a href="#7-axios-是什么？怎么使用？描述使用它实现登录功能的流程？" class="headerlink" title="7. axios 是什么？怎么使用？描述使用它实现登录功能的流程？"></a>7. axios 是什么？怎么使用？描述使用它实现登录功能的流程？</h3><p>答：<br>（1）axios 是请求后台资源的模块<br>（2）npm install axios -S，然后 axios.get(‘/user’, {params: {ID: 123465}},then(res=> {}).catch(err=> {}))</p><h3 id="8-axios-tp5-进阶中，调用-axios-post-‘api-user’-是进行什么操作？axios-put-‘api-user-8’-呢？"><a href="#8-axios-tp5-进阶中，调用-axios-post-‘api-user’-是进行什么操作？axios-put-‘api-user-8’-呢？" class="headerlink" title="8. axios + tp5 进阶中，调用 axios.post(‘api/user’)是进行什么操作？axios.put(‘api/user/8’)呢？"></a>8. axios + tp5 进阶中，调用 axios.post(‘api/user’)是进行什么操作？axios.put(‘api/user/8’)呢？</h3><p>答：跨域，添加用户操作，更新操作</p><h3 id="9-谈谈对vue-组件化的理解。"><a href="#9-谈谈对vue-组件化的理解。" class="headerlink" title="9. 谈谈对vue 组件化的理解。"></a>9. 谈谈对vue 组件化的理解。</h3><p>答：组件的基本构成分别为：样式结构，行为逻辑，数据。web 中的组件其实就是页面的一部分，每个组件都会提供一些对外的接口，允许使用者使用和设置参数属性，可以将不同功能的组件结合在一起，快速的构建一个符合需求的引用</p><h3 id="10-谈谈对Vue-路由的理解。"><a href="#10-谈谈对Vue-路由的理解。" class="headerlink" title="10. 谈谈对Vue 路由的理解。"></a>10. 谈谈对Vue 路由的理解。</h3><p>答：首先Vue的单页面应用是基于路由和组件的，路由用于设定访问的路径，并将路径和组件映射起来。传统的页面应用，是通过超链接来实现页面的切换和跳转。在vue-router 中是路径之间的切换，也就是组件的切换。</p><h3 id="11-谈谈你对-Vue-钩子函数的理解"><a href="#11-谈谈你对-Vue-钩子函数的理解" class="headerlink" title="11. 谈谈你对 Vue 钩子函数的理解"></a>11. 谈谈你对 Vue 钩子函数的理解</h3><p>答：vue-router 的导航钩子主要用于拦截导航，让他完成跳转或取消。</p><h3 id="12-如何让-css-只在当前页面起作用"><a href="#12-如何让-css-只在当前页面起作用" class="headerlink" title="12. 如何让 css 只在当前页面起作用"></a>12. 如何让 css 只在当前页面起作用</h3><p>答：<code>scoped</code></p><h3 id="13-created-和-mounted-的区别"><a href="#13-created-和-mounted-的区别" class="headerlink" title="13. created 和 mounted 的区别"></a>13. created 和 mounted 的区别</h3><p>答：created 是实例创建完成之后的钩子函数；el属性不可见Ϊundefinedmounted是将编译好的HTML挂在到ҳ面完成后ִ行的钩子函数，在整个生命周期中ִֻ行һ次，；el属性不可见Ϊundefinedmounted是将编译好的HTML挂在到ҳ面完成后ִ行的钩子函数，在整个生命周期中ִֻ行һ次，；el 已创建，同时 DOM 已生成。</p><h3 id="14-created-和-mounted-分别什么时候用？"><a href="#14-created-和-mounted-分别什么时候用？" class="headerlink" title="14. created 和 mounted 分别什么时候用？"></a>14. created 和 mounted 分别什么时候用？</h3><p>答：只有 ajax 数据请求时，使用 created ；如果有依赖DOM的情况，就放在 mounted中</p><h3 id="15-vue-和-angular-分别采用什么技术实现双向数据绑定？"><a href="#15-vue-和-angular-分别采用什么技术实现双向数据绑定？" class="headerlink" title="15. vue 和 angular 分别采用什么技术实现双向数据绑定？"></a>15. vue 和 angular 分别采用什么技术实现双向数据绑定？</h3><p>答：Angular 采用”脏值检测“的方式，数据发生变更后，对于所有的数据和视图的绑定关系击行一次检测，识别是否有数据发生变化，有变化进行处理，可能进一步引发其他数据变化，所以这个过程可能会重复几次，一直到没有数据发生变化后，将变更的数据发送到视图，更新页面展示。如果是手动对 ViewModel 的数据进行变更，为确保变更同步到试图，需要手动触发一次“脏值检测”。<br>VueJS 则使用 ES5 提供的 Object.defineProperty 方法，监控对数据的操作，从而可以自动触发数据同步。并且是在不同的数据上触发同步，可以精确的将变更发送给绑定的视图，而不是对所有数据都进行一次检测。</p><h3 id="16-描述下-vue-从初始化页面–修改数据–刷新页面-UI-的过程？"><a href="#16-描述下-vue-从初始化页面–修改数据–刷新页面-UI-的过程？" class="headerlink" title="16. 描述下 vue 从初始化页面–修改数据–刷新页面 UI 的过程？"></a>16. 描述下 vue 从初始化页面–修改数据–刷新页面 UI 的过程？</h3><p>答： 当 Vue 进入初始化阶段时，一方面 Vue 会遍历 data 中的属性，并用 Object.defineProperty 将它转化成 getter/setter 的形式，实现数据劫持(暂不谈 Vue3.0 的 Proxy)；另一方面，Vue 的指令编译器 Compiler 对元素节点的各个指令进行解析，初始化视图，并订阅 Watcher 来更新试图，此时 Watcher 会将自己添加到消息订阅器 Dep 中，此时初始化完毕。<br>当数据发生变化时，触发 Observer 中 setter 方法，立即调用 Dep.notify(),Dep 这个数组开始遍历所有的订阅者，并调用其 update 方法，Vue 内部再通过 diff 算法，patch 相应的更新完成对订阅者视图的改变。</p><h3 id="17-Vue中watch、methods-和-计算属性的区别是什么？"><a href="#17-Vue中watch、methods-和-计算属性的区别是什么？" class="headerlink" title="17. Vue中watch、methods 和 计算属性的区别是什么？"></a>17. Vue中watch、methods 和 计算属性的区别是什么？</h3><p>答：watch 为了监听某个响应数据的变化。计算属性是自动监听依赖值的变化，从而动态返回内容，主要目的是简化模板内的复杂运算。所以区别来源于用法，只是需要动态值，那就用计算属性；需要知道值的改变后执行业务逻辑，才用 watch。<br>methods是一个方法，它可以接受参数，而computed 不能，computed 是可以缓存的，methods 不会。computed 可以依赖其他 computed，甚至是其他组件的 data。  </p><h3 id="18-vue中怎么重置data"><a href="#18-vue中怎么重置data" class="headerlink" title="18. vue中怎么重置data"></a>18. vue中怎么重置data</h3><p>答：使用Object.assign()，vm.$data可以获取当前状态下的data，vm.$options.data可以获取到组件初始化状态下的data。<br>Object.assign(this.$data, this.$options.data())</p><h3 id="19-Vue组件中写-name-选项有什么作用？"><a href="#19-Vue组件中写-name-选项有什么作用？" class="headerlink" title="19. Vue组件中写 name 选项有什么作用？"></a>19. Vue组件中写 name 选项有什么作用？</h3><p>答：<br>项目使用 keep-alive 时，可搭配组件 name 进行缓存过滤<br>DOM 做递归组件时需要调用自身 name<br>vue-devtools 调试工具里显示的组见名称是由vue中组件name决定的</p><h3 id="20-Vuex有哪几种属性"><a href="#20-Vuex有哪几种属性" class="headerlink" title="20. Vuex有哪几种属性"></a>20. Vuex有哪几种属性</h3><p>答：有五种，分别是 State、Getter、Mutation、Action、Module</p><h3 id="21-vue-的优点是什么？"><a href="#21-vue-的优点是什么？" class="headerlink" title="21. vue 的优点是什么？"></a>21. vue 的优点是什么？</h3><p>答：低耦合。视图（View）可以独立于 Model 变化和修改，一个 ViewModel 可以绑定到不同的”View”上，当 View 变化的时候 Model 可以不变，当 Model 变化的时候 View 也可以不变。<br>可重用性。你可以把一些视图逻辑放在一个 ViewModel 里面，让很多 view 重用这段视图逻辑。<br>独立开发。开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计，使用 Expression Blend 可以很容易设计界面并生成 xml 代码。<br>可测试。界面素来是比较难于测试的，而现在测试可以针对 ViewModel 来写。</p><h3 id="22-说出至少-4-种-vue-当中的指令和它的用法"><a href="#22-说出至少-4-种-vue-当中的指令和它的用法" class="headerlink" title="22. 说出至少 4 种 vue 当中的指令和它的用法"></a>22. 说出至少 4 种 vue 当中的指令和它的用法</h3><p>答：v-if(判断是否隐藏)、v-for(把数据遍历出来)、v-bind(绑定属性)、v-model(实现双向绑定)</p><h3 id="23-vuex-的-store-特性是什么"><a href="#23-vuex-的-store-特性是什么" class="headerlink" title="23. vuex 的 store 特性是什么"></a>23. vuex 的 store 特性是什么</h3><p>答：vuex 就是一个仓库，仓库里放了很多对象。其中 state 就是数据源存放地，对应于一般 vue 对象里面的 datastate 里面存放的数据是响应式的，vue 组件从 store 读取数据，若是 store 中的数据发生改变，依赖这相数据的组件也会发生更新它通过 mapState 把全局的 state 和 getters 映射到当前组件的 computed 计算属性</p><h3 id="24-vuex-的-getter-特性是什么"><a href="#24-vuex-的-getter-特性是什么" class="headerlink" title="24. vuex 的 getter 特性是什么"></a>24. vuex 的 getter 特性是什么</h3><p>答：getter 可以对 state 进行计算操作，它就是 store 的计算属性虽然在组件内也可以做计算属性，但是 getters 可以在多给件之间复用如果一个状态只在一个组件内使用，是可以不用 getters</p><h3 id="25-vuex-的-mutation-特性是什么"><a href="#25-vuex-的-mutation-特性是什么" class="headerlink" title="25. vuex 的 mutation 特性是什么"></a>25. vuex 的 mutation 特性是什么</h3><p>答：action 类似于 muation, 不同在于：action 提交的是 mutation,而不是直接变更状态action 可以包含任意异步操作<br>vue 中 ajax 请求代码应该写在组件的 methods 中还是 vuex 的 action 中<br>如果请求来的数据不是要被其他组件公用，仅仅在请求的组件内使用，就不需要放入 vuex 的 state 里如果被其他地方复用，请将请求放入 action 里，方便复用，并包装成 promise 返回  </p><h3 id="26-Vuex-如何区分-state-是外部直接修改，还是通过-mutation-方法修改的？美团"><a href="#26-Vuex-如何区分-state-是外部直接修改，还是通过-mutation-方法修改的？美团" class="headerlink" title="26. Vuex 如何区分 state 是外部直接修改，还是通过 mutation 方法修改的？美团"></a>26. Vuex 如何区分 state 是外部直接修改，还是通过 mutation 方法修改的？美团</h3><p>答：Vuex 中修改 state 的唯一渠道就是执行 commit(‘xx’, payload) 方法，其底层通过执行 this._withCommit(fn) 设置_committing 标志变量为 true，然后才能修改 state，修改完毕还需要还原_committing 变量。外部修改虽然能够直接修改 state，但是并没有修改_committing 标志位，所以只要 watch 一下 state，state change 时判断是否_committing 值为 true，即可判断修改的合法性。</p><h3 id="27-不用-vuex-会带来什么问题"><a href="#27-不用-vuex-会带来什么问题" class="headerlink" title="27. 不用 vuex 会带来什么问题"></a>27. 不用 vuex 会带来什么问题</h3><p>答：可维护性会下降，你要修改数据，你得维护 3 个地方<br>可读性下降，因为一个组件里的数据，你根本就看不出来是从哪里来的<br>增加耦合，大量的上传派发，会让耦合性大大的增加，本来 Vue 用 Component 就是为了减少耦合，现在这么用，和组件化的初衷相背</p><h3 id="28-1、v-show-与-v-if-区别"><a href="#28-1、v-show-与-v-if-区别" class="headerlink" title="28. 1、v-show 与 v-if 区别"></a>28. 1、v-show 与 v-if 区别</h3><p>答：<br>1、v-show是css切换，v-if是完整的销毁和重新创建。<br>2、使用 频繁切换时用v-show，运行时较少改变时用v-if<br>3、v-if=‘false’ v-if是条件渲染，当false的时候不会渲染</p><h3 id="29-Class-与-Style-如何动态绑定？"><a href="#29-Class-与-Style-如何动态绑定？" class="headerlink" title="29. Class 与 Style 如何动态绑定？"></a>29. Class 与 Style 如何动态绑定？</h3><p>答：<br>Class<br>1、对象方法 v-bind:class=”{‘orange’: isRipe, ‘green’: isNotRipe}”<br>2、数组方法 v-bind:class=”[class1, class2]”<<br>3、行内 v-bind:style=”{color: color, fontSize: fontSize+’px’}”<br>Stlye<br>1、对象方法 <v-bind:style=”{ color: activecolor, fontsize: fontsize + ‘px’ }”<br>2、数组方法 v-bind:style=”[styleColor,styleSize]”</v-bind:style=”{></p><h3 id="30-说说Vue中的事件修饰符。"><a href="#30-说说Vue中的事件修饰符。" class="headerlink" title="30. 说说Vue中的事件修饰符。"></a>30. 说说Vue中的事件修饰符。</h3><p>答：<br>.native:绑定一个原生的click事件<br>.prevent: 提交时间不再重载页面<br>.stop:阻止单击事件冒泡<br>.self:当事件发生在该元素本身而不是子元素的时候触发<br>.capture:事件侦听，事件发生的时候会调用<br>组合键 click.ctrl.exact 只有ctrl被按下的时候才触发</p></div></body></html>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用ProGet搭建本地私有NuGet仓库</title>
      <link href="/2019/03/03/%E7%94%A8ProGet%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E7%A7%81%E6%9C%89NuGet%E4%BB%93%E5%BA%93/"/>
      <url>/2019/03/03/%E7%94%A8ProGet%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E7%A7%81%E6%9C%89NuGet%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="用ProGet搭建本地私有NuGet仓库"><a href="#用ProGet搭建本地私有NuGet仓库" class="headerlink" title="用ProGet搭建本地私有NuGet仓库"></a>用ProGet搭建本地私有NuGet仓库</h2><h3 id="搭建ProGet"><a href="#搭建ProGet" class="headerlink" title="搭建ProGet#"></a>搭建ProGet#</h3><p>官网下载Windows版本的<code>Inedo Hub</code> （<a href="https://inedo.com/proget/download）" target="_blank" rel="noopener">https://inedo.com/proget/download）</a><br>下载下来的软件名： <code>ProGetInstaller.exe</code></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote><p>原文地址：<a href="https://www.cnblogs.com/zerodai/p/10796535.html" target="_blank" rel="noopener">ZeroDai：《用ProGet搭建本地私有NuGet仓库》</a></p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ProGet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS小技巧</title>
      <link href="/2019/02/26/JS%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2019/02/26/JS%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="JS-操作小技巧"><a href="#JS-操作小技巧" class="headerlink" title="JS 操作小技巧"></a>JS 操作小技巧</h2><h3 id="1-数组乱序排列"><a href="#1-数组乱序排列" class="headerlink" title="1.数组乱序排列"></a>1.数组乱序排列</h3><p>[0,1,2,3,4,5,6,7,8,9].sort((a, b) => Math.random() - 0.5)<br>// 或者<br>[0,1,2,3,4,5,6,7,8,9].sort((a, b) => Math.random() - Math.random())</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab持续集成部署</title>
      <link href="/2019/02/24/GitLab%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/02/24/GitLab%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="GitLab持续集成部署"><a href="#GitLab持续集成部署" class="headerlink" title="GitLab持续集成部署"></a>GitLab持续集成部署</h2><blockquote><p>参考：  </p><p>GitLab持续集成部署：<a href="https://www.cnblogs.com/cnundefined/p/7095368.html" target="_blank" rel="noopener">https://www.cnblogs.com/cnundefined/p/7095368.html</a>  </p><p>docker+gitlab+gitlab-runner部署： <a href="https://www.cnblogs.com/lufeechen/p/10405789.html" target="_blank" rel="noopener">https://www.cnblogs.com/lufeechen/p/10405789.html</a></p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> CICD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CICD </tag>
            
            <tag> GitLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题汇总(一)</title>
      <link href="/2019/02/24/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB-%E4%B8%80/"/>
      <url>/2019/02/24/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>简答题</p><ol><li>谈谈你关于前端优化的经验。</li></ol><ol start="2"><li>谈谈如何使用前端缓存。</li></ol><p>3.单个请求数据量过大，如何优化？请做详细描述！</p><ol start="4"><li>css  Javascript如何压缩引入？</li></ol><p>5.谈谈css js 加载的顺序对页面性能的影响！</p><p>6.如果页面中图片太多，从性能上来说，如何提高性能？</p><ol start="7"><li>详解IIS如何调优？</li></ol><ol start="8"><li>谈谈你在之前工作中，有关于后端性能优化的经验！</li></ol><ol start="9"><li>谈谈你了解的缓存！</li></ol><p>10.请描述Redis的特点：</p><ol start="11"><li>谈谈stringbuilder和stringbuffer区别？</li></ol><p>12．谈谈ArrayList和List<>的性能区别。</p><p>13．说说   123+”字符串”  和  123.Tostring() 的区别。</p><p>14.代码中出现 字符串A.ToUpper()==字符串B  或者  字符串A .ToLower()==字符串B，你会怎么处理？</p><p>15.代码中出现 strCriteria.Trim() == “”， strCriteria为字符串类型变量；你会怎么调整？</p><p>16．说说装箱拆箱的为什么会有性能问题？</p><p>17．Object类型使用引发的性能问题，如何解决？</p><p>18.说说foreach 和 for 循环从性能角度的区别。</p><p>19．在多任务执行的时候，使用多线程，应该注意些什么？</p><ol start="20"><li>在一个网站首页，分为多块的数据，例如：有本周top10，本月top10,个人考勤等！多种数据在首页展示，如果让你来开发，除了使用ajax异步加载，还有什么其他方法能够让数据快速的加载出来？请详解开发思路！</li></ol><p>21．一个电商系统中，某一些订单的数据，可能来源于第三方接口，也可能来源于缓存，也有可能来源于数据库，如何以最高效的方式获取到数据？请详解你的思路？</p><p>22．如果有100个任务需要执行，需要快速的去完成，使用多线程如何实现？是否开启100个线程？为什么？</p><p>23说说在程序中连接数据库查询，如何避免一些性能问题？</p><p>24．谈谈在写sql语句的时候，如何提高性能？</p><ol start="25"><li>谈谈数据库的索引！使用索引需要注意些什么？</li></ol><p>26．谈谈数据库分库分表的方式。</p><p>27．谈谈如何做数据库集群？</p><p>28．谈谈数据库如何配置读写分离？</p><ol start="29"><li>谈谈你了解到的队列有哪些？</li></ol><p>30．如果一个系统出现性能瓶颈，让你来处理的话，说说你的性能优化计划。</p><p>1、使用MVC模式有什么优点？</p><p>2、请简述使用ASP.NET MVC框架访问一个页面的执行流程。</p><p>3、请说明MVC  Filter的特点、思想；框架提供的Filter有哪些？如何扩展Filter？</p><p>4、请说明MVC中Filter的集中注册方式。</p><p>5、请详解MVC路由的特点！如何扩展路由？</p><p>6、请说明MVC中global.asax.cs 文件的意义？</p><p>7、请说明在MVC视图中如果不适用using关键字，如何引用某个自定义实体类型！</p><p>8、请说明MVC中Area的作用以及在MVC中如果使用了Area以后我们需要注意什么？</p><p>9、请说明如何抓取并处理，异常Filter 抓取不到的异常？</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题汇总之数据结构与算法篇</title>
      <link href="/2019/02/08/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E7%AF%87/"/>
      <url>/2019/02/08/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body></body></html>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题汇总之JS篇</title>
      <link href="/2019/02/07/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB%E4%B9%8BJS%E7%AF%87/"/>
      <url>/2019/02/07/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB%E4%B9%8BJS%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h3 id="1-javascript的typeof返回哪些数据类型"><a href="#1-javascript的typeof返回哪些数据类型" class="headerlink" title="1. javascript的typeof返回哪些数据类型."></a>1. javascript的typeof返回哪些数据类型.</h3><p>答；string,boolean,number,underfined,function,object</p><h3 id="2-例举3种强制类型转换和2种隐式类型转换"><a href="#2-例举3种强制类型转换和2种隐式类型转换" class="headerlink" title="2. 例举3种强制类型转换和2种隐式类型转换?"></a>2. 例举3种强制类型转换和2种隐式类型转换?</h3><p>强制：parseInt,parseFloat,number<br>隐式：==,===</p><h3 id="3-split-join-的区别"><a href="#3-split-join-的区别" class="headerlink" title="3. split() join() 的区别"></a>3. split() join() 的区别</h3><p>split：是将字符串切割成数组的形式<br>join：是将数组转换成字符串</p><h3 id="4-数组方法pop-push-unshift-shift"><a href="#4-数组方法pop-push-unshift-shift" class="headerlink" title="4. 数组方法pop() push() unshift() shift()"></a>4. 数组方法pop() push() unshift() shift()</h3><p>push：尾部添加<br>pop：尾部删除<br>unshift：头部添加<br>shift：头部删除</p><h3 id="5-IE和标准下有哪些兼容性的写法"><a href="#5-IE和标准下有哪些兼容性的写法" class="headerlink" title="5. IE和标准下有哪些兼容性的写法"></a>5. IE和标准下有哪些兼容性的写法</h3><p>var ev = ev || window.event<br>document.documentElement.clientWidth || document.body.clientWidth<br>Var target = ev.srcElement||ev.target</p><h3 id="6-ajax请求的时候get-和post方式的区别"><a href="#6-ajax请求的时候get-和post方式的区别" class="headerlink" title="6. ajax请求的时候get 和post方式的区别"></a>6. ajax请求的时候get 和post方式的区别</h3><p>get：在url后面，而且有大小限制，是请求数据的模式<br>post：是放在虚拟载体里面，是提交数据的模式</p><h3 id="7-call和apply的区别"><a href="#7-call和apply的区别" class="headerlink" title="7. call和apply的区别"></a>7. call和apply的区别</h3><p>call：Object.call(this,obj1,obj2,obj3)<br>apply：Object.apply(this,arguments)</p><h3 id="8-ajax请求时，如何解析json数据"><a href="#8-ajax请求时，如何解析json数据" class="headerlink" title="8. ajax请求时，如何解析json数据"></a>8. ajax请求时，如何解析json数据</h3><p>使用json.parse</p><h3 id="9-事件委托是什么"><a href="#9-事件委托是什么" class="headerlink" title="9. 事件委托是什么"></a>9. 事件委托是什么</h3><p>利用事件冒泡的原理，让自己所触发的事件，让元素的父元素代替执行</p><h3 id="10-闭包是什么，有什么特性，对页面有什么影响"><a href="#10-闭包是什么，有什么特性，对页面有什么影响" class="headerlink" title="10. 闭包是什么，有什么特性，对页面有什么影响"></a>10. 闭包是什么，有什么特性，对页面有什么影响</h3><p>闭包就是能够读取其他函数内部变量的函数；可以让函数不被回收；如果过多使用闭包容易导致内存泄漏</p><h3 id="11-如何阻止事件冒泡"><a href="#11-如何阻止事件冒泡" class="headerlink" title="11. 如何阻止事件冒泡"></a>11. 如何阻止事件冒泡</h3><p>IE：ev.cancelBubble = true;<br>非IE：ev.stopPropagation();</p><h3 id="12-如何阻止默认事件"><a href="#12-如何阻止默认事件" class="headerlink" title="12. 如何阻止默认事件"></a>12. 如何阻止默认事件</h3><p>(1)return false；(2) ev.preventDefault();</p><h3 id="13-添加-删除-替换-插入到某个接点的方法"><a href="#13-添加-删除-替换-插入到某个接点的方法" class="headerlink" title="13. 添加 删除 替换 插入到某个接点的方法"></a>13. 添加 删除 替换 插入到某个接点的方法</h3><p>1）创建新节点<br>createElement() //创建一个具体的元素<br>createTextNode() //创建一个文本节点<br> 2）添加、移除、替换、插入<br>appendChild()　　//添加<br>removeChild()　　移除<br>replaceChild()　　//替换<br>insertBefore()　　//插入<br>3）查找<br>getElementsByTagName() //通过标签名称<br>getElementsByName() //通过元素的Name属性的值<br>getElementById() //通过元素Id，唯一性  </p><h3 id="14-解释jsonp的原理，以及为什么不是真正的ajax"><a href="#14-解释jsonp的原理，以及为什么不是真正的ajax" class="headerlink" title="14. 解释jsonp的原理，以及为什么不是真正的ajax"></a>14. 解释jsonp的原理，以及为什么不是真正的ajax</h3><p>jsonp是动态创建script标签，回调函数，而ajax是页面无刷新请求数据操作</p><h3 id="15-document-load-和document-ready的区别"><a href="#15-document-load-和document-ready的区别" class="headerlink" title="15. document load 和document ready的区别"></a>15. document load 和document ready的区别</h3><p>document.onload是在结构，样式，外部js和图片加载完才执行js，document.onready是dom树创建完成就执行的方法jq有这种方法，原生没有</p><h3 id="16-”-”和“-”的不同"><a href="#16-”-”和“-”的不同" class="headerlink" title="16. ”==”和“===”的不同"></a>16. ”==”和“===”的不同</h3><p>==：会自动转换类型，然后再去比较<br>===：不转换类型之间去比较</p><h3 id="17-函数声明与函数表达式的区别？"><a href="#17-函数声明与函数表达式的区别？" class="headerlink" title="17. 函数声明与函数表达式的区别？"></a>17. 函数声明与函数表达式的区别？</h3><p>在Javscript中，解析器在向执行环境中加载数据时，对函数声明和函数表达式并非是一视同仁的，解析器会率先读取函数声明，并使其在执行任何代码之前可用（可以访问），至于函数表达式，则必须等到解析器执行到它所在的代码行，才会真正被解析执行</p><h3 id="18-对作用域上下文和this的理解，看下列代码："><a href="#18-对作用域上下文和this的理解，看下列代码：" class="headerlink" title="18. 对作用域上下文和this的理解，看下列代码："></a>18. 对作用域上下文和this的理解，看下列代码：</h3><pre><code>var User = { count: 1, getCount: function() {  return this.count; }};console.log(User.getCount()); // what?var func = User.getCount;console.log(func()); // what?</code></pre><p>问两处console输出什么？为什么？<br>答案:是1和undefined。<br>　　func是在window的上下文中被执行的，所以不会访问到count属性。</p><h3 id="19-看下面代码，给出输出结果。"><a href="#19-看下面代码，给出输出结果。" class="headerlink" title="19. 看下面代码，给出输出结果。"></a>19. 看下面代码，给出输出结果。</h3><pre><code>for(var i = 1; i <= 3; i++){  //建议使用let 可正常输出i的值  setTimeout(function(){      console.log(i);     },0); };  </code></pre><p>答案：4 4 4。<br>原因：Javascript事件处理器在线程空闲之前不会运行。</p><h3 id="20-当一个DOM节点被点击时候，我们希望能够执行一个函数，应该怎么做"><a href="#20-当一个DOM节点被点击时候，我们希望能够执行一个函数，应该怎么做" class="headerlink" title="20. 当一个DOM节点被点击时候，我们希望能够执行一个函数，应该怎么做?"></a>20. 当一个DOM节点被点击时候，我们希望能够执行一个函数，应该怎么做?</h3><pre><code>box.onlick= function(){}box.addEventListener("click",function(){},false);<button onclick="xxx()"></button></code></pre><h3 id="23-判断字符串以字母开头，后面可以是数字，下划线，字母，长度为6-30"><a href="#23-判断字符串以字母开头，后面可以是数字，下划线，字母，长度为6-30" class="headerlink" title="23. 判断字符串以字母开头，后面可以是数字，下划线，字母，长度为6-30"></a>23. 判断字符串以字母开头，后面可以是数字，下划线，字母，长度为6-30</h3><pre><code>var reg=/^[a-zA-Z]\w{5,29}$/;</code></pre><h3 id="24-回答以下代码，alert的值分别是多少？"><a href="#24-回答以下代码，alert的值分别是多少？" class="headerlink" title="24. 回答以下代码，alert的值分别是多少？"></a>24. 回答以下代码，alert的值分别是多少？</h3><pre><code><script>     var a = 100;       function test(){          console.log(a);       a = 10;  //去掉了var 就变成定义了全局变量了        console.log(a);  }      test();    console.log(a);</script></code></pre><p>正确答案是： 100， 10， 10</p><h3 id="25-javaScript的2种变量范围有什么不同？"><a href="#25-javaScript的2种变量范围有什么不同？" class="headerlink" title="25. javaScript的2种变量范围有什么不同？"></a>25. javaScript的2种变量范围有什么不同？</h3><p>全局变量：当前页面内有效<br>局部变量：函数方法内有效</p><h3 id="26-null和undefined的区别？"><a href="#26-null和undefined的区别？" class="headerlink" title="26. null和undefined的区别？"></a>26. null和undefined的区别？</h3><p>null是一个表示”无”的对象，转为数值时为0；undefined是一个表示”无”的原始值，转为数值时为NaN。<br>当声明的变量还未被初始化时，变量的默认值为undefined。 null用来表示尚未存在的对象<br>undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：<br>（1）变量被声明了，但没有赋值时，就等于undefined。<br>（2）调用函数时，应该提供的参数没有提供，该参数等于undefined。<br>（3）对象没有赋值的属性，该属性的值为undefined。<br>（4）函数没有返回值时，默认返回undefined。<br>null表示”没有对象”，即该处不应该有值。典型用法是：<br>（1） 作为函数的参数，表示该函数的参数不是对象。<br>（2） 作为对象原型链的终点。  </p><h3 id="27-new操作符具体干了什么呢"><a href="#27-new操作符具体干了什么呢" class="headerlink" title="27. new操作符具体干了什么呢?"></a>27. new操作符具体干了什么呢?</h3><p>1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。<br>2、属性和方法被加入到 this 引用的对象中。<br>3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。</p><h3 id="28-js延迟加载的方式有哪些？"><a href="#28-js延迟加载的方式有哪些？" class="headerlink" title="28. js延迟加载的方式有哪些？"></a>28. js延迟加载的方式有哪些？</h3><p>defer和async、动态创建DOM方式（创建script，插入到DOM中，加载完毕后callBack）、按需异步载入js</p><h3 id="29-Flash、Ajax各自的优缺点，在使用中如何取舍？"><a href="#29-Flash、Ajax各自的优缺点，在使用中如何取舍？" class="headerlink" title="29. Flash、Ajax各自的优缺点，在使用中如何取舍？"></a>29. Flash、Ajax各自的优缺点，在使用中如何取舍？</h3><p>Flash：适合处理多媒体，矢量图，访问机器；对css，处理文本上不足，不容易被搜索<br>Ajax：对css，文本支持很好，易搜索；多媒体，矢量图形，机器访问不足<br>共同点：与服务器得无刷新传递消息，用户离线和在线状态，操作dom</p><h3 id="30-写一个获取非行间样式的函数"><a href="#30-写一个获取非行间样式的函数" class="headerlink" title="30. 写一个获取非行间样式的函数"></a>30. 写一个获取非行间样式的函数</h3><pre><code>function getStyle(obj,attr) {    if(obj.currentStyle) {        return obj.currentStyle[attr];    }else{        getComputedStyle(obi,false)[attr]     }}</code></pre><h3 id="31-希望获取到页面中所有的checkbox怎么做？"><a href="#31-希望获取到页面中所有的checkbox怎么做？" class="headerlink" title="31. 希望获取到页面中所有的checkbox怎么做？"></a>31. 希望获取到页面中所有的checkbox怎么做？</h3><p>var inputs = document.getElementsByTagName(“input”);//获取所有的input标签对象  </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var checkboxArray = [];//初始化空数组，用来存放checkbox对象。</span><br><span class="line"></span><br><span class="line">for(var i=0;i<inputs.length;i++){< span><br><span class="line">  var obj = inputs[i];</span><br><span class="line">  if(obj.type=='checkbox'){</span><br><span class="line">     checkboxArray.push(obj);</span><br><span class="line">  }</span><br><span class="line">}</span><br></inputs.length;i++){<></span></pre></td></tr></tbody></table></figure></div><h3 id="32-写一个function，清除字符串前后的空格。（兼容所有浏览器）"><a href="#32-写一个function，清除字符串前后的空格。（兼容所有浏览器）" class="headerlink" title="32. 写一个function，清除字符串前后的空格。（兼容所有浏览器）"></a>32. 写一个function，清除字符串前后的空格。（兼容所有浏览器）</h3><pre><code>String.prototype.trim= function(){    return this.replace(/^\s+/,"").replace(/\s+$/,"");}</code></pre><h3 id="33-javascript语言特性中，有很多方面和我们接触的其他编程语言不太一样-请举例"><a href="#33-javascript语言特性中，有很多方面和我们接触的其他编程语言不太一样-请举例" class="headerlink" title="33. javascript语言特性中，有很多方面和我们接触的其他编程语言不太一样,请举例"></a>33. javascript语言特性中，有很多方面和我们接触的其他编程语言不太一样,请举例</h3><p>javascript语言实现继承机制的核心就是<br>1 (原型)，而不是Java语言那样的类式继承。Javascript解析引擎在读取一个Object的属性的值时，会沿着<br>2 (原型链)向上寻找，如果最终没有找到，则该属性值为<br>3 undefined；如果最终找到该属性的值，则返回结果。与这个过程不同的是，当javascript解析引擎执行“给一个Object的某个属性赋值”的时候，如果当前Object存在该属性，则改写该属性的值，如果当前的Object本身并不存在该属性，则赋值该属性的值。</p><h3 id="34-Cookie在客户机上是如何存储的"><a href="#34-Cookie在客户机上是如何存储的" class="headerlink" title="34. Cookie在客户机上是如何存储的"></a>34. Cookie在客户机上是如何存储的</h3><p>Cookies就是服务器暂存放在你的电脑里的文本文件，好让服务器用来辨认你的计算机。当你在浏览网站的时候，Web服务器会先送一小小资料放在你的计算机上，Cookies 会帮你在网站上所打的文字或是一些选择都记录下来。当下次你再访问同一个网站，Web服务器会先看看有没有它上次留下的Cookies资料，有的话，就会依据Cookie里的内容来判断使用者，送出特定的网页内容给你。</p><h3 id="35-如何获取javascript三个数中的最大值和最小值？"><a href="#35-如何获取javascript三个数中的最大值和最小值？" class="headerlink" title="35. 如何获取javascript三个数中的最大值和最小值？"></a>35. 如何获取javascript三个数中的最大值和最小值？</h3><p>Math.max(a,b,c);//最大值<br>Math.min(a,b,c)//最小值</p><h3 id="36-javascript是面向对象的，怎么体现javascript的继承关系？"><a href="#36-javascript是面向对象的，怎么体现javascript的继承关系？" class="headerlink" title="36. javascript是面向对象的，怎么体现javascript的继承关系？"></a>36. javascript是面向对象的，怎么体现javascript的继承关系？</h3><p>使用prototype原型来实现。  </p><h3 id="37-form中的input可以设置为readonly和disable，请问2者有什么区别？"><a href="#37-form中的input可以设置为readonly和disable，请问2者有什么区别？" class="headerlink" title="37. .form中的input可以设置为readonly和disable，请问2者有什么区别？"></a>37. .form中的input可以设置为readonly和disable，请问2者有什么区别？</h3><p>readonly不可编辑，但可以选择和复制；值可以传递到后台<br>disabled不能编辑，不能复制，不能选择；值不可以传递到后台</p><h3 id="38-列举javaScript的3种主要数据类型，2种复合数据类型和2种特殊数据类型。"><a href="#38-列举javaScript的3种主要数据类型，2种复合数据类型和2种特殊数据类型。" class="headerlink" title="38. 列举javaScript的3种主要数据类型，2种复合数据类型和2种特殊数据类型。"></a>38. 列举javaScript的3种主要数据类型，2种复合数据类型和2种特殊数据类型。</h3><p>主要数据类型：string, boolean, number<br>复合数据类型：function, object<br>特殊类型：undefined，null</p><h3 id="39-程序中捕获异常的方法？"><a href="#39-程序中捕获异常的方法？" class="headerlink" title="39. 程序中捕获异常的方法？"></a>39. 程序中捕获异常的方法？</h3><pre><code>try{}catch(e){}finally{}</code></pre><h3 id="40-Ajax原理"><a href="#40-Ajax原理" class="headerlink" title="40. Ajax原理"></a>40. Ajax原理</h3><p>(1)创建对象<br>    var xhr = new XMLHttpRequest();</p><p>(2)打开请求<br>    xhr.open(‘GET’, ‘example.txt’, true);</p><p>(3)发送请求<br>    xhr.send(); 发送请求到服务器</p><p>(4)接收响应<br>    xhr.onreadystatechange =function(){}</p><p>(1)当readystate值从一个值变为另一个值时，都会触发readystatechange事件。<br>(2)当readystate==4时，表示已经接收到全部响应数据。<br>(3)当status ==200时，表示服务器成功返回页面和数据。<br>(4)如果(2)和(3)内容同时满足，则可以通过xhr.responseText，获得服务器返回的内容。  </p></body></html>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
